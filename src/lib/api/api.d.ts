/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/Account": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthorizedAccountDto"];
            "application/json": components["schemas"]["AuthorizedAccountDto"];
            "text/json": components["schemas"]["AuthorizedAccountDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Account/{discordId}": {
    get: {
      parameters: {
        path: {
          discordId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MinecraftAccountDto"];
            "application/json": components["schemas"]["MinecraftAccountDto"];
            "text/json": components["schemas"]["MinecraftAccountDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Account/{playerUuidOrIgn}": {
    get: {
      parameters: {
        path: {
          playerUuidOrIgn: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MinecraftAccountDto"];
            "application/json": components["schemas"]["MinecraftAccountDto"];
            "text/json": components["schemas"]["MinecraftAccountDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          playerUuidOrIgn: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          playerUuidOrIgn: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Account/primary/{playerUuidOrIgn}": {
    post: {
      parameters: {
        path: {
          playerUuidOrIgn: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/create": {
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EditEventDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"];
            "application/json": components["schemas"]["EventDetailsDto"];
            "text/json": components["schemas"]["EventDetailsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/edit": {
    post: {
      parameters: {
        path: {
          eventId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["EditEventDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"];
            "application/json": components["schemas"]["EventDetailsDto"];
            "text/json": components["schemas"]["EventDetailsDto"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/bans": {
    get: {
      parameters: {
        path: {
          eventId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventMemberBannedDto"][];
            "application/json": components["schemas"]["EventMemberBannedDto"][];
            "text/json": components["schemas"]["EventMemberBannedDto"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/bans/{playerUuid}": {
    post: {
      parameters: {
        path: {
          eventId: number;
          playerUuid: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": string;
          "text/json": string;
          "application/*+json": string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventMemberBannedDto"][];
            "application/json": components["schemas"]["EventMemberBannedDto"][];
            "text/json": components["schemas"]["EventMemberBannedDto"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          eventId: number;
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Bot/{guildId}": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["GuildDto"];
            "application/json": components["schemas"]["GuildDto"];
            "text/json": components["schemas"]["GuildDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Bot/{guildId}/jacob": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["GuildJacobLeaderboardFeature"];
            "application/json": components["schemas"]["GuildJacobLeaderboardFeature"];
            "text/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          "text/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          "application/*+json": components["schemas"]["GuildJacobLeaderboardFeature"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Bot/account": {
    patch: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["IncomingAccountDto"];
          "text/json": components["schemas"]["IncomingAccountDto"];
          "application/*+json": components["schemas"]["IncomingAccountDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthorizedAccountDto"];
            "application/json": components["schemas"]["AuthorizedAccountDto"];
            "text/json": components["schemas"]["AuthorizedAccountDto"];
          };
        };
      };
    };
  };
  "/Bot/account/{discordId}/{playerIgnOrUuid}": {
    post: {
      parameters: {
        path: {
          discordId: number;
          playerIgnOrUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          discordId: number;
          playerIgnOrUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/Bot/account/{discordId}/{playerIgnOrUuid}/primary": {
    post: {
      parameters: {
        path: {
          discordId: number;
          playerIgnOrUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/Contests/at/{year}": {
    get: {
      parameters: {
        path: {
          year: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["YearlyContestsDto"];
            "application/json": components["schemas"]["YearlyContestsDto"];
            "text/json": components["schemas"]["YearlyContestsDto"];
          };
        };
      };
    };
  };
  "/Contests/Records/{year}": {
    get: {
      parameters: {
        path: {
          year: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["YearlyCropRecordsDto"];
            "application/json": components["schemas"]["YearlyCropRecordsDto"];
            "text/json": components["schemas"]["YearlyCropRecordsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/at/now": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["YearlyContestsDto"];
            "application/json": components["schemas"]["YearlyContestsDto"];
            "text/json": components["schemas"]["YearlyContestsDto"];
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": {
            [key: string]: string[];
          };
          "text/json": {
            [key: string]: string[];
          };
          "application/*+json": {
            [key: string]: string[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/at/{year}/{month}/{day}": {
    get: {
      parameters: {
        path: {
          year: number;
          month: number;
          day: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["JacobContestWithParticipationsDto"][];
            "application/json": components["schemas"]["JacobContestWithParticipationsDto"][];
            "text/json": components["schemas"]["JacobContestWithParticipationsDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/at/{year}/{month}": {
    get: {
      parameters: {
        path: {
          year: number;
          month: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              [key: string]: components["schemas"]["JacobContestDto"][];
            };
            "application/json": {
              [key: string]: components["schemas"]["JacobContestDto"][];
            };
            "text/json": {
              [key: string]: components["schemas"]["JacobContestDto"][];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/{timestamp}": {
    get: {
      parameters: {
        path: {
          timestamp: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["JacobContestWithParticipationsDto"][];
            "application/json": components["schemas"]["JacobContestWithParticipationsDto"][];
            "text/json": components["schemas"]["JacobContestWithParticipationsDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contest/{contestKey}": {
    get: {
      parameters: {
        path: {
          contestKey: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["JacobContestWithParticipationsDto"];
            "application/json": components["schemas"]["JacobContestWithParticipationsDto"];
            "text/json": components["schemas"]["JacobContestWithParticipationsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Events": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"][];
            "application/json": components["schemas"]["EventDetailsDto"][];
            "text/json": components["schemas"]["EventDetailsDto"][];
          };
        };
      };
    };
  };
  "/Event/{eventId}": {
    get: {
      parameters: {
        path: {
          eventId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"];
            "application/json": components["schemas"]["EventDetailsDto"];
            "text/json": components["schemas"]["EventDetailsDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/members": {
    get: {
      parameters: {
        path: {
          eventId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventMemberDto"][];
            "application/json": components["schemas"]["EventMemberDto"][];
            "text/json": components["schemas"]["EventMemberDto"][];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/member/{playerUuid}": {
    get: {
      parameters: {
        path: {
          eventId: number;
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventMemberDto"][];
            "application/json": components["schemas"]["EventMemberDto"][];
            "text/json": components["schemas"]["EventMemberDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/join": {
    post: {
      parameters: {
        query?: {
          playerUuid?: string;
          profileId?: string;
        };
        path: {
          eventId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"];
            "application/json": components["schemas"]["EventDetailsDto"];
            "text/json": components["schemas"]["EventDetailsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Event/{eventId}/leave": {
    post: {
      parameters: {
        path: {
          eventId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"];
            "application/json": components["schemas"]["EventDetailsDto"];
            "text/json": components["schemas"]["EventDetailsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Graph/{playerUuid}/{profileUuid}/crops": {
    get: {
      parameters: {
        query?: {
          days?: number;
          from?: number;
        };
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CropCollectionsDataPointDto"][];
            "application/json": components["schemas"]["CropCollectionsDataPointDto"][];
            "text/json": components["schemas"]["CropCollectionsDataPointDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Graph/{playerUuid}/{profileUuid}/skills": {
    get: {
      parameters: {
        query?: {
          days?: number;
          from?: number;
        };
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CropCollectionsDataPointDto"][];
            "application/json": components["schemas"]["CropCollectionsDataPointDto"][];
            "text/json": components["schemas"]["CropCollectionsDataPointDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Graph/Admin/{playerUuid}/{profileUuid}/crops": {
    get: {
      parameters: {
        query?: {
          days?: number;
          from?: number;
        };
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CropCollectionsDataPointDto"][];
            "application/json": components["schemas"]["CropCollectionsDataPointDto"][];
            "text/json": components["schemas"]["CropCollectionsDataPointDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Graph/Admin/{playerUuid}/{profileUuid}/skills": {
    get: {
      parameters: {
        query?: {
          days?: number;
          from?: number;
        };
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SkillsDataPointDto"][];
            "application/json": components["schemas"]["SkillsDataPointDto"][];
            "text/json": components["schemas"]["SkillsDataPointDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Guilds": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["GuildDetailsDto"][];
            "application/json": components["schemas"]["GuildDetailsDto"][];
            "text/json": components["schemas"]["GuildDetailsDto"][];
          };
        };
      };
    };
  };
  "/Guild/{guildId}": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PublicGuildDto"];
            "application/json": components["schemas"]["PublicGuildDto"];
            "text/json": components["schemas"]["PublicGuildDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Guild/{guildId}/Events": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventDetailsDto"][];
            "application/json": components["schemas"]["EventDetailsDto"][];
            "text/json": components["schemas"]["EventDetailsDto"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Leaderboard/{id}": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardDto"];
            "application/json": components["schemas"]["LeaderboardDto"];
            "text/json": components["schemas"]["LeaderboardDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Leaderboard/skill/{skillName}": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          skillName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardDto"];
            "application/json": components["schemas"]["LeaderboardDto"];
            "text/json": components["schemas"]["LeaderboardDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Leaderboard/collection/{collection}": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
        };
        path: {
          collection: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardDto"];
            "application/json": components["schemas"]["LeaderboardDto"];
            "text/json": components["schemas"]["LeaderboardDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Leaderboard/ranks/{playerUuid}/{profileUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardPositionsDto"];
            "application/json": components["schemas"]["LeaderboardPositionsDto"];
            "text/json": components["schemas"]["LeaderboardPositionsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Leaderboard/rank/{leaderboardId}/{playerUuid}/{profileUuid}": {
    get: {
      parameters: {
        query?: {
          includeUpcoming?: boolean;
          atRank?: number;
        };
        path: {
          leaderboardId: string;
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardPositionDto"];
            "application/json": components["schemas"]["LeaderboardPositionDto"];
            "text/json": components["schemas"]["LeaderboardPositionDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Login/callback": {
    get: {
      parameters: {
        query?: {
          code?: string;
          state?: string;
          error?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/Player/{playerUuidOrIgn}": {
    get: {
      parameters: {
        path: {
          playerUuidOrIgn: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerDataDto"];
            "application/json": components["schemas"]["PlayerDataDto"];
            "text/json": components["schemas"]["PlayerDataDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Player/{discordId}": {
    get: {
      parameters: {
        path: {
          discordId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LinkedAccountsDto"];
            "application/json": components["schemas"]["LinkedAccountsDto"];
            "text/json": components["schemas"]["LinkedAccountsDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/{playerUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ContestParticipationDto"][];
            "application/json": components["schemas"]["ContestParticipationDto"][];
            "text/json": components["schemas"]["ContestParticipationDto"][];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/{playerUuid}/{profileUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ContestParticipationDto"][];
            "application/json": components["schemas"]["ContestParticipationDto"][];
            "text/json": components["schemas"]["ContestParticipationDto"][];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Contests/{playerUuid}/Selected": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ContestParticipationDto"][];
            "application/json": components["schemas"]["ContestParticipationDto"][];
            "text/json": components["schemas"]["ContestParticipationDto"][];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Profile/{uuid}/Selected": {
    get: {
      parameters: {
        path: {
          uuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileMemberDto"];
            "application/json": components["schemas"]["ProfileMemberDto"];
            "text/json": components["schemas"]["ProfileMemberDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Profile/{playerUuid}/{profileUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileMemberDto"];
            "application/json": components["schemas"]["ProfileMemberDto"];
            "text/json": components["schemas"]["ProfileMemberDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Profile/{profileUuid}": {
    get: {
      parameters: {
        path: {
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileDetailsDto"];
            "application/json": components["schemas"]["ProfileDetailsDto"];
            "text/json": components["schemas"]["ProfileDetailsDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Profiles/{playerUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProfileDetailsDto"][];
            "application/json": components["schemas"]["ProfileDetailsDto"][];
            "text/json": components["schemas"]["ProfileDetailsDto"][];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/User/Guilds": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserGuildDto"][];
            "application/json": components["schemas"]["UserGuildDto"][];
            "text/json": components["schemas"]["UserGuildDto"][];
          };
        };
      };
    };
  };
  "/User/Guild/{guildId}": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthorizedGuildDto"];
            "application/json": components["schemas"]["AuthorizedGuildDto"];
            "text/json": components["schemas"]["AuthorizedGuildDto"];
          };
        };
      };
    };
  };
  "/User/Guild/{guildId}/Invite": {
    put: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": string;
          "text/json": string;
          "application/*+json": string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/User/Guild/{guildId}/Jacob": {
    get: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["GuildJacobLeaderboardFeature"];
            "application/json": components["schemas"]["GuildJacobLeaderboardFeature"];
            "text/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          "text/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          "application/*+json": components["schemas"]["GuildJacobLeaderboardFeature"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/User/Guild/{guildId}/Jacob/Leaderboard": {
    post: {
      parameters: {
        path: {
          guildId: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GuildJacobLeaderboard"];
          "text/json": components["schemas"]["GuildJacobLeaderboard"];
          "application/*+json": components["schemas"]["GuildJacobLeaderboard"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/User/Guild/{guildId}/Jacob/{lbId}": {
    put: {
      parameters: {
        path: {
          guildId: number;
          lbId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["GuildJacobLeaderboard"];
          "text/json": components["schemas"]["GuildJacobLeaderboard"];
          "application/*+json": components["schemas"]["GuildJacobLeaderboard"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["GuildJacobLeaderboardFeature"];
            "application/json": components["schemas"]["GuildJacobLeaderboardFeature"];
            "text/json": components["schemas"]["GuildJacobLeaderboardFeature"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          guildId: number;
          lbId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/User/Guild/{guildId}/Jacob/{lbId}/Send": {
    post: {
      parameters: {
        path: {
          guildId: number;
          lbId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  "/Weight/{playerUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FarmingWeightAllProfilesDto"];
            "application/json": components["schemas"]["FarmingWeightAllProfilesDto"];
            "text/json": components["schemas"]["FarmingWeightAllProfilesDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Weight/{playerUuid}/Selected": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FarmingWeightDto"];
            "application/json": components["schemas"]["FarmingWeightDto"];
            "text/json": components["schemas"]["FarmingWeightDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Weight/{playerUuid}/{profileUuid}": {
    get: {
      parameters: {
        path: {
          playerUuid: string;
          profileUuid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FarmingWeightDto"];
            "application/json": components["schemas"]["FarmingWeightDto"];
            "text/json": components["schemas"]["FarmingWeightDto"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/Weights": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              [key: string]: number;
            };
            "application/json": {
              [key: string]: number;
            };
            "text/json": {
              [key: string]: number;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiAccessDto: {
      inventories?: boolean;
      collections?: boolean;
      skills?: boolean;
      vault?: boolean;
    };
    AuthorizedAccountDto: {
      id?: string;
      displayName?: string;
      username?: string;
      /** Format: int32 */
      permissions?: number;
      discriminator?: string | null;
      email?: string | null;
      locale?: string | null;
      avatar?: string | null;
      redemptions?: components["schemas"]["RedemptionDto"][];
      inventory?: components["schemas"]["EliteInventoryDto"];
      settings?: components["schemas"]["EliteSettingsDto"];
      eventEntries?: components["schemas"]["EventMemberDetailsDto"][];
      minecraftAccounts?: components["schemas"]["MinecraftAccountDetailsDto"][];
    };
    AuthorizedGuildDto: {
      id?: string;
      permissions?: string;
      guild?: components["schemas"]["GuildDto"];
      discordGuild?: components["schemas"]["FullDiscordGuild"];
    };
    AutoRoles: {
      roleId?: string | null;
      /** Format: int32 */
      requiredWeight?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ChannelType: 0 | 1 | 2 | 3 | 4 | 5 | 10 | 11 | 12 | 13 | 14 | 15;
    ContestParticipationDto: {
      crop?: string;
      /** Format: int64 */
      timestamp?: number;
      /** Format: int32 */
      collected?: number;
      /** Format: int32 */
      position?: number;
      /** Format: int32 */
      participants?: number;
      medal?: string | null;
    };
    ContestParticipationWithTimestampDto: {
      playerUuid?: string;
      playerName?: string;
      profileUuid?: string;
      /** Format: int64 */
      timestamp?: number;
      /** Format: int32 */
      collected?: number;
      /** Format: int32 */
      position?: number;
      /** Format: int32 */
      participants?: number;
    };
    CropCollectionsDataPointDto: {
      /** Format: int64 */
      timestamp?: number;
      crops?: {
        [key: string]: number;
      };
    };
    CropRecords: {
      cactus?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      carrot?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      potato?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      wheat?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      melon?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      pumpkin?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      mushroom?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      cocoaBeans?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      sugarCane?: components["schemas"]["GuildJacobLeaderboardEntry"][];
      netherWart?: components["schemas"]["GuildJacobLeaderboardEntry"][];
    };
    DiscordChannel: {
      id?: string;
      name?: string;
      type?: components["schemas"]["ChannelType"];
      /** Format: int32 */
      flags?: number;
      /** Format: int32 */
      position?: number;
      guild_id?: string | null;
      parent_id?: string | null;
    };
    DiscordRole: {
      name?: string;
      id?: string;
    };
    DiscordRoleData: {
      id?: string;
      name?: string;
      permissions?: string | null;
      /** Format: int32 */
      position?: number;
      /** Format: int32 */
      color?: number;
    };
    EditEventDto: {
      name?: string | null;
      description?: string | null;
      rules?: string | null;
      prizeInfo?: string | null;
      banner?: string | null;
      thumbnail?: string | null;
      /** Format: int64 */
      startTime?: number | null;
      /** Format: int64 */
      endTime?: number | null;
      dynamicStartTime?: boolean | null;
      active?: boolean | null;
      requiredRole?: string | null;
      blockedRole?: string | null;
      guildId?: string | null;
    };
    EliteInventoryDto: {
      totalEarnedMedals?: components["schemas"]["MedalInventoryDto"];
      spentMedals?: components["schemas"]["MedalInventoryDto"];
      /** Format: int32 */
      eventTokens?: number;
      /** Format: int32 */
      eventTokensSpent?: number;
      /** Format: int32 */
      leaderboardTokens?: number;
      /** Format: int32 */
      leaderboardTokensSpent?: number;
      unlockedCosmetics?: string[];
    };
    EliteSettingsDto: {
      defaultPlayerUuid?: string;
      hideDiscordTag?: boolean;
    };
    EventCreatedDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    EventDetailsDto: {
      id?: string;
      name?: string;
      description?: string | null;
      rules?: string | null;
      prizeInfo?: string | null;
      banner?: string | null;
      thumbnail?: string | null;
      startTime?: string | null;
      endTime?: string | null;
      dynamicStartTime?: boolean;
      active?: boolean;
      requiredRole?: string | null;
      blockedRole?: string | null;
      guildId?: string | null;
    };
    EventMemberBannedDto: {
      playerUuid?: string | null;
      playerName?: string | null;
      amountGained?: string | null;
      notes?: string | null;
      lastUpdated?: string | null;
    };
    EventMemberDetailsDto: {
      playerUuid?: string | null;
      playerName?: string | null;
      eventId?: string;
      status?: components["schemas"]["EventMemberStatus"];
      amountGained?: string | null;
      lastUpdated?: string | null;
    };
    EventMemberDto: {
      playerUuid?: string | null;
      playerName?: string | null;
      eventId?: string;
      status?: components["schemas"]["EventMemberStatus"];
      amountGained?: string | null;
      startConditions?: components["schemas"]["StartConditions"];
      lastUpdated?: string | null;
      disqualified?: boolean;
      notes?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    EventMemberStatus: 0 | 1 | 2 | 3;
    ExcludedTimespan: {
      /** Format: int64 */
      start?: number;
      /** Format: int64 */
      end?: number;
      reason?: string | null;
    };
    FarmingInventoryDto: {
      armor?: components["schemas"]["ItemDto"][];
      tools?: components["schemas"]["ItemDto"][];
      equipment?: components["schemas"]["ItemDto"][];
    };
    FarmingWeightAllProfilesDto: {
      selectedProfileId?: string | null;
      profiles?: components["schemas"]["FarmingWeightWithProfileDto"][];
    };
    FarmingWeightDto: {
      /** Format: double */
      totalWeight?: number;
      cropWeight?: {
        [key: string]: number;
      };
      bonusWeight?: {
        [key: string]: number;
      };
      inventory?: components["schemas"]["FarmingInventoryDto"];
    };
    FarmingWeightWithProfileDto: {
      profileId?: string;
      profileName?: string;
      /** Format: double */
      totalWeight?: number;
      cropWeight?: {
        [key: string]: number;
      };
      bonusWeight?: {
        [key: string]: number;
      };
    };
    FullDiscordGuild: {
      id?: string;
      name?: string;
      icon?: string | null;
      description?: string | null;
      splash?: string | null;
      discovery_splash?: string | null;
      features?: string[];
      banner?: string | null;
      owner_id?: string | null;
      /** Format: int32 */
      application_id?: number | null;
      region?: string | null;
      /** Format: int32 */
      verification_level?: number;
      roles?: components["schemas"]["DiscordRoleData"][];
      channels?: components["schemas"]["DiscordChannel"][];
      vanity_url_code?: string | null;
      /** Format: int32 */
      premium_tier?: number;
      /** Format: int32 */
      premium_subscription_count?: number;
      preferred_locale?: string | null;
      /** Format: int32 */
      approximate_member_count?: number;
    };
    GuildDetailsDto: {
      id?: string;
      name?: string;
      icon?: string | null;
      banner?: string | null;
      inviteCode?: string | null;
      /** Format: int32 */
      memberCount?: number;
    };
    GuildDto: {
      id?: string;
      name?: string;
      features?: components["schemas"]["GuildFeatures"];
      icon?: string | null;
      inviteCode?: string | null;
      banner?: string | null;
      description?: string | null;
      adminRole?: string | null;
      botPermissions?: string | null;
      botPermissionsNew?: string;
      discordFeatures?: string[];
      /** Format: int32 */
      memberCount?: number;
    };
    GuildEventSettings: {
      /** Format: int32 */
      maxMonthlyEvents?: number;
      publicEventsEnabled?: boolean;
      createdEvents?: components["schemas"]["EventCreatedDto"][];
    };
    GuildFeatures: {
      jacobLeaderboardEnabled?: boolean;
      jacobLeaderboard?: components["schemas"]["GuildJacobLeaderboardFeature"];
      verifiedRoleEnabled?: boolean;
      verifiedRole?: components["schemas"]["VerifiedRoleFeature"];
      eventsEnabled?: boolean;
      eventSettings?: components["schemas"]["GuildEventSettings"];
    };
    GuildJacobLeaderboard: {
      id?: string;
      channelId?: string | null;
      /** Format: int64 */
      startCutoff?: number;
      /** Format: int64 */
      endCutoff?: number;
      title?: string | null;
      active?: boolean;
      requiredRole?: string | null;
      blockedRole?: string | null;
      updateChannelId?: string | null;
      updateRoleId?: string | null;
      pingForSmallImprovements?: boolean;
      crops?: components["schemas"]["CropRecords"];
    };
    GuildJacobLeaderboardEntry: {
      uuid?: string;
      ign?: string;
      discordId?: string;
      record?: components["schemas"]["ContestParticipationDto"];
    };
    GuildJacobLeaderboardFeature: {
      /** Format: int32 */
      maxLeaderboards?: number;
      blockedRoles?: components["schemas"]["DiscordRole"][];
      blockedUsers?: number[];
      requiredRoles?: components["schemas"]["DiscordRole"][];
      excludedParticipations?: string[];
      excludedTimespans?: components["schemas"]["ExcludedTimespan"][];
      leaderboards?: components["schemas"]["GuildJacobLeaderboard"][];
    };
    IncomingAccountDto: {
      /** Format: int64 */
      id?: number;
      username?: string;
      displayName?: string | null;
      discriminator?: string | null;
      avatar?: string | null;
      locale?: string | null;
    };
    ItemDto: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      count?: number;
      skyblockId?: string | null;
      uuid?: string | null;
      name?: string | null;
      lore?: string[] | null;
      enchantments?: ({
        [key: string]: number | null;
      }) | null;
      attributes?: {
        [key: string]: string;
      } | null;
    };
    JacobContestDto: {
      crop?: string;
      /** Format: int64 */
      timestamp?: number;
      /** Format: int32 */
      participants?: number;
    };
    JacobContestWithParticipationsDto: {
      crop?: string;
      /** Format: int64 */
      timestamp?: number;
      /** Format: int32 */
      participants?: number;
      participations?: components["schemas"]["StrippedContestParticipationDto"][];
    };
    JacobDataDto: {
      medals?: components["schemas"]["MedalInventoryDto"];
      earnedMedals?: components["schemas"]["MedalInventoryDto"];
      perks?: components["schemas"]["JacobPerksDto"];
      /** Format: int32 */
      participations?: number;
      contests?: components["schemas"]["ContestParticipationDto"][];
    };
    JacobPerksDto: {
      /** Format: int32 */
      doubleDrops?: number;
      /** Format: int32 */
      levelCap?: number;
    };
    LeaderboardDto: {
      id?: string;
      title?: string;
      /** Format: int32 */
      limit?: number;
      /** Format: int32 */
      offset?: number;
      /** Format: int32 */
      maxEntries?: number;
      entries?: components["schemas"]["LeaderboardEntryDto"][];
    };
    LeaderboardEntryDto: {
      ign?: string | null;
      profile?: string | null;
      /** Format: double */
      amount?: number;
    };
    LeaderboardPositionDto: {
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      upcomingRank?: number;
      upcomingPlayers?: components["schemas"]["LeaderboardEntryDto"][] | null;
    };
    LeaderboardPositionsDto: {
      misc?: {
        [key: string]: number;
      };
      skills?: {
        [key: string]: number;
      };
      collections?: {
        [key: string]: number;
      };
    };
    LinkedAccountsDto: {
      selectedUuid?: string | null;
      players?: components["schemas"]["PlayerDataDto"][];
    };
    MedalInventoryDto: {
      /** Format: int32 */
      bronze?: number;
      /** Format: int32 */
      silver?: number;
      /** Format: int32 */
      gold?: number;
    };
    MemberDetailsDto: {
      uuid?: string;
      username?: string;
      active?: boolean;
      /** Format: double */
      farmingWeight?: number;
    };
    MinecraftAccountDetailsDto: {
      id?: string;
      name?: string;
      primaryAccount?: boolean;
      properties?: components["schemas"]["MinecraftAccountPropertyDto"][];
    };
    MinecraftAccountDto: {
      id?: string;
      name?: string;
      primaryAccount?: boolean;
      discordId?: string | null;
      discordUsername?: string | null;
      discordAvatar?: string | null;
      properties?: components["schemas"]["MinecraftAccountPropertyDto"][];
      eventEntries?: components["schemas"]["EventMemberDetailsDto"][];
      profiles?: components["schemas"]["ProfileDetailsDto"][];
      playerData?: components["schemas"]["PlayerDataDto"];
    };
    MinecraftAccountPropertyDto: {
      name?: string;
      value?: string;
    };
    PetDto: {
      uuid?: string | null;
      type?: string;
      /** Format: double */
      exp?: number;
      active?: boolean;
      tier?: string | null;
      heldItem?: string | null;
      /** Format: int32 */
      candyUsed?: number;
      skin?: string | null;
    };
    PlayerDataDto: {
      uuid?: string;
      displayname?: string | null;
      /** Format: int64 */
      firstLogin?: number;
      /** Format: int64 */
      lastLogin?: number;
      /** Format: int64 */
      lastLogout?: number;
      /** Format: int32 */
      karma?: number;
      /** Format: double */
      networkExp?: number;
      /** Format: int32 */
      rewardHighScore?: number;
      /** Format: int32 */
      rewardScore?: number;
      /** Format: int32 */
      rewardStreak?: number;
      /** Format: int32 */
      totalDailyRewards?: number;
      /** Format: int32 */
      totalRewards?: number;
      rank?: string | null;
      newPackageRank?: string | null;
      rankPlusColor?: string | null;
      monthlyPackageRank?: string | null;
      mostRecentMonthlyPackageRank?: string | null;
      monthlyRankColor?: string | null;
      socialMedia?: components["schemas"]["SocialMediaLinksDto"];
    };
    ProfileDetailsDto: {
      profileId?: string;
      profileName?: string;
      gameMode?: string;
      selected?: boolean;
      /** Format: double */
      bankBalance?: number;
      members?: components["schemas"]["MemberDetailsDto"][];
    };
    ProfileMemberDto: {
      profileId?: string;
      playerUuid?: string;
      api?: components["schemas"]["ApiAccessDto"];
      /** Format: int32 */
      skyblockXp?: number;
      /** Format: double */
      purse?: number;
      /** Format: double */
      bankBalance?: number;
      collections?: {
        [key: string]: number;
      };
      collectionTiers?: {
        [key: string]: number;
      };
      craftedMinions?: {
        [key: string]: number;
      };
      pets?: components["schemas"]["PetDto"][];
      unparsed?: components["schemas"]["UnparsedApiDataDto"];
      jacob?: components["schemas"]["JacobDataDto"];
      farmingWeight?: components["schemas"]["FarmingWeightDto"];
      skills?: components["schemas"]["SkillsDto"];
      isSelected?: boolean;
      wasRemoved?: boolean;
      /** Format: int64 */
      lastUpdated?: number;
    };
    PublicGuildDto: {
      id?: string;
      name?: string;
      icon?: string | null;
      banner?: string | null;
      inviteCode?: string | null;
      description?: string | null;
      /** Format: int32 */
      memberCount?: number;
      features?: components["schemas"]["PublicGuildFeaturesDto"];
    };
    PublicGuildFeaturesDto: {
      jacobLeaderboardEnabled?: boolean;
      jacobLeaderboard?: components["schemas"]["PublicJacobLeaderboardFeatureDto"];
      eventsEnabled?: boolean;
      eventSettings?: components["schemas"]["GuildEventSettings"];
    };
    PublicJacobLeaderboardDto: {
      id?: string;
      channelId?: string | null;
      /** Format: int64 */
      startCutoff?: number;
      /** Format: int64 */
      endCutoff?: number;
      title?: string | null;
      active?: boolean;
      requiredRole?: string | null;
      blockedRole?: string | null;
      updateChannelId?: string | null;
      updateRoleId?: string | null;
      pingForSmallImprovements?: boolean;
      crops?: components["schemas"]["CropRecords"];
    };
    PublicJacobLeaderboardFeatureDto: {
      /** Format: int32 */
      maxLeaderboards?: number;
      blockedRoles?: components["schemas"]["DiscordRole"][];
      requiredRoles?: components["schemas"]["DiscordRole"][];
      excludedTimespans?: components["schemas"]["ExcludedTimespan"][];
      leaderboards?: components["schemas"]["PublicJacobLeaderboardDto"][];
    };
    RedemptionDto: {
      itemId?: string;
      cost?: string;
      /** Format: date-time */
      timestamp?: string;
    };
    SkillsDataPointDto: {
      /** Format: int64 */
      timestamp?: number;
      skills?: {
        [key: string]: number;
      };
    };
    SkillsDto: {
      /** Format: double */
      farming?: number;
      /** Format: double */
      mining?: number;
      /** Format: double */
      combat?: number;
      /** Format: double */
      foraging?: number;
      /** Format: double */
      fishing?: number;
      /** Format: double */
      enchanting?: number;
      /** Format: double */
      alchemy?: number;
      /** Format: double */
      carpentry?: number;
      /** Format: double */
      runecrafting?: number;
      /** Format: double */
      taming?: number;
      /** Format: double */
      social?: number;
    };
    SocialMediaLinksDto: {
      discord?: string | null;
      hypixel?: string | null;
      youtube?: string | null;
    };
    StartConditions: {
      collection?: {
        [key: string]: number;
      };
      tools?: {
        [key: string]: number;
      };
    };
    StrippedContestParticipationDto: {
      /** Format: int32 */
      collected?: number;
      /** Format: int32 */
      position?: number;
      medal?: string | null;
      playerUuid?: string;
      playerName?: string;
    };
    TempStatBuff: {
      /** Format: int32 */
      stat?: number;
      key?: string | null;
      /** Format: int32 */
      amount?: number;
      /** Format: int64 */
      expire_at?: number;
    };
    UnparsedApiDataDto: {
      perks?: ({
        [key: string]: number | null;
      }) | null;
      tempStatBuffs?: components["schemas"]["TempStatBuff"][] | null;
      accessoryBagSettings?: Record<string, unknown> | null;
    };
    UserGuildDto: {
      id?: string;
      name?: string;
      icon?: string | null;
      hasBot?: boolean;
      permissions?: string;
    };
    VerifiedRoleFeature: {
      enabled?: boolean;
      autoRoles?: components["schemas"]["AutoRoles"][];
    };
    YearlyContestsDto: {
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      count?: number;
      complete?: boolean;
      contests?: {
        [key: string]: string[];
      };
    };
    YearlyCropRecordsDto: {
      /** Format: int32 */
      year?: number;
      crops?: {
        [key: string]: components["schemas"]["ContestParticipationWithTimestampDto"][];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
