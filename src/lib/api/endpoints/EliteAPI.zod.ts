/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elite API
 * A backend API for https://elitebot.dev/ that provides Hypixel Skyblock data.
<br><br>
Use of this API requires following the [Elite API TOS](https://elitebot.dev/apiterms). This API is not affiliated with Hypixel or Mojang.
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

/**
 * @summary Get Minecraft Account
 */
export const getAccountParams = zod.object({
	player: zod.string().describe('Player uuid or ign'),
});

export const getAccountResponseSettingsFeaturesEmbedColorMax = 6;
export const getAccountResponseSettingsFeaturesEmojiUrlMax = 256;
export const getAccountResponseSettingsWeightStyleNameMax = 64;
export const getAccountResponseSettingsLeaderboardStyleNameMax = 64;
export const getAccountResponseSettingsNameStyleNameMax = 64;
export const getAccountResponseProfilesItemMembersItemMetaPrefixMax = 16;
export const getAccountResponseProfilesItemMembersItemMetaSuffixMax = 16;
export const getAccountResponseBadgesItemImageTitleMax = 64;
export const getAccountResponseBadgesItemImageDescriptionMax = 512;

export const getAccountResponse = zod.object({
	id: zod.string(),
	name: zod.string(),
	formattedName: zod.string(),
	primaryAccount: zod.boolean(),
	discordId: zod.string().nullish(),
	discordUsername: zod.string().nullish(),
	discordAvatar: zod.string().nullish(),
	settings: zod.object({
		prefix: zod.string().nullish().describe('Custom name prefix'),
		suffix: zod.string().nullish().describe('Custom name suffix'),
		features: zod
			.object({
				weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
				weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
				embedColor: zod
					.string()
					.max(getAccountResponseSettingsFeaturesEmbedColorMax)
					.nullish()
					.describe('Embed color for the bot.'),
				moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
				hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
				emojiUrl: zod
					.string()
					.max(getAccountResponseSettingsFeaturesEmojiUrlMax)
					.nullish()
					.describe('Custom name emoji URL.'),
			})
			.nullish()
			.describe('Configurated features for the user'),
		weightStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountResponseSettingsWeightStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected weight style for the user'),
		leaderboardStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountResponseSettingsLeaderboardStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected leaderboard style for the user'),
		nameStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountResponseSettingsNameStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected name style for the user'),
		fortune: zod
			.object({
				accounts: zod
					.record(
						zod.string(),
						zod.record(
							zod.string(),
							zod.object({
								strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
								communityCenter: zod.number().describe('Community center farming fortune level'),
								attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
								exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
							})
						)
					)
					.describe('Member fortune settings for each minecraft account, then each profile.'),
			})
			.nullish()
			.describe('Fortune settings for the user'),
	}),
	skin: zod.object({
		texture: zod.string().nullish().describe('Minecraft skin texture ID'),
		face: zod.string().nullish().describe('Base64 data image of the 8x8 face'),
		hat: zod.string().nullish().describe('Base64 data image of the 8x8 hat (overlay on the face)'),
	}),
	profiles: zod.array(
		zod.object({
			profileId: zod.string(),
			profileName: zod.string(),
			gameMode: zod.string(),
			selected: zod.boolean(),
			bankBalance: zod.number(),
			deleted: zod.boolean(),
			members: zod.array(
				zod.object({
					uuid: zod.string(),
					username: zod.string(),
					profileName: zod.string().nullish(),
					active: zod.boolean(),
					farmingWeight: zod.number(),
					meta: zod
						.object({
							prefix: zod.string().max(getAccountResponseProfilesItemMembersItemMetaPrefixMax).nullish(),
							suffix: zod.string().max(getAccountResponseProfilesItemMembersItemMetaSuffixMax).nullish(),
							leaderboard: zod
								.object({
									styleId: zod.number().nullish(),
									backgroundColor: zod.string().nullish(),
									borderColor: zod.string().nullish(),
									textColor: zod.string().nullish(),
									rankColor: zod.string().nullish(),
									backgroundImage: zod.string().nullish(),
									overlayImage: zod.string().nullish(),
								})
								.nullish(),
						})
						.nullish(),
				})
			),
		})
	),
	badges: zod.array(
		zod.object({
			id: zod.number(),
			image: zod.object({
				title: zod.string().max(getAccountResponseBadgesItemImageTitleMax).nullish().describe('Image title'),
				description: zod
					.string()
					.max(getAccountResponseBadgesItemImageDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			}),
			name: zod.string(),
			description: zod.string(),
			requirements: zod.string(),
			timestamp: zod.string(),
			visible: zod.boolean(),
			order: zod.number(),
		})
	),
	playerData: zod
		.object({
			uuid: zod.string(),
			displayname: zod.string().nullish(),
			firstLogin: zod.number(),
			lastLogin: zod.number(),
			lastLogout: zod.number(),
			karma: zod.number(),
			networkExp: zod.number(),
			rewardHighScore: zod.number(),
			rewardScore: zod.number(),
			rewardStreak: zod.number(),
			totalDailyRewards: zod.number(),
			totalRewards: zod.number(),
			prefix: zod.string().nullish(),
			rank: zod.string().nullish(),
			newPackageRank: zod.string().nullish(),
			rankPlusColor: zod.string().nullish(),
			monthlyPackageRank: zod.string().nullish(),
			mostRecentMonthlyPackageRank: zod.string().nullish(),
			monthlyRankColor: zod.string().nullish(),
			socialMedia: zod
				.object({
					discord: zod.string().nullish(),
					hypixel: zod.string().nullish(),
					youtube: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish(),
});

/**
 * @summary Link Account
 */
export const linkOwnAccountParams = zod.object({
	player: zod.string(),
});

/**
 * @summary Unlink Account
 */
export const unlinkOwnAccountParams = zod.object({
	player: zod.string(),
});

/**
 * Returns an 8x8 or 72x72 face png image of the Minecraft account associated with the provided player name or UUID. 72x72 response includes the player's "hat" overlay. If not found, returns Steve's face.
 * @summary Get Minecraft Account Face Image
 */
export const getAccountFace1Params = zod.object({
	player: zod.string(),
});

/**
 * Returns an 8x8 or 72x72 face png image of the Minecraft account associated with the provided player name or UUID. 72x72 response includes the player's "hat" overlay. If not found, returns Steve's face.
 * @summary Get Minecraft Account Face Image
 */
export const getAccountFace2Params = zod.object({
	player: zod.string(),
});

/**
 * @summary Get Minecraft Account from Discord Id
 */
export const getAccountFromDiscordParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const getAccountFromDiscordResponseSettingsFeaturesEmbedColorMax = 6;
export const getAccountFromDiscordResponseSettingsFeaturesEmojiUrlMax = 256;
export const getAccountFromDiscordResponseSettingsWeightStyleNameMax = 64;
export const getAccountFromDiscordResponseSettingsLeaderboardStyleNameMax = 64;
export const getAccountFromDiscordResponseSettingsNameStyleNameMax = 64;
export const getAccountFromDiscordResponseProfilesItemMembersItemMetaPrefixMax = 16;
export const getAccountFromDiscordResponseProfilesItemMembersItemMetaSuffixMax = 16;
export const getAccountFromDiscordResponseBadgesItemImageTitleMax = 64;
export const getAccountFromDiscordResponseBadgesItemImageDescriptionMax = 512;

export const getAccountFromDiscordResponse = zod.object({
	id: zod.string(),
	name: zod.string(),
	formattedName: zod.string(),
	primaryAccount: zod.boolean(),
	discordId: zod.string().nullish(),
	discordUsername: zod.string().nullish(),
	discordAvatar: zod.string().nullish(),
	settings: zod.object({
		prefix: zod.string().nullish().describe('Custom name prefix'),
		suffix: zod.string().nullish().describe('Custom name suffix'),
		features: zod
			.object({
				weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
				weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
				embedColor: zod
					.string()
					.max(getAccountFromDiscordResponseSettingsFeaturesEmbedColorMax)
					.nullish()
					.describe('Embed color for the bot.'),
				moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
				hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
				emojiUrl: zod
					.string()
					.max(getAccountFromDiscordResponseSettingsFeaturesEmojiUrlMax)
					.nullish()
					.describe('Custom name emoji URL.'),
			})
			.nullish()
			.describe('Configurated features for the user'),
		weightStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountFromDiscordResponseSettingsWeightStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected weight style for the user'),
		leaderboardStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountFromDiscordResponseSettingsLeaderboardStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected leaderboard style for the user'),
		nameStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAccountFromDiscordResponseSettingsNameStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected name style for the user'),
		fortune: zod
			.object({
				accounts: zod
					.record(
						zod.string(),
						zod.record(
							zod.string(),
							zod.object({
								strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
								communityCenter: zod.number().describe('Community center farming fortune level'),
								attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
								exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
							})
						)
					)
					.describe('Member fortune settings for each minecraft account, then each profile.'),
			})
			.nullish()
			.describe('Fortune settings for the user'),
	}),
	skin: zod.object({
		texture: zod.string().nullish().describe('Minecraft skin texture ID'),
		face: zod.string().nullish().describe('Base64 data image of the 8x8 face'),
		hat: zod.string().nullish().describe('Base64 data image of the 8x8 hat (overlay on the face)'),
	}),
	profiles: zod.array(
		zod.object({
			profileId: zod.string(),
			profileName: zod.string(),
			gameMode: zod.string(),
			selected: zod.boolean(),
			bankBalance: zod.number(),
			deleted: zod.boolean(),
			members: zod.array(
				zod.object({
					uuid: zod.string(),
					username: zod.string(),
					profileName: zod.string().nullish(),
					active: zod.boolean(),
					farmingWeight: zod.number(),
					meta: zod
						.object({
							prefix: zod
								.string()
								.max(getAccountFromDiscordResponseProfilesItemMembersItemMetaPrefixMax)
								.nullish(),
							suffix: zod
								.string()
								.max(getAccountFromDiscordResponseProfilesItemMembersItemMetaSuffixMax)
								.nullish(),
							leaderboard: zod
								.object({
									styleId: zod.number().nullish(),
									backgroundColor: zod.string().nullish(),
									borderColor: zod.string().nullish(),
									textColor: zod.string().nullish(),
									rankColor: zod.string().nullish(),
									backgroundImage: zod.string().nullish(),
									overlayImage: zod.string().nullish(),
								})
								.nullish(),
						})
						.nullish(),
				})
			),
		})
	),
	badges: zod.array(
		zod.object({
			id: zod.number(),
			image: zod.object({
				title: zod
					.string()
					.max(getAccountFromDiscordResponseBadgesItemImageTitleMax)
					.nullish()
					.describe('Image title'),
				description: zod
					.string()
					.max(getAccountFromDiscordResponseBadgesItemImageDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			}),
			name: zod.string(),
			description: zod.string(),
			requirements: zod.string(),
			timestamp: zod.string(),
			visible: zod.boolean(),
			order: zod.number(),
		})
	),
	playerData: zod
		.object({
			uuid: zod.string(),
			displayname: zod.string().nullish(),
			firstLogin: zod.number(),
			lastLogin: zod.number(),
			lastLogout: zod.number(),
			karma: zod.number(),
			networkExp: zod.number(),
			rewardHighScore: zod.number(),
			rewardScore: zod.number(),
			rewardStreak: zod.number(),
			totalDailyRewards: zod.number(),
			totalRewards: zod.number(),
			prefix: zod.string().nullish(),
			rank: zod.string().nullish(),
			newPackageRank: zod.string().nullish(),
			rankPlusColor: zod.string().nullish(),
			monthlyPackageRank: zod.string().nullish(),
			mostRecentMonthlyPackageRank: zod.string().nullish(),
			monthlyRankColor: zod.string().nullish(),
			socialMedia: zod
				.object({
					discord: zod.string().nullish(),
					hypixel: zod.string().nullish(),
					youtube: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish(),
});

/**
 * @summary Get Account Settings
 */
export const getAccountSettingsParams = zod.object({
	discordId: zod.number(),
});

export const getAccountSettingsResponseFeaturesEmbedColorMax = 6;
export const getAccountSettingsResponseFeaturesEmojiUrlMax = 256;
export const getAccountSettingsResponseWeightStyleNameMax = 64;
export const getAccountSettingsResponseLeaderboardStyleNameMax = 64;
export const getAccountSettingsResponseNameStyleNameMax = 64;

export const getAccountSettingsResponse = zod.object({
	prefix: zod.string().nullish().describe('Custom name prefix'),
	suffix: zod.string().nullish().describe('Custom name suffix'),
	features: zod
		.object({
			weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColor: zod
				.string()
				.max(getAccountSettingsResponseFeaturesEmbedColorMax)
				.nullish()
				.describe('Embed color for the bot.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
			emojiUrl: zod
				.string()
				.max(getAccountSettingsResponseFeaturesEmojiUrlMax)
				.nullish()
				.describe('Custom name emoji URL.'),
		})
		.nullish()
		.describe('Configurated features for the user'),
	weightStyle: zod
		.object({
			id: zod.number(),
			name: zod.string().max(getAccountSettingsResponseWeightStyleNameMax).nullish(),
		})
		.nullish()
		.describe('Selected weight style for the user'),
	leaderboardStyle: zod
		.object({
			id: zod.number(),
			name: zod.string().max(getAccountSettingsResponseLeaderboardStyleNameMax).nullish(),
		})
		.nullish()
		.describe('Selected leaderboard style for the user'),
	nameStyle: zod
		.object({
			id: zod.number(),
			name: zod.string().max(getAccountSettingsResponseNameStyleNameMax).nullish(),
		})
		.nullish()
		.describe('Selected name style for the user'),
	fortune: zod
		.object({
			accounts: zod
				.record(
					zod.string(),
					zod.record(
						zod.string(),
						zod.object({
							strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
							communityCenter: zod.number().describe('Community center farming fortune level'),
							attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
							exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
						})
					)
				)
				.describe('Member fortune settings for each minecraft account, then each profile.'),
		})
		.nullish()
		.describe('Fortune settings for the user'),
});

/**
 * @summary Get Logged-In Account
 */
export const getAuthAccountResponseSettingsFeaturesEmbedColorMax = 6;
export const getAuthAccountResponseSettingsFeaturesEmojiUrlMax = 256;
export const getAuthAccountResponseSettingsWeightStyleNameMax = 64;
export const getAuthAccountResponseSettingsLeaderboardStyleNameMax = 64;
export const getAuthAccountResponseSettingsNameStyleNameMax = 64;
export const getAuthAccountResponseEntitlementsItemProductWeightStylesItemNameMax = 64;
export const getAuthAccountResponseEntitlementsItemProductThumbnailTitleMax = 64;
export const getAuthAccountResponseEntitlementsItemProductThumbnailDescriptionMax = 512;
export const getAuthAccountResponseEntitlementsItemProductImagesItemTitleMax = 64;
export const getAuthAccountResponseEntitlementsItemProductImagesItemDescriptionMax = 512;
export const getAuthAccountResponseMinecraftAccountsItemBadgesItemImageTitleMax = 64;
export const getAuthAccountResponseMinecraftAccountsItemBadgesItemImageDescriptionMax = 512;

export const getAuthAccountResponse = zod.object({
	id: zod.string().describe('Discord user ID'),
	displayName: zod.string().describe('Discord display name'),
	username: zod.string().describe('Discord username (unique)'),
	discriminator: zod.string().nullish(),
	locale: zod.string().nullish().describe('Discord user locale'),
	avatar: zod.string().nullish().describe('Discord avatar URL hash'),
	banner: zod.string().nullish().describe('Discord banner URL hash'),
	settings: zod.object({
		prefix: zod.string().nullish().describe('Custom name prefix'),
		suffix: zod.string().nullish().describe('Custom name suffix'),
		features: zod
			.object({
				weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
				weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
				embedColor: zod
					.string()
					.max(getAuthAccountResponseSettingsFeaturesEmbedColorMax)
					.nullish()
					.describe('Embed color for the bot.'),
				moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
				hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
				emojiUrl: zod
					.string()
					.max(getAuthAccountResponseSettingsFeaturesEmojiUrlMax)
					.nullish()
					.describe('Custom name emoji URL.'),
			})
			.nullish()
			.describe('Configurated features for the user'),
		weightStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAuthAccountResponseSettingsWeightStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected weight style for the user'),
		leaderboardStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAuthAccountResponseSettingsLeaderboardStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected leaderboard style for the user'),
		nameStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(getAuthAccountResponseSettingsNameStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected name style for the user'),
		fortune: zod
			.object({
				accounts: zod
					.record(
						zod.string(),
						zod.record(
							zod.string(),
							zod.object({
								strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
								communityCenter: zod.number().describe('Community center farming fortune level'),
								attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
								exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
							})
						)
					)
					.describe('Member fortune settings for each minecraft account, then each profile.'),
			})
			.nullish()
			.describe('Fortune settings for the user'),
	}),
	entitlements: zod
		.array(
			zod.object({
				id: zod.string().describe('Entitlement ID'),
				type: zod
					.union([
						zod.literal(1),
						zod.literal(2),
						zod.literal(3),
						zod.literal(4),
						zod.literal(5),
						zod.literal(6),
						zod.literal(7),
						zod.literal(8),
					])
					.describe('Type of entitlement'),
				target: zod
					.union([zod.literal(0), zod.literal(1), zod.literal(2)])
					.describe('Target of entitlement.\n0 = None\n1 = User\n2 = Guild'),
				productId: zod.string().describe('SKU ID of the product'),
				product: zod
					.object({
						id: zod.string().describe('Product ID'),
						name: zod.string().describe('Product name'),
						slug: zod.string().describe('Slug of the product'),
						price: zod.number().describe('Product price'),
						description: zod.string().nullish().describe('Product description'),
						available: zod.boolean().describe('If the product is available for purchase'),
						type: zod
							.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
							.describe('Type of product'),
						features: zod
							.object({
								badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
								weightStyles: zod
									.array(zod.string())
									.nullish()
									.describe('Name of weight style to unlock.'),
								weightStyleOverride: zod
									.boolean()
									.nullish()
									.describe("Ability to override other's weight styles."),
								embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
								hideShopPromotions: zod
									.boolean()
									.nullish()
									.describe('Ability to hide shop promotions.'),
								moreInfoDefault: zod
									.boolean()
									.nullish()
									.describe('Show \"More Info\" on weight command by default.'),
								customEmoji: zod
									.boolean()
									.nullish()
									.describe('Ability to have custom name emoji for the user.'),
								maxMonthlyEvents: zod
									.number()
									.nullish()
									.describe('Maximum number of events that can be created in a month. (For guilds)'),
								maxJacobLeaderboards: zod
									.number()
									.nullish()
									.describe(
										'Maximum number of jacob leaderboard that can be active at once. (For guilds)'
									),
							})
							.describe('Features of the product'),
						weightStyles: zod
							.array(
								zod.object({
									id: zod.number(),
									name: zod
										.string()
										.max(getAuthAccountResponseEntitlementsItemProductWeightStylesItemNameMax)
										.nullish(),
								})
							)
							.describe('Unlocked weight styles'),
						thumbnail: zod
							.object({
								title: zod
									.string()
									.max(getAuthAccountResponseEntitlementsItemProductThumbnailTitleMax)
									.nullish()
									.describe('Image title'),
								description: zod
									.string()
									.max(getAuthAccountResponseEntitlementsItemProductThumbnailDescriptionMax)
									.nullish()
									.describe('Image description'),
								order: zod.number().nullish().describe('Image ordering number'),
								url: zod.string().describe('Full image URL'),
							})
							.nullish()
							.describe('Product thumbnail'),
						images: zod
							.array(
								zod.object({
									title: zod
										.string()
										.max(getAuthAccountResponseEntitlementsItemProductImagesItemTitleMax)
										.nullish()
										.describe('Image title'),
									description: zod
										.string()
										.max(getAuthAccountResponseEntitlementsItemProductImagesItemDescriptionMax)
										.nullish()
										.describe('Image description'),
									order: zod.number().nullish().describe('Image ordering number'),
									url: zod.string().describe('Full image URL'),
								})
							)
							.describe('Product Images'),
						flags: zod.number().describe('Discord flags'),
						isSubscription: zod.boolean(),
						isGuildSubscription: zod.boolean(),
						isUserSubscription: zod.boolean(),
					})
					.describe('Product details'),
				deleted: zod.boolean(),
				consumed: zod.boolean().nullish().describe('Consumed status of the entitlement if applicable'),
				startDate: zod.string().datetime({}).nullish().describe('Start date of the entitlement'),
				endDate: zod.string().datetime({}).nullish().describe('End date of the entitlement'),
			})
		)
		.describe('Purchased entitlements from the Discord store'),
	minecraftAccounts: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				primaryAccount: zod.boolean(),
				badges: zod.array(
					zod.object({
						id: zod.number(),
						image: zod.object({
							title: zod
								.string()
								.max(getAuthAccountResponseMinecraftAccountsItemBadgesItemImageTitleMax)
								.nullish()
								.describe('Image title'),
							description: zod
								.string()
								.max(getAuthAccountResponseMinecraftAccountsItemBadgesItemImageDescriptionMax)
								.nullish()
								.describe('Image description'),
							order: zod.number().nullish().describe('Image ordering number'),
							url: zod.string().describe('Full image URL'),
						}),
						name: zod.string(),
						description: zod.string(),
						requirements: zod.string(),
						timestamp: zod.string(),
						visible: zod.boolean(),
						order: zod.number(),
					})
				),
				skin: zod.object({
					texture: zod.string().nullish().describe('Minecraft skin texture ID'),
					face: zod.string().nullish().describe('Base64 data image of the 8x8 face'),
					hat: zod.string().nullish().describe('Base64 data image of the 8x8 hat (overlay on the face)'),
				}),
			})
		)
		.describe('Linked Minecraft accounts'),
	dismissedAnnouncements: zod.array(zod.string()).describe('Dismissed announcements by the user'),
});

/**
 * @summary Search for Minecraft Account
 */
export const searchAccountsQueryParams = zod.object({
	q: zod.string().describe('Search query string'),
	start: zod.string().nullish().describe('Start of results for pagination'),
});

export const searchAccountsResponseItem = zod.string();
export const searchAccountsResponse = zod.array(searchAccountsResponseItem);

/**
 * @summary Set Primary Account
 */
export const setPrimaryAccountParams = zod.object({
	player: zod.string(),
});

/**
 * @summary Update Account Settings
 */
export const updateBadgesParams = zod.object({
	playerUuid: zod.string(),
});

export const updateBadgesBodyItem = zod.object({
	badgeId: zod.number(),
	visible: zod.boolean().nullish(),
	order: zod.number().nullish(),
});
export const updateBadgesBody = zod.array(updateBadgesBodyItem);

/**
 * @summary Update Fortune Settings for Account
 */
export const updateFortuneSettingsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const updateFortuneSettingsBody = zod.object({
	strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
	communityCenter: zod.number().describe('Community center farming fortune level'),
	attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
	exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
});

/**
 * @summary Update Account Settings
 */
export const updateAccountBodyFeaturesEmbedColorMax = 6;
export const updateAccountBodyFeaturesEmojiUrlMax = 256;

export const updateAccountBody = zod.object({
	prefix: zod.string().nullish().describe('Custom name prefix'),
	suffix: zod.string().nullish().describe('Custom name suffix'),
	features: zod
		.object({
			weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColor: zod
				.string()
				.max(updateAccountBodyFeaturesEmbedColorMax)
				.nullish()
				.describe('Embed color for the bot.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
			emojiUrl: zod
				.string()
				.max(updateAccountBodyFeaturesEmojiUrlMax)
				.nullish()
				.describe('Custom name emoji URL.'),
		})
		.nullish()
		.describe('Configurated features for the user'),
	weightStyleId: zod.number().nullish().describe('Selected weight style for the user'),
	leaderboardStyleId: zod.number().nullish().describe('Selected leaderboard style for the user'),
	nameStyleId: zod.number().nullish().describe('Selected name style for the user'),
});

/**
 * @summary Add a role to a user
 */
export const addRoleToUserParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	role: zod.string(),
});

/**
 * @summary Remove a role from a user
 */
export const removeRoleFromUserParams = zod.object({
	discordId: zod.number(),
	role: zod.string(),
});

/**
 * This enables a player's data from Hypixel to be refreshed on the next request.
 * @summary Reset a player's cooldowns
 */
export const clearPlayerCooldownsParams = zod.object({
	player: zod.string(),
});

/**
 * @summary Delete Event
 */
export const deleteEventApprovalParams = zod.object({
	eventId: zod.number(),
});

/**
 * @summary Get events pending approval
 */
export const getPendingEventsResponseBannerTitleMax = 64;
export const getPendingEventsResponseBannerDescriptionMax = 512;

export const getPendingEventsResponseItem = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getPendingEventsResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPendingEventsResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});
export const getPendingEventsResponse = zod.array(getPendingEventsResponseItem);

/**
 * @summary Set event approval
 */
export const setEventApprovalParams = zod.object({
	eventId: zod.number(),
});

export const setEventApprovalQueryApproveDefault = false;

export const setEventApprovalQueryParams = zod.object({
	approve: zod.boolean().nullish(),
});

/**
 * @summary Get list of admins
 */
export const getAdminsResponseItem = zod.object({
	id: zod.string(),
	displayName: zod.string(),
	username: zod.string(),
	roles: zod.array(zod.string()),
	discriminator: zod.string().nullish(),
	avatar: zod.string().nullish(),
});
export const getAdminsResponse = zod.array(getAdminsResponseItem);

/**
 * @summary Get list of roles
 */
export const getRolesResponseItem = zod.string();
export const getRolesResponse = zod.array(getRolesResponseItem);

/**
 * @summary Link an Account
 */
export const linkUserAccountBody = zod.object({
	discordId: zod.string(),
	player: zod.string(),
});

/**
 * This fetches the latest data from Discord for the specified guild
 * @summary Refresh a guild
 */
export const refreshDiscordGuildParams = zod.object({
	guildId: zod.number(),
});

/**
 * @summary Unlink an Account
 */
export const unlinkUserAccountBody = zod.object({
	discordId: zod.string(),
	player: zod.string(),
});

/**
 * Mark an announcement as dismissed for the current user
 * @summary Dismiss an announcement
 */
export const dismissAnnouncementParams = zod.object({
	announcementId: zod.string(),
});

/**
 * Gets all announcements that should be shown to users
 * @summary Get announcements
 */
export const getAnnouncementResponseItem = zod.object({
	title: zod.string().describe('Announcement title'),
	content: zod.string().describe('Announcement content'),
	type: zod
		.enum(['other', 'update', 'article', 'news', 'event', 'maintenance', 'shop'])
		.describe('Type of the announcement'),
	targetLabel: zod
		.string()
		.nullish()
		.describe('Label for the target of the announcement (e.g. \"Read more\", \"View article\")'),
	targetUrl: zod.string().nullish().describe('Url to read more about the announcement'),
	targetStartsAt: zod
		.string()
		.datetime({})
		.nullish()
		.describe('Optional time stamp for when the topic of the announcement starts'),
	targetEndsAt: zod
		.string()
		.datetime({})
		.nullish()
		.describe('Optional time stamp for when the topic of the announcement ends'),
	createdAt: zod.string().datetime({}).describe('Announcement creation date'),
	expiresAt: zod
		.string()
		.datetime({})
		.describe('Announcement expiration date (will no longer be shown after this date)'),
	id: zod.string().describe('Announcement id'),
});
export const getAnnouncementResponse = zod.array(getAnnouncementResponseItem);

/**
 * Get the account of the currently logged in user
 * @summary Get logged in account
 */
export const getSessionResponse = zod.object({
	id: zod.string().describe('Discord user ID'),
	username: zod.string().describe('Discord username'),
	avatar: zod.string().describe('Discord avatar hash'),
	ign: zod.string().describe('Primary Minecraft IGN'),
	fIgn: zod.string().nullish().describe('Formatted Primary Minecraft IGN'),
	uuid: zod.string().describe('Primary Minecraft UUID'),
	roles: zod.array(zod.string()).describe('List of user roles'),
});

/**
 * Log in with discord credentials
 * @summary Log in
 */
export const loginBody = zod.object({
	code: zod.string().describe('Discord login code from OAuth2'),
	redirect_uri: zod.string().describe('Redirect URI from OAuth2'),
});

export const loginResponse = zod.object({
	access_token: zod.string().describe('Access token for the user'),
	expires_in: zod.string().nullish().describe('Expiry date of the access token in Unix timestamp seconds'),
	refresh_token: zod.string().describe('Refresh token for the user'),
});

/**
 * Refresh the auth token using the refresh token
 * @summary Refresh Auth Token
 */
export const refreshAuthBody = zod.object({
	user_id: zod.string().describe('User ID'),
	refresh_token: zod.string().describe('Refresh token for the user'),
});

export const refreshAuthResponse = zod.object({
	access_token: zod.string().describe('Access token for the user'),
	expires_in: zod.string().nullish().describe('Expiry date of the access token in Unix timestamp seconds'),
	refresh_token: zod.string().describe('Refresh token for the user'),
});

/**
 * @summary Add a badge to a user
 */
export const addBadgeToUserBadgeParams = zod.object({
	player: zod.string().describe('Player uuid or ign'),
	badgeId: zod.number().describe('ID of the badge'),
});

/**
 * @summary Remove a badge from a user
 */
export const deleteBadgeFromUserBadgeParams = zod.object({
	player: zod.string(),
	badgeId: zod.number(),
});

/**
 * @summary Create a badge
 */
export const createBadgeBodyNameMin = 0;

export const createBadgeBodyNameMax = 50;
export const createBadgeBodyDescriptionMin = 0;

export const createBadgeBodyDescriptionMax = 1024;
export const createBadgeBodyRequirementsMin = 0;

export const createBadgeBodyRequirementsMax = 512;

export const createBadgeBody = zod.object({
	name: zod.string().min(createBadgeBodyNameMin).max(createBadgeBodyNameMax),
	description: zod.string().min(createBadgeBodyDescriptionMin).max(createBadgeBodyDescriptionMax),
	requirements: zod.string().min(createBadgeBodyRequirementsMin).max(createBadgeBodyRequirementsMax),
	tieToAccount: zod.boolean(),
	image: zod.instanceof(File).nullish(),
});

/**
 * @summary Get all badges
 */
export const getBadgesResponseImageTitleMax = 64;
export const getBadgesResponseImageDescriptionMax = 512;

export const getBadgesResponseItem = zod.object({
	id: zod.number(),
	image: zod
		.object({
			title: zod.string().max(getBadgesResponseImageTitleMax).nullish().describe('Image title'),
			description: zod.string().max(getBadgesResponseImageDescriptionMax).nullish().describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	name: zod.string(),
	description: zod.string(),
	requirements: zod.string(),
});
export const getBadgesResponse = zod.array(getBadgesResponseItem);

/**
 * @summary Delete a badge
 */
export const deleteBadgeParams = zod.object({
	badgeId: zod.number().describe('ID of the badge'),
});

/**
 * @summary Update a badge
 */
export const updateBadgeParams = zod.object({
	badgeId: zod.number().describe('ID of the badge'),
});

export const updateBadgeBodyNameMin = 0;

export const updateBadgeBodyNameMax = 50;
export const updateBadgeBodyDescriptionMin = 0;

export const updateBadgeBodyDescriptionMax = 1024;
export const updateBadgeBodyRequirementsMin = 0;

export const updateBadgeBodyRequirementsMax = 512;

export const updateBadgeBody = zod.object({
	name: zod.string().min(updateBadgeBodyNameMin).max(updateBadgeBodyNameMax).nullish(),
	description: zod.string().min(updateBadgeBodyDescriptionMin).max(updateBadgeBodyDescriptionMax).nullish(),
	requirements: zod.string().min(updateBadgeBodyRequirementsMin).max(updateBadgeBodyRequirementsMax).nullish(),
	image: zod.instanceof(File).nullish(),
});

/**
 * @summary Link Account
 */
export const linkAccountBotParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	player: zod.string().describe('Player uuid or ign'),
});

/**
 * @summary Unlink Account
 */
export const unlinkAccountBotParams = zod.object({
	discordId: zod.number(),
	player: zod.string(),
});

/**
 * @summary Make Primary Account
 */
export const makePrimaryAccountParams = zod.object({
	discordId: zod.number(),
	player: zod.string(),
});

/**
 * @summary Refresh User Purchases
 */
export const refreshUserPurchasesParams = zod.object({
	discordId: zod.number(),
});

/**
 * @summary Grant Badge
 */
export const grantBadgeParams = zod.object({
	player: zod.string().describe('Player uuid or ign'),
	badgeId: zod.number(),
});

/**
 * @summary Remove Badge
 */
export const removeBadgeParams = zod.object({
	player: zod.string().describe('Player uuid or ign'),
	badgeId: zod.number(),
});

/**
 * @summary Disable contest pings for a guild
 */
export const disableContestPingsPingsParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const disableContestPingsPingsQueryParams = zod.object({
	reason: zod.string().nullish(),
});

/**
 * @summary Get list of guilds with contest pings enabled
 */
export const getContestPingsResponseItem = zod.object({
	enabled: zod.boolean(),
	guildId: zod.string().nullish(),
	channelId: zod.string().nullish(),
	alwaysPingRole: zod.string().nullish(),
	cropPingRoles: zod
		.object({
			cactus: zod.string().nullish(),
			carrot: zod.string().nullish(),
			potato: zod.string().nullish(),
			wheat: zod.string().nullish(),
			melon: zod.string().nullish(),
			pumpkin: zod.string().nullish(),
			mushroom: zod.string().nullish(),
			cocoaBeans: zod.string().nullish(),
			sugarCane: zod.string().nullish(),
			netherWart: zod.string().nullish(),
		})
		.nullish(),
	delaySeconds: zod.number(),
	disabledReason: zod.string().nullish(),
});
export const getContestPingsResponse = zod.array(getContestPingsResponseItem);

/**
 * @summary Get guild
 */
export const getBotGuildParams = zod.object({
	discordId: zod.number(),
});

export const getBotGuildResponseFeaturesJacobLeaderboardLeaderboardsItemTitleMax = 64;
export const getBotGuildResponseIconTitleMax = 64;
export const getBotGuildResponseIconDescriptionMax = 512;
export const getBotGuildResponseBannerTitleMax = 64;
export const getBotGuildResponseBannerDescriptionMax = 512;

export const getBotGuildResponse = zod.object({
	id: zod.string(),
	name: zod.string(),
	public: zod.boolean(),
	features: zod.object({
		locked: zod.boolean(),
		jacobLeaderboardEnabled: zod.boolean(),
		jacobLeaderboard: zod
			.object({
				maxLeaderboards: zod.number(),
				blockedRoles: zod.array(
					zod.object({
						id: zod.string(),
						name: zod.string(),
						position: zod.number(),
						permissions: zod.number(),
					})
				),
				blockedUsers: zod.array(zod.number()),
				requiredRoles: zod.array(
					zod.object({
						id: zod.string(),
						name: zod.string(),
						position: zod.number(),
						permissions: zod.number(),
					})
				),
				excludedParticipations: zod.array(zod.string()),
				excludedTimespans: zod.array(
					zod.object({
						start: zod.number(),
						end: zod.number(),
						reason: zod.string().nullish(),
					})
				),
				leaderboards: zod.array(
					zod.object({
						id: zod.string(),
						channelId: zod.string().nullish(),
						startCutoff: zod.number(),
						endCutoff: zod.number(),
						title: zod
							.string()
							.max(getBotGuildResponseFeaturesJacobLeaderboardLeaderboardsItemTitleMax)
							.nullish(),
						active: zod.boolean(),
						requiredRole: zod.string().nullish(),
						blockedRole: zod.string().nullish(),
						updateChannelId: zod.string().nullish(),
						updateRoleId: zod.string().nullish(),
						pingForSmallImprovements: zod.boolean(),
						crops: zod.object({
							cactus: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							carrot: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							potato: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							wheat: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							melon: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							pumpkin: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							mushroom: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							cocoaBeans: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							sugarCane: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							netherWart: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
						}),
					})
				),
			})
			.nullish(),
		verifiedRoleEnabled: zod.boolean(),
		verifiedRole: zod
			.object({
				enabled: zod.boolean(),
				autoRoles: zod.array(
					zod.object({
						roleId: zod.string().nullish(),
						requiredWeight: zod.number(),
					})
				),
			})
			.nullish(),
		eventsEnabled: zod.boolean(),
		eventSettings: zod
			.object({
				maxMonthlyEvents: zod.number(),
				publicEventsEnabled: zod.boolean(),
				createdEvents: zod.array(
					zod.object({
						id: zod.string(),
						createdAt: zod.string().datetime({}),
					})
				),
			})
			.nullish(),
		contestPingsEnabled: zod.boolean(),
		contestPings: zod
			.object({
				enabled: zod.boolean(),
				channelId: zod.string().nullish(),
				alwaysPingRole: zod.string().nullish(),
				cropPingRoles: zod
					.object({
						cactus: zod.string().nullish(),
						carrot: zod.string().nullish(),
						potato: zod.string().nullish(),
						wheat: zod.string().nullish(),
						melon: zod.string().nullish(),
						pumpkin: zod.string().nullish(),
						mushroom: zod.string().nullish(),
						cocoaBeans: zod.string().nullish(),
						sugarCane: zod.string().nullish(),
						netherWart: zod.string().nullish(),
					})
					.nullish(),
				delaySeconds: zod.number(),
				disabledReason: zod.string().nullish(),
			})
			.nullish(),
	}),
	icon: zod
		.object({
			title: zod.string().max(getBotGuildResponseIconTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getBotGuildResponseIconDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	banner: zod
		.object({
			title: zod.string().max(getBotGuildResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getBotGuildResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	inviteCode: zod.string().nullish(),
	description: zod.string().nullish(),
	adminRole: zod.string().nullish(),
	botPermissions: zod.string().nullish(),
	botPermissionsNew: zod.string(),
	discordFeatures: zod.array(zod.string()),
	memberCount: zod.number(),
	channels: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			type: zod.number(),
			position: zod.number(),
		})
	),
	roles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
		})
	),
});

/**
 * @summary Get guild jacob
 */
export const getJacobFeatureParams = zod.object({
	discordId: zod.number(),
});

export const getJacobFeatureResponseLeaderboardsItemTitleMax = 64;

export const getJacobFeatureResponse = zod.object({
	maxLeaderboards: zod.number(),
	blockedRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	blockedUsers: zod.array(zod.number()),
	requiredRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	excludedParticipations: zod.array(zod.string()),
	excludedTimespans: zod.array(
		zod.object({
			start: zod.number(),
			end: zod.number(),
			reason: zod.string().nullish(),
		})
	),
	leaderboards: zod.array(
		zod.object({
			id: zod.string(),
			channelId: zod.string().nullish(),
			startCutoff: zod.number(),
			endCutoff: zod.number(),
			title: zod.string().max(getJacobFeatureResponseLeaderboardsItemTitleMax).nullish(),
			active: zod.boolean(),
			requiredRole: zod.string().nullish(),
			blockedRole: zod.string().nullish(),
			updateChannelId: zod.string().nullish(),
			updateRoleId: zod.string().nullish(),
			pingForSmallImprovements: zod.boolean(),
			crops: zod.object({
				cactus: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				carrot: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				potato: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				wheat: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				melon: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				pumpkin: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				mushroom: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				cocoaBeans: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				sugarCane: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				netherWart: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
			}),
		})
	),
});

/**
 * @summary Update guild jacob feature
 */
export const updateJacobFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateJacobFeatureQueryParams = zod.object({
	reason: zod.string().nullish(),
});

export const updateJacobFeatureBodyLeaderboardsItemTitleMax = 64;

export const updateJacobFeatureBody = zod.object({
	blockedRoles: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				position: zod.number(),
				permissions: zod.number(),
			})
		)
		.describe("Blocked roles from participating in the guild's Jacob Leaderboards"),
	blockedUsers: zod
		.array(zod.number())
		.describe("Blocked users from participating in the guild's Jacob Leaderboards"),
	requiredRoles: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				position: zod.number(),
				permissions: zod.number(),
			})
		)
		.describe("Required roles to participate in the guild's Jacob Leaderboards"),
	excludedParticipations: zod
		.array(zod.string())
		.describe("Excluded participations from the guild's Jacob Leaderboards"),
	excludedTimespans: zod
		.array(
			zod.object({
				start: zod.number(),
				end: zod.number(),
				reason: zod.string().nullish(),
			})
		)
		.describe("Excluded timespans from the guild's Jacob Leaderboards"),
	leaderboards: zod
		.array(
			zod.object({
				id: zod.string(),
				channelId: zod.string().nullish(),
				startCutoff: zod.number(),
				endCutoff: zod.number(),
				title: zod.string().max(updateJacobFeatureBodyLeaderboardsItemTitleMax).nullish(),
				active: zod.boolean(),
				requiredRole: zod.string().nullish(),
				blockedRole: zod.string().nullish(),
				updateChannelId: zod.string().nullish(),
				updateRoleId: zod.string().nullish(),
				pingForSmallImprovements: zod.boolean(),
				crops: zod.object({
					cactus: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					carrot: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					potato: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					wheat: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					melon: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					pumpkin: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					mushroom: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					cocoaBeans: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					sugarCane: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					netherWart: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
				}),
			})
		)
		.describe("Leaderboards for the guild's Jacob Leaderboards"),
});

export const updateJacobFeatureResponseLeaderboardsItemTitleMax = 64;

export const updateJacobFeatureResponse = zod.object({
	maxLeaderboards: zod.number(),
	blockedRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	blockedUsers: zod.array(zod.number()),
	requiredRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	excludedParticipations: zod.array(zod.string()),
	excludedTimespans: zod.array(
		zod.object({
			start: zod.number(),
			end: zod.number(),
			reason: zod.string().nullish(),
		})
	),
	leaderboards: zod.array(
		zod.object({
			id: zod.string(),
			channelId: zod.string().nullish(),
			startCutoff: zod.number(),
			endCutoff: zod.number(),
			title: zod.string().max(updateJacobFeatureResponseLeaderboardsItemTitleMax).nullish(),
			active: zod.boolean(),
			requiredRole: zod.string().nullish(),
			blockedRole: zod.string().nullish(),
			updateChannelId: zod.string().nullish(),
			updateRoleId: zod.string().nullish(),
			pingForSmallImprovements: zod.boolean(),
			crops: zod.object({
				cactus: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				carrot: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				potato: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				wheat: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				melon: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				pumpkin: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				mushroom: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				cocoaBeans: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				sugarCane: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				netherWart: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
			}),
		})
	),
});

/**
 * @summary Request Guild Update
 */
export const refreshGuildParams = zod.object({
	discordId: zod.number(),
});

/**
 * @summary Update Guild
 */
export const updateGuildParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateGuildBody = zod.object({
	id: zod.string().nullish(),
	name: zod.string(),
	icon: zod.string().nullish(),
	banner: zod.string().nullish(),
	permissions: zod.string().nullish(),
	botPermissions: zod.string().nullish(),
	features: zod.array(zod.string()).nullish(),
	channels: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				type: zod.number(),
				position: zod.number(),
				permissions: zod.string().nullish(),
			})
		)
		.nullish(),
	roles: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				position: zod.number(),
			})
		)
		.nullish(),
});

export const updateGuildResponse = zod.object({});

/**
 * @summary Update Guild Channel
 */
export const updateGuildChannelParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateGuildChannelBody = zod.object({
	id: zod.string(),
	name: zod.string(),
	type: zod.number(),
	position: zod.number(),
	permissions: zod.string().nullish(),
});

/**
 * @summary Update Guild Member Roles
 */
export const updateGuildMemberRolesParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	userId: zod.string(),
});

export const updateGuildMemberRolesBodyItem = zod.string();
export const updateGuildMemberRolesBody = zod.array(updateGuildMemberRolesBodyItem);

/**
 * @summary Update Guild Role
 */
export const updateGuildRoleParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateGuildRoleBody = zod.object({
	id: zod.string(),
	name: zod.string(),
	position: zod.number(),
});

/**
 * @summary Update user Discord account
 */
export const updateDiscordAccountBody = zod.object({
	id: zod.number(),
	username: zod.string(),
	displayName: zod.string().nullish(),
	discriminator: zod.string().nullish(),
	avatar: zod.string().nullish(),
	locale: zod.string().nullish(),
	banner: zod.string().nullish(),
});

export const updateDiscordAccountResponseSettingsFeaturesEmbedColorMax = 6;
export const updateDiscordAccountResponseSettingsFeaturesEmojiUrlMax = 256;
export const updateDiscordAccountResponseSettingsWeightStyleNameMax = 64;
export const updateDiscordAccountResponseSettingsLeaderboardStyleNameMax = 64;
export const updateDiscordAccountResponseSettingsNameStyleNameMax = 64;
export const updateDiscordAccountResponseEntitlementsItemProductWeightStylesItemNameMax = 64;
export const updateDiscordAccountResponseEntitlementsItemProductThumbnailTitleMax = 64;
export const updateDiscordAccountResponseEntitlementsItemProductThumbnailDescriptionMax = 512;
export const updateDiscordAccountResponseEntitlementsItemProductImagesItemTitleMax = 64;
export const updateDiscordAccountResponseEntitlementsItemProductImagesItemDescriptionMax = 512;
export const updateDiscordAccountResponseMinecraftAccountsItemBadgesItemImageTitleMax = 64;
export const updateDiscordAccountResponseMinecraftAccountsItemBadgesItemImageDescriptionMax = 512;

export const updateDiscordAccountResponse = zod.object({
	id: zod.string().describe('Discord user ID'),
	displayName: zod.string().describe('Discord display name'),
	username: zod.string().describe('Discord username (unique)'),
	discriminator: zod.string().nullish(),
	locale: zod.string().nullish().describe('Discord user locale'),
	avatar: zod.string().nullish().describe('Discord avatar URL hash'),
	banner: zod.string().nullish().describe('Discord banner URL hash'),
	settings: zod.object({
		prefix: zod.string().nullish().describe('Custom name prefix'),
		suffix: zod.string().nullish().describe('Custom name suffix'),
		features: zod
			.object({
				weightStyle: zod.number().nullish().describe('Name of weight style to use.'),
				weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
				embedColor: zod
					.string()
					.max(updateDiscordAccountResponseSettingsFeaturesEmbedColorMax)
					.nullish()
					.describe('Embed color for the bot.'),
				moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
				hideShopPromotions: zod.boolean().nullish().describe('If shop promotions should be hidden.'),
				emojiUrl: zod
					.string()
					.max(updateDiscordAccountResponseSettingsFeaturesEmojiUrlMax)
					.nullish()
					.describe('Custom name emoji URL.'),
			})
			.nullish()
			.describe('Configurated features for the user'),
		weightStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(updateDiscordAccountResponseSettingsWeightStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected weight style for the user'),
		leaderboardStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(updateDiscordAccountResponseSettingsLeaderboardStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected leaderboard style for the user'),
		nameStyle: zod
			.object({
				id: zod.number(),
				name: zod.string().max(updateDiscordAccountResponseSettingsNameStyleNameMax).nullish(),
			})
			.nullish()
			.describe('Selected name style for the user'),
		fortune: zod
			.object({
				accounts: zod
					.record(
						zod.string(),
						zod.record(
							zod.string(),
							zod.object({
								strength: zod.number().describe('Amount of strength used for mooshroom fortune'),
								communityCenter: zod.number().describe('Community center farming fortune level'),
								attributes: zod.record(zod.string(), zod.number()).describe('Attribute shards'),
								exported: zod.record(zod.string(), zod.boolean()).describe('Exported crops'),
							})
						)
					)
					.describe('Member fortune settings for each minecraft account, then each profile.'),
			})
			.nullish()
			.describe('Fortune settings for the user'),
	}),
	entitlements: zod
		.array(
			zod.object({
				id: zod.string().describe('Entitlement ID'),
				type: zod
					.union([
						zod.literal(1),
						zod.literal(2),
						zod.literal(3),
						zod.literal(4),
						zod.literal(5),
						zod.literal(6),
						zod.literal(7),
						zod.literal(8),
					])
					.describe('Type of entitlement'),
				target: zod
					.union([zod.literal(0), zod.literal(1), zod.literal(2)])
					.describe('Target of entitlement.\n0 = None\n1 = User\n2 = Guild'),
				productId: zod.string().describe('SKU ID of the product'),
				product: zod
					.object({
						id: zod.string().describe('Product ID'),
						name: zod.string().describe('Product name'),
						slug: zod.string().describe('Slug of the product'),
						price: zod.number().describe('Product price'),
						description: zod.string().nullish().describe('Product description'),
						available: zod.boolean().describe('If the product is available for purchase'),
						type: zod
							.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
							.describe('Type of product'),
						features: zod
							.object({
								badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
								weightStyles: zod
									.array(zod.string())
									.nullish()
									.describe('Name of weight style to unlock.'),
								weightStyleOverride: zod
									.boolean()
									.nullish()
									.describe("Ability to override other's weight styles."),
								embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
								hideShopPromotions: zod
									.boolean()
									.nullish()
									.describe('Ability to hide shop promotions.'),
								moreInfoDefault: zod
									.boolean()
									.nullish()
									.describe('Show \"More Info\" on weight command by default.'),
								customEmoji: zod
									.boolean()
									.nullish()
									.describe('Ability to have custom name emoji for the user.'),
								maxMonthlyEvents: zod
									.number()
									.nullish()
									.describe('Maximum number of events that can be created in a month. (For guilds)'),
								maxJacobLeaderboards: zod
									.number()
									.nullish()
									.describe(
										'Maximum number of jacob leaderboard that can be active at once. (For guilds)'
									),
							})
							.describe('Features of the product'),
						weightStyles: zod
							.array(
								zod.object({
									id: zod.number(),
									name: zod
										.string()
										.max(updateDiscordAccountResponseEntitlementsItemProductWeightStylesItemNameMax)
										.nullish(),
								})
							)
							.describe('Unlocked weight styles'),
						thumbnail: zod
							.object({
								title: zod
									.string()
									.max(updateDiscordAccountResponseEntitlementsItemProductThumbnailTitleMax)
									.nullish()
									.describe('Image title'),
								description: zod
									.string()
									.max(updateDiscordAccountResponseEntitlementsItemProductThumbnailDescriptionMax)
									.nullish()
									.describe('Image description'),
								order: zod.number().nullish().describe('Image ordering number'),
								url: zod.string().describe('Full image URL'),
							})
							.nullish()
							.describe('Product thumbnail'),
						images: zod
							.array(
								zod.object({
									title: zod
										.string()
										.max(updateDiscordAccountResponseEntitlementsItemProductImagesItemTitleMax)
										.nullish()
										.describe('Image title'),
									description: zod
										.string()
										.max(
											updateDiscordAccountResponseEntitlementsItemProductImagesItemDescriptionMax
										)
										.nullish()
										.describe('Image description'),
									order: zod.number().nullish().describe('Image ordering number'),
									url: zod.string().describe('Full image URL'),
								})
							)
							.describe('Product Images'),
						flags: zod.number().describe('Discord flags'),
						isSubscription: zod.boolean(),
						isGuildSubscription: zod.boolean(),
						isUserSubscription: zod.boolean(),
					})
					.describe('Product details'),
				deleted: zod.boolean(),
				consumed: zod.boolean().nullish().describe('Consumed status of the entitlement if applicable'),
				startDate: zod.string().datetime({}).nullish().describe('Start date of the entitlement'),
				endDate: zod.string().datetime({}).nullish().describe('End date of the entitlement'),
			})
		)
		.describe('Purchased entitlements from the Discord store'),
	minecraftAccounts: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				primaryAccount: zod.boolean(),
				badges: zod.array(
					zod.object({
						id: zod.number(),
						image: zod.object({
							title: zod
								.string()
								.max(updateDiscordAccountResponseMinecraftAccountsItemBadgesItemImageTitleMax)
								.nullish()
								.describe('Image title'),
							description: zod
								.string()
								.max(updateDiscordAccountResponseMinecraftAccountsItemBadgesItemImageDescriptionMax)
								.nullish()
								.describe('Image description'),
							order: zod.number().nullish().describe('Image ordering number'),
							url: zod.string().describe('Full image URL'),
						}),
						name: zod.string(),
						description: zod.string(),
						requirements: zod.string(),
						timestamp: zod.string(),
						visible: zod.boolean(),
						order: zod.number(),
					})
				),
				skin: zod.object({
					texture: zod.string().nullish().describe('Minecraft skin texture ID'),
					face: zod.string().nullish().describe('Base64 data image of the 8x8 face'),
					hat: zod.string().nullish().describe('Base64 data image of the 8x8 hat (overlay on the face)'),
				}),
			})
		)
		.describe('Linked Minecraft accounts'),
	dismissedAnnouncements: zod.array(zod.string()).describe('Dismissed announcements by the user'),
});

/**
 * @summary Get a contest from a contest key
 */
export const getContestFromKeyParams = zod.object({
	contestKey: zod.string().describe('A contest key in the format from the Hypixel API'),
});

export const getContestFromKeyResponse = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	participants: zod.number(),
	brackets: zod.object({
		bronze: zod.number(),
		silver: zod.number(),
		gold: zod.number(),
		platinum: zod.number(),
		diamond: zod.number(),
	}),
	participations: zod.array(
		zod.object({
			collected: zod.number(),
			position: zod.number(),
			medal: zod.string().nullish(),
			removed: zod.boolean(),
			playerUuid: zod.string(),
			playerName: zod.string(),
			profileUuid: zod.string(),
		})
	),
});

/**
 * @summary Get the three contests that start at a specific timestamp
 */
export const getContestsAtTimestampParams = zod.object({
	timestamp: zod.number(),
});

export const getContestsAtTimestampResponseItem = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	participants: zod.number(),
	brackets: zod.object({
		bronze: zod.number(),
		silver: zod.number(),
		gold: zod.number(),
		platinum: zod.number(),
		diamond: zod.number(),
	}),
	participations: zod.array(
		zod.object({
			collected: zod.number(),
			position: zod.number(),
			medal: zod.string().nullish(),
			removed: zod.boolean(),
			playerUuid: zod.string(),
			playerName: zod.string(),
			profileUuid: zod.string(),
		})
	),
});
export const getContestsAtTimestampResponse = zod.array(getContestsAtTimestampResponseItem);

/**
 * @summary Get the three contests in a specific SkyBlock day
 */
export const getContestsInDayParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
	month: zod.number().describe('SkyBlock month'),
	day: zod.number().describe('SkyBlock day'),
});

export const getContestsInDayResponseItem = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	participants: zod.number(),
	brackets: zod.object({
		bronze: zod.number(),
		silver: zod.number(),
		gold: zod.number(),
		platinum: zod.number(),
		diamond: zod.number(),
	}),
	participations: zod.array(
		zod.object({
			collected: zod.number(),
			position: zod.number(),
			medal: zod.string().nullish(),
			removed: zod.boolean(),
			playerUuid: zod.string(),
			playerName: zod.string(),
			profileUuid: zod.string(),
		})
	),
});
export const getContestsInDayResponse = zod.array(getContestsInDayResponseItem);

/**
 * @summary Get all contests in a SkyBlock month
 */
export const getContestsInMonthParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
	month: zod.number().describe('SkyBlock month'),
});

export const getContestsInMonthResponse = zod.record(
	zod.string(),
	zod.array(
		zod.object({
			crop: zod.string(),
			timestamp: zod.number(),
			participants: zod.number(),
			brackets: zod.object({
				bronze: zod.number(),
				silver: zod.number(),
				gold: zod.number(),
				platinum: zod.number(),
				diamond: zod.number(),
			}),
		})
	)
);

/**
 * @summary Get all contests in a SkyBlock year
 */
export const getContestsInYearParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
});

export const getContestsInYearQueryNowDefault = false;

export const getContestsInYearQueryParams = zod.object({
	now: zod.boolean().nullish().describe('If the year being requested is the current year. Not required.'),
});

export const getContestsInYearResponse = zod.object({
	year: zod.number(),
	count: zod.number(),
	complete: zod.boolean(),
	contests: zod.record(zod.string(), zod.array(zod.string())),
});

/**
 * Uses crowd-sourced data, which may not be accurate.
Data used and provided by <see href="https://github.com/hannibal002/SkyHanni/">SkyHanni</see> to display upcoming contests in-game.
 * @summary Get upcoming contests for the current SkyBlock year
 */
export const getCurrentContestsResponse = zod.object({
	year: zod.number(),
	count: zod.number(),
	complete: zod.boolean(),
	contests: zod.record(zod.string(), zod.array(zod.string())),
});

/**
 * Data used and provided by <see href="https://github.com/hannibal002/SkyHanni/">SkyHanni</see> to display upcoming contests in-game.
 * @summary Upload upcoming contests for the current SkyBlock year
 */
export const uploadCurrentContestsBody = zod.record(zod.string(), zod.array(zod.string()));

/**
 * @summary Get all contests for a player
 */
export const getPlayerParticipationsParams = zod.object({
	playerUuid: zod.string(),
});

export const getPlayerParticipationsResponseItem = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	collected: zod.number(),
	position: zod.number(),
	participants: zod.number(),
	medal: zod.string().nullish(),
});
export const getPlayerParticipationsResponse = zod.array(getPlayerParticipationsResponseItem);

/**
 * @summary Get all contests for a profile member
 */
export const getProfileMemberParticipationsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getProfileMemberParticipationsResponseItem = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	collected: zod.number(),
	position: zod.number(),
	participants: zod.number(),
	medal: zod.string().nullish(),
});
export const getProfileMemberParticipationsResponse = zod.array(getProfileMemberParticipationsResponseItem);

/**
 * @summary Get contest records for a SkyBlock year
 */
export const getRecordsInYearParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
});

export const getRecordsInYearResponse = zod.object({
	year: zod.number(),
	crops: zod.record(
		zod.string(),
		zod.array(
			zod.object({
				playerUuid: zod.string(),
				playerName: zod.string(),
				profileUuid: zod.string(),
				removed: zod.boolean(),
				timestamp: zod.number(),
				collected: zod.number(),
				position: zod.number(),
				participants: zod.number(),
			})
		)
	),
});

/**
 * @summary Get contests for the player's selected profile member
 */
export const getSelectedMemberParticipationsParams = zod.object({
	playerUuid: zod.string(),
});

export const getSelectedMemberParticipationsResponseItem = zod.object({
	crop: zod.string(),
	timestamp: zod.number(),
	collected: zod.number(),
	position: zod.number(),
	participants: zod.number(),
	medal: zod.string().nullish(),
});
export const getSelectedMemberParticipationsResponse = zod.array(getSelectedMemberParticipationsResponseItem);

/**
 * @summary Add an Event Member to a Team
 */
export const addTeamMemberAdminParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	teamId: zod.number(),
	player: zod.string().describe('Player uuid or ign'),
});

/**
 * @summary Kick an Event Team Member
 */
export const kickTeamMemberAdminParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	teamId: zod.number(),
	player: zod.string().describe('Player uuid or ign'),
});

/**
 * @summary Ban an Event Member
 */
export const banMemberParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	playerUuid: zod.string(),
});

export const banMemberBody = zod.string();

export const banMemberResponseMetaPrefixMax = 16;
export const banMemberResponseMetaSuffixMax = 16;
export const banMemberResponseNotesMax = 128;

export const banMemberResponse = zod.object({
	playerUuid: zod.string().nullish(),
	profileId: zod.string().nullish(),
	playerName: zod.string().nullish(),
	eventId: zod.string(),
	teamId: zod.string().nullish(),
	status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
	score: zod.string().nullish(),
	lastUpdated: zod.string().nullish(),
	disqualified: zod.boolean().nullish(),
	data: zod.any().nullish(),
	estimatedTimeActive: zod.string().nullish(),
	meta: zod
		.object({
			prefix: zod.string().max(banMemberResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(banMemberResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish()
		.describe('Metadata of the entry'),
	id: zod.number(),
	accountId: zod.string().nullish(),
	notes: zod.string().max(banMemberResponseNotesMax).nullish(),
});

/**
 * @summary Unban an Event Member
 */
export const unbanMemberParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	playerUuid: zod.string(),
});

/**
 * @summary Create Event
 */
export const createEventParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const createEventBodyNameMax = 64;
export const createEventBodyDescriptionMax = 1024;
export const createEventBodyRulesMax = 1024;
export const createEventBodyPrizeInfoMax = 1024;
export const createEventBodyRequiredRoleMax = 24;
export const createEventBodyBlockedRoleMax = 24;

export const createEventBody = zod.object({
	name: zod.string().min(1).max(createEventBodyNameMax).describe('The name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.nullish()
		.describe('The type of the event'),
	guildId: zod.string().min(1).describe('The Discord server id as a string for the event'),
	description: zod
		.string()
		.max(createEventBodyDescriptionMax)
		.nullish()
		.describe('An optional description for the event'),
	rules: zod.string().max(createEventBodyRulesMax).nullish().describe('An optional set of rules for the event'),
	prizeInfo: zod
		.string()
		.max(createEventBodyPrizeInfoMax)
		.nullish()
		.describe('An optional description of prizes for the event'),
	startTime: zod.number().describe('Unix timestamp for the start time of the event in seconds'),
	endTime: zod.number().describe('Unix timestamp for the end time of the event in seconds'),
	joinTime: zod
		.number()
		.nullish()
		.describe('Unix timestamp for the latest time a new member can join the event in seconds'),
	dynamicStartTime: zod.boolean().nullish().describe('Currently unused'),
	requiredRole: zod
		.string()
		.max(createEventBodyRequiredRoleMax)
		.nullish()
		.describe('A Discord role id that is required to participate in the event'),
	blockedRole: zod
		.string()
		.max(createEventBodyBlockedRoleMax)
		.nullish()
		.describe('A Discord role id that is blocked from participating in the event'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
});

export const createEventResponseBannerTitleMax = 64;
export const createEventResponseBannerDescriptionMax = 512;

export const createEventResponse = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(createEventResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(createEventResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});

/**
 * This generally should only be used for events with a set amount of teams (when users are not allowed to create their own teams)
 * @summary Create an Event Team
 */
export const createTeamAdminParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const createTeamAdminQueryParams = zod.object({
	userId: zod.string().nullish(),
});

export const createTeamAdminBodyNameMax = 3;
export const createTeamAdminBodyColorMax = 7;

export const createTeamAdminBody = zod.object({
	name: zod
		.array(zod.string())
		.min(1)
		.max(createTeamAdminBodyNameMax)
		.nullish()
		.describe('An array of strings for the team name, example: [ \"Bountiful\", \"Farmers\" ]'),
	color: zod.string().max(createTeamAdminBodyColorMax).nullish(),
});

/**
 * Delete an event and all associated data. Only available for unapproved events.
 * @summary Delete Event
 */
export const deleteEventParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

/**
 * @summary Update Event
 */
export const updateEventParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const updateEventBody = zod.object({
	name: zod.string().nullish(),
	type: zod.string().nullish(),
	description: zod.string().nullish(),
	rules: zod.string().nullish(),
	prizeInfo: zod.string().nullish(),
	startTime: zod.number().nullish(),
	joinTime: zod.number().nullish(),
	endTime: zod.number().nullish(),
	dynamicStartTime: zod.boolean().nullish(),
	active: zod.boolean().nullish(),
	requiredRole: zod.string().nullish(),
	blockedRole: zod.string().nullish(),
	guildId: zod.string().nullish(),
	weightData: zod
		.object({
			cropWeights: zod.record(zod.string(), zod.number()).describe('The weights of each crop in the event'),
		})
		.nullish(),
	medalData: zod
		.object({
			medalWeights: zod.record(zod.string(), zod.number()),
		})
		.nullish(),
	pestData: zod
		.object({
			pestWeights: zod.record(zod.string(), zod.number()),
		})
		.nullish(),
	collectionData: zod
		.object({
			collectionWeights: zod.record(
				zod.string(),
				zod.object({
					name: zod.string().nullish(),
					weight: zod.number(),
				})
			),
		})
		.nullish(),
});

export const updateEventResponseBannerTitleMax = 64;
export const updateEventResponseBannerDescriptionMax = 512;

export const updateEventResponse = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(updateEventResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(updateEventResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});

/**
 * @summary Delete Custom Event Banner
 */
export const deleteEventBannerParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

/**
 * @summary Set Custom Event Banner
 */
export const setEventBannerParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const setEventBannerBody = zod.object({
	image: zod.instanceof(File).nullish(),
});

/**
 * @summary Delete an Event Member
 */
export const deleteMemberParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	playerUuid: zod.string(),
});

export const deleteMemberQueryParams = zod.object({
	profileUuid: zod.string().nullish(),
	recordId: zod.number().nullish(),
});

/**
 * @summary Ban an Event Member
 */
export const forceAddMemberParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	playerUuid: zod.string(),
});

export const forceAddMemberQueryParams = zod.object({
	profileUuid: zod.string(),
});

/**
 * @summary Delete an Event Team
 */
export const deleteTeamAdminParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
	teamId: zod.number(),
});

/**
 * @summary Update a team
 */
export const updateTeamAdminParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
	teamId: zod.number(),
});

export const updateTeamAdminBodyNameMax = 3;
export const updateTeamAdminBodyColorMax = 7;

export const updateTeamAdminBody = zod.object({
	name: zod
		.array(zod.string())
		.min(1)
		.max(updateTeamAdminBodyNameMax)
		.nullish()
		.describe('An array of strings for the team name, example: [ \"Bountiful\", \"Farmers\" ]'),
	color: zod.string().max(updateTeamAdminBodyColorMax).nullish(),
	changeCode: zod.boolean().nullish().describe('If join code should be changed'),
});

/**
 * @summary Get banned event members
 */
export const getBannedMembersParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const getBannedMembersResponseMetaPrefixMax = 16;
export const getBannedMembersResponseMetaSuffixMax = 16;
export const getBannedMembersResponseNotesMax = 128;

export const getBannedMembersResponseItem = zod.object({
	playerUuid: zod.string().nullish(),
	profileId: zod.string().nullish(),
	playerName: zod.string().nullish(),
	eventId: zod.string(),
	teamId: zod.string().nullish(),
	status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
	score: zod.string().nullish(),
	lastUpdated: zod.string().nullish(),
	disqualified: zod.boolean().nullish(),
	data: zod.any().nullish(),
	estimatedTimeActive: zod.string().nullish(),
	meta: zod
		.object({
			prefix: zod.string().max(getBannedMembersResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getBannedMembersResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish()
		.describe('Metadata of the entry'),
	id: zod.number(),
	accountId: zod.string().nullish(),
	notes: zod.string().max(getBannedMembersResponseNotesMax).nullish(),
});
export const getBannedMembersResponse = zod.array(getBannedMembersResponseItem);

/**
 * @summary Get event members
 */
export const getGuildEventMembersParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const getGuildEventMembersResponseMetaPrefixMax = 16;
export const getGuildEventMembersResponseMetaSuffixMax = 16;
export const getGuildEventMembersResponseNotesMax = 128;

export const getGuildEventMembersResponseItem = zod.object({
	playerUuid: zod.string().nullish(),
	profileId: zod.string().nullish(),
	playerName: zod.string().nullish(),
	eventId: zod.string(),
	teamId: zod.string().nullish(),
	status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
	score: zod.string().nullish(),
	lastUpdated: zod.string().nullish(),
	disqualified: zod.boolean().nullish(),
	data: zod.any().nullish(),
	estimatedTimeActive: zod.string().nullish(),
	meta: zod
		.object({
			prefix: zod.string().max(getGuildEventMembersResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getGuildEventMembersResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish()
		.describe('Metadata of the entry'),
	id: zod.number(),
	accountId: zod.string().nullish(),
	notes: zod.string().max(getGuildEventMembersResponseNotesMax).nullish(),
});
export const getGuildEventMembersResponse = zod.array(getGuildEventMembersResponseItem);

/**
 * @summary Get an event for a guild
 */
export const getGuildEventParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const getGuildEventResponseBannerTitleMax = 64;
export const getGuildEventResponseBannerDescriptionMax = 512;

export const getGuildEventResponse = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getGuildEventResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getGuildEventResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});

/**
 * @summary Get all events for a guild
 */
export const getGuildEventsParams = zod.object({
	discordId: zod.number(),
});

export const getGuildEventsResponseBannerTitleMax = 64;
export const getGuildEventsResponseBannerDescriptionMax = 512;

export const getGuildEventsResponseItem = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getGuildEventsResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getGuildEventsResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});
export const getGuildEventsResponse = zod.array(getGuildEventsResponseItem);

/**
 * @summary Get event teams
 */
export const getTeamsAdminParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	eventId: zod.number(),
});

export const getTeamsAdminResponseMembersItemNotesMax = 128;
export const getTeamsAdminResponseMembersItemMetaPrefixMax = 16;
export const getTeamsAdminResponseMembersItemMetaSuffixMax = 16;

export const getTeamsAdminResponseItem = zod.object({
	id: zod.number(),
	eventId: zod.string().nullish(),
	name: zod.string().nullish(),
	color: zod.string().nullish(),
	score: zod.string().nullish(),
	ownerId: zod.string().nullish(),
	ownerUuid: zod.string().nullish(),
	members: zod.array(
		zod.object({
			playerUuid: zod.string().nullish(),
			playerName: zod.string().nullish(),
			profileId: zod.string().nullish(),
			eventId: zod.string(),
			teamId: zod.string().nullish(),
			status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
			score: zod.string().nullish(),
			data: zod.any().nullish(),
			lastUpdated: zod.string().nullish(),
			disqualified: zod.boolean(),
			notes: zod.string().max(getTeamsAdminResponseMembersItemNotesMax).nullish(),
			meta: zod
				.object({
					prefix: zod.string().max(getTeamsAdminResponseMembersItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getTeamsAdminResponseMembersItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish()
				.describe('Metadata of the entry'),
		})
	),
	joinCode: zod
		.string()
		.nullish()
		.describe('Join code for the team, only populated if authenticated user is the owner'),
});
export const getTeamsAdminResponse = zod.array(getTeamsAdminResponseItem);

/**
 * @summary Set player as team owner
 */
export const setTeamOwnerAdminParams = zod.object({
	discordId: zod.number(),
	eventId: zod.number(),
	teamId: zod.number(),
});

export const setTeamOwnerAdminBody = zod.object({
	player: zod.string(),
});

/**
 * @summary Get an event
 */
export const getEventParams = zod.object({
	eventId: zod.number(),
});

export const getEventResponseBannerTitleMax = 64;
export const getEventResponseBannerDescriptionMax = 512;

export const getEventResponse = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getEventResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod.string().max(getEventResponseBannerDescriptionMax).nullish().describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});

/**
 * Default constants for event settings.
 * @summary Get event default constants
 */
export const getEventDefaultsResponse = zod.object({
	cropWeights: zod.record(zod.string(), zod.number()),
	medalValues: zod.record(zod.string(), zod.number()),
	pestWeights: zod.record(zod.string(), zod.number()),
});

/**
 * @summary Get an event member
 */
export const getEventMemberParams = zod.object({
	eventId: zod.number(),
	playerUuid: zod.string(),
});

export const getEventMemberResponseNotesMax = 128;
export const getEventMemberResponseMetaPrefixMax = 16;
export const getEventMemberResponseMetaSuffixMax = 16;

export const getEventMemberResponse = zod.object({
	playerUuid: zod.string().nullish(),
	playerName: zod.string().nullish(),
	profileId: zod.string().nullish(),
	eventId: zod.string(),
	teamId: zod.string().nullish(),
	status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
	score: zod.string().nullish(),
	data: zod.any().nullish(),
	lastUpdated: zod.string().nullish(),
	disqualified: zod.boolean(),
	notes: zod.string().max(getEventMemberResponseNotesMax).nullish(),
	meta: zod
		.object({
			prefix: zod.string().max(getEventMemberResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getEventMemberResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish()
		.describe('Metadata of the entry'),
});

/**
 * @summary Get event members
 */
export const getEventMembersParams = zod.object({
	eventId: zod.number(),
});

export const getEventMembersResponseMetaPrefixMax = 16;
export const getEventMembersResponseMetaSuffixMax = 16;

export const getEventMembersResponseItem = zod.object({
	playerUuid: zod.string().nullish(),
	profileId: zod.string().nullish(),
	playerName: zod.string().nullish(),
	eventId: zod.string(),
	teamId: zod.string().nullish(),
	status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
	score: zod.string().nullish(),
	lastUpdated: zod.string().nullish(),
	disqualified: zod.boolean().nullish(),
	data: zod.any().nullish(),
	estimatedTimeActive: zod.string().nullish(),
	meta: zod
		.object({
			prefix: zod.string().max(getEventMembersResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getEventMembersResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish()
		.describe('Metadata of the entry'),
});
export const getEventMembersResponse = zod.array(getEventMembersResponseItem);

/**
 * @summary Get an event team
 */
export const getEventTeamParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

export const getEventTeamResponseMembersItemNotesMax = 128;
export const getEventTeamResponseMembersItemMetaPrefixMax = 16;
export const getEventTeamResponseMembersItemMetaSuffixMax = 16;

export const getEventTeamResponse = zod.object({
	id: zod.number(),
	eventId: zod.string().nullish(),
	name: zod.string().nullish(),
	color: zod.string().nullish(),
	score: zod.string().nullish(),
	ownerId: zod.string().nullish(),
	ownerUuid: zod.string().nullish(),
	members: zod.array(
		zod.object({
			playerUuid: zod.string().nullish(),
			playerName: zod.string().nullish(),
			profileId: zod.string().nullish(),
			eventId: zod.string(),
			teamId: zod.string().nullish(),
			status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
			score: zod.string().nullish(),
			data: zod.any().nullish(),
			lastUpdated: zod.string().nullish(),
			disqualified: zod.boolean(),
			notes: zod.string().max(getEventTeamResponseMembersItemNotesMax).nullish(),
			meta: zod
				.object({
					prefix: zod.string().max(getEventTeamResponseMembersItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getEventTeamResponseMembersItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish()
				.describe('Metadata of the entry'),
		})
	),
	joinCode: zod
		.string()
		.nullish()
		.describe('Join code for the team, only populated if authenticated user is the owner'),
});

/**
 * @summary Delete team
 */
export const deleteTeamParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

/**
 * @summary Update a team
 */
export const updateTeamParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

export const updateTeamBodyNameMax = 3;
export const updateTeamBodyColorMax = 7;

export const updateTeamBody = zod.object({
	name: zod
		.array(zod.string())
		.min(1)
		.max(updateTeamBodyNameMax)
		.nullish()
		.describe('An array of strings for the team name, example: [ \"Bountiful\", \"Farmers\" ]'),
	color: zod.string().max(updateTeamBodyColorMax).nullish(),
	changeCode: zod.boolean().nullish().describe('If join code should be changed'),
});

/**
 * @summary Get event teams
 */
export const getEventTeamsParams = zod.object({
	eventId: zod.number(),
});

export const getEventTeamsResponseMembersItemNotesMax = 128;
export const getEventTeamsResponseMembersItemMetaPrefixMax = 16;
export const getEventTeamsResponseMembersItemMetaSuffixMax = 16;

export const getEventTeamsResponseItem = zod.object({
	id: zod.number(),
	eventId: zod.string().nullish(),
	name: zod.string().nullish(),
	color: zod.string().nullish(),
	score: zod.string().nullish(),
	ownerId: zod.string().nullish(),
	ownerUuid: zod.string().nullish(),
	members: zod.array(
		zod.object({
			playerUuid: zod.string().nullish(),
			playerName: zod.string().nullish(),
			profileId: zod.string().nullish(),
			eventId: zod.string(),
			teamId: zod.string().nullish(),
			status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
			score: zod.string().nullish(),
			data: zod.any().nullish(),
			lastUpdated: zod.string().nullish(),
			disqualified: zod.boolean(),
			notes: zod.string().max(getEventTeamsResponseMembersItemNotesMax).nullish(),
			meta: zod
				.object({
					prefix: zod.string().max(getEventTeamsResponseMembersItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getEventTeamsResponseMembersItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish()
				.describe('Metadata of the entry'),
		})
	),
	joinCode: zod
		.string()
		.nullish()
		.describe('Join code for the team, only populated if authenticated user is the owner'),
});
export const getEventTeamsResponse = zod.array(getEventTeamsResponseItem);

/**
 * @summary Create a team
 */
export const createTeamParams = zod.object({
	eventId: zod.number(),
});

/**
 * Lists of whitelisted words for team name generation.
 * @summary Get event team word list constants
 */
export const getTeamWordListResponse = zod.object({
	first: zod.array(zod.string()),
	second: zod.array(zod.string()),
	third: zod.array(zod.string()),
});

/**
 * @summary Get upcoming events
 */
export const getUpcomingEventsQueryOffsetDefault = 0;

export const getUpcomingEventsQueryParams = zod.object({
	offset: zod.number().nullish().describe('Offset by an amount of days to also include recently ended events.'),
});

export const getUpcomingEventsResponseBannerTitleMax = 64;
export const getUpcomingEventsResponseBannerDescriptionMax = 512;

export const getUpcomingEventsResponseItem = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getUpcomingEventsResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getUpcomingEventsResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});
export const getUpcomingEventsResponse = zod.array(getUpcomingEventsResponseItem);

/**
 * @summary Join an event
 */
export const joinEventParams = zod.object({
	eventId: zod.number(),
});

export const joinEventQueryParams = zod.object({
	playerUuid: zod.string().nullish(),
	profileUuid: zod.string().nullish(),
});

/**
 * @summary Join a team
 */
export const joinTeamParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

export const joinTeamBody = zod.string();

/**
 * Kicked members can rejoin the team if they have the join code.
 * @summary Kick a team member
 */
export const kickTeamMemberParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
	player: zod.string().describe('Player uuid or ign'),
});

/**
 * @summary Join an event
 */
export const leaveEventParams = zod.object({
	eventId: zod.number(),
});

/**
 * @summary Leave a team
 */
export const leaveTeamParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

/**
 * @summary Set player as team owner
 */
export const setTeamOwnerParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

/**
 * @summary Generate new team join code
 */
export const updateTeamJoinCodeParams = zod.object({
	eventId: zod.number(),
	teamId: zod.number(),
});

/**
 * Get Garden data for a specific profile by UUID
 * @summary Get Garden data for a profile
 */
export const getGardenParams = zod.object({
	profileUuid: zod.string(),
});

export const getGardenResponse = zod.object({
	profileId: zod.string().describe('Profile ID'),
	experience: zod.number().describe('Garden experience'),
	completedVisitors: zod.number().describe('Total completed visitors'),
	uniqueVisitors: zod.number().describe('Unique visitors unlocked'),
	crops: zod
		.object({
			cactus: zod.string().nullish(),
			carrot: zod.string().nullish(),
			potato: zod.string().nullish(),
			wheat: zod.string().nullish(),
			melon: zod.string().nullish(),
			pumpkin: zod.string().nullish(),
			mushroom: zod.string().nullish(),
			cocoaBeans: zod.string().nullish(),
			sugarCane: zod.string().nullish(),
			netherWart: zod.string().nullish(),
		})
		.describe('Crops counted towards milestones'),
	cropUpgrades: zod
		.object({
			cactus: zod.number(),
			carrot: zod.number(),
			potato: zod.number(),
			wheat: zod.number(),
			melon: zod.number(),
			pumpkin: zod.number(),
			mushroom: zod.number(),
			cocoaBeans: zod.number(),
			sugarCane: zod.number(),
			netherWart: zod.number(),
		})
		.describe('Crop upgrades'),
	plots: zod.array(zod.string()).describe('List of unlocked plots'),
	composter: zod
		.object({
			organic_matter: zod.number(),
			fuel_units: zod.number(),
			compost_units: zod.number(),
			compost_items: zod.number(),
			conversion_ticks: zod.number(),
			last_save: zod.number(),
			upgrades: zod.object({
				speed: zod.number(),
				multi_drop: zod.number(),
				fuel_cap: zod.number(),
				organic_matter_cap: zod.number(),
				cost_reduction: zod.number(),
			}),
			lastSave: zod.number().describe('Last save time in unix seconds'),
		})
		.describe('Composter data'),
	visitors: zod
		.record(
			zod.string(),
			zod.object({
				visits: zod.number(),
				accepted: zod.number(),
			})
		)
		.describe('Visitor data'),
	lastSave: zod.string().describe('Last save time in unix seconds'),
});

/**
 * Get selected Garden data for a specific player by UUID
 * @summary Get selected Garden data for a player
 */
export const getSelectedGardenParams = zod.object({
	playerUuid: zod.string(),
});

export const getSelectedGardenResponse = zod.object({
	profileId: zod.string().describe('Profile ID'),
	experience: zod.number().describe('Garden experience'),
	completedVisitors: zod.number().describe('Total completed visitors'),
	uniqueVisitors: zod.number().describe('Unique visitors unlocked'),
	crops: zod
		.object({
			cactus: zod.string().nullish(),
			carrot: zod.string().nullish(),
			potato: zod.string().nullish(),
			wheat: zod.string().nullish(),
			melon: zod.string().nullish(),
			pumpkin: zod.string().nullish(),
			mushroom: zod.string().nullish(),
			cocoaBeans: zod.string().nullish(),
			sugarCane: zod.string().nullish(),
			netherWart: zod.string().nullish(),
		})
		.describe('Crops counted towards milestones'),
	cropUpgrades: zod
		.object({
			cactus: zod.number(),
			carrot: zod.number(),
			potato: zod.number(),
			wheat: zod.number(),
			melon: zod.number(),
			pumpkin: zod.number(),
			mushroom: zod.number(),
			cocoaBeans: zod.number(),
			sugarCane: zod.number(),
			netherWart: zod.number(),
		})
		.describe('Crop upgrades'),
	plots: zod.array(zod.string()).describe('List of unlocked plots'),
	composter: zod
		.object({
			organic_matter: zod.number(),
			fuel_units: zod.number(),
			compost_units: zod.number(),
			compost_items: zod.number(),
			conversion_ticks: zod.number(),
			last_save: zod.number(),
			upgrades: zod.object({
				speed: zod.number(),
				multi_drop: zod.number(),
				fuel_cap: zod.number(),
				organic_matter_cap: zod.number(),
				cost_reduction: zod.number(),
			}),
			lastSave: zod.number().describe('Last save time in unix seconds'),
		})
		.describe('Composter data'),
	visitors: zod
		.record(
			zod.string(),
			zod.object({
				visits: zod.number(),
				accepted: zod.number(),
			})
		)
		.describe('Visitor data'),
	lastSave: zod.string().describe('Last save time in unix seconds'),
});

/**
 * @summary Get Admin Crop Collections
 */
export const getAdminCropGraphsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getAdminCropGraphsQueryFromDefault = 0;
export const getAdminCropGraphsQueryDaysDefault = 7;
export const getAdminCropGraphsQueryPerDayDefault = 4;

export const getAdminCropGraphsQueryParams = zod.object({
	from: zod.number().nullish().describe('Unix timestamp in seconds for the start of the data to return'),
	days: zod
		.number()
		.default(getAdminCropGraphsQueryDaysDefault)
		.describe('Amount of days after the \"from\" timestamp to include'),
	perDay: zod
		.number()
		.default(getAdminCropGraphsQueryPerDayDefault)
		.describe('Data points returned per 24-hour period'),
});

export const getAdminCropGraphsResponseItem = zod.object({
	timestamp: zod.number(),
	cropWeight: zod.string(),
	crops: zod.record(zod.string(), zod.number()),
	pests: zod.record(zod.string(), zod.number()),
});
export const getAdminCropGraphsResponse = zod.array(getAdminCropGraphsResponseItem);

/**
 * @summary Get Admin Skill XP
 */
export const getAdminSkillGraphsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getAdminSkillGraphsQueryFromDefault = 0;
export const getAdminSkillGraphsQueryDaysDefault = 7;
export const getAdminSkillGraphsQueryPerDayDefault = 4;

export const getAdminSkillGraphsQueryParams = zod.object({
	from: zod.number().nullish(),
	days: zod.number().default(getAdminSkillGraphsQueryDaysDefault),
	perDay: zod.number().default(getAdminSkillGraphsQueryPerDayDefault),
});

export const getAdminSkillGraphsResponseItem = zod.object({
	timestamp: zod.number(),
	skills: zod.record(zod.string(), zod.number()),
});
export const getAdminSkillGraphsResponse = zod.array(getAdminSkillGraphsResponseItem);

/**
 * @summary Get Crop Collections Over Time
 */
export const getCropGraphsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getCropGraphsQueryFromDefault = 0;
export const getCropGraphsQueryDaysDefault = 7;
export const getCropGraphsQueryPerDayDefault = 4;

export const getCropGraphsQueryParams = zod.object({
	from: zod.number().nullish(),
	days: zod.number().default(getCropGraphsQueryDaysDefault),
	perDay: zod.number().default(getCropGraphsQueryPerDayDefault),
});

export const getCropGraphsResponseItem = zod.object({
	timestamp: zod.number(),
	cropWeight: zod.string(),
	crops: zod.record(zod.string(), zod.number()),
	pests: zod.record(zod.string(), zod.number()),
});
export const getCropGraphsResponse = zod.array(getCropGraphsResponseItem);

/**
 * @summary Get Skill XP Over Time
 */
export const getSkillGraphsParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getSkillGraphsQueryFromDefault = 0;
export const getSkillGraphsQueryDaysDefault = 7;
export const getSkillGraphsQueryPerDayDefault = 4;

export const getSkillGraphsQueryParams = zod.object({
	from: zod.number().nullish(),
	days: zod.number().default(getSkillGraphsQueryDaysDefault),
	perDay: zod.number().default(getSkillGraphsQueryPerDayDefault),
});

export const getSkillGraphsResponseItem = zod.object({
	timestamp: zod.number(),
	skills: zod.record(zod.string(), zod.number()),
});
export const getSkillGraphsResponse = zod.array(getSkillGraphsResponseItem);

/**
 * @summary Get current average medal brackets
 */
export const getCurrentMedalBracketsQueryMonthsDefault = 2;

export const getCurrentMedalBracketsQueryParams = zod.object({
	months: zod
		.number()
		.default(getCurrentMedalBracketsQueryMonthsDefault)
		.describe('Amount of previous SkyBlock months to include in the average'),
});

export const getCurrentMedalBracketsResponse = zod.object({
	start: zod.string(),
	end: zod.string(),
	brackets: zod.record(
		zod.string(),
		zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
			platinum: zod.number(),
			diamond: zod.number(),
		})
	),
});

/**
 * @summary Get average medal brackets for a specific SkyBlock month
 */
export const getMedalBracketsParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
	month: zod.number().describe('SkyBlock month'),
});

export const getMedalBracketsQueryMonthsDefault = 2;

export const getMedalBracketsQueryParams = zod.object({
	months: zod
		.number()
		.default(getMedalBracketsQueryMonthsDefault)
		.describe('Amount of previous SkyBlock months to include in the average'),
});

export const getMedalBracketsResponse = zod.object({
	start: zod.string(),
	end: zod.string(),
	brackets: zod.record(
		zod.string(),
		zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
			platinum: zod.number(),
			diamond: zod.number(),
		})
	),
});

/**
 * @summary Get average medal brackets for multiple SkyBlock years
 */
export const getMedalBracketsGraphParams = zod.object({
	year: zod.number().describe('SkyBlock year'),
});

export const getMedalBracketsGraphQueryYearsDefault = 2;
export const getMedalBracketsGraphQueryMonthsDefault = 2;

export const getMedalBracketsGraphQueryParams = zod.object({
	years: zod
		.number()
		.default(getMedalBracketsGraphQueryYearsDefault)
		.describe('Amount of previous SkyBlock years to include in the average'),
	months: zod
		.number()
		.default(getMedalBracketsGraphQueryMonthsDefault)
		.describe('Amount of previous SkyBlock months to include in the average'),
});

export const getMedalBracketsGraphResponseItem = zod.object({
	start: zod.string(),
	end: zod.string(),
	brackets: zod.record(
		zod.string(),
		zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
			platinum: zod.number(),
			diamond: zod.number(),
		})
	),
});
export const getMedalBracketsGraphResponse = zod.array(getMedalBracketsGraphResponseItem);

/**
 * @summary Modify guild event permissions
 */
export const setEventFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setEventFeatureQueryEnableDefault = false;
export const setEventFeatureQueryMaxDefault = false;

export const setEventFeatureQueryParams = zod.object({
	enable: zod.boolean().nullish(),
	max: zod.number().nullish(),
});

/**
 * @summary Get public guild events
 */
export const getPublicGuildEventsParams = zod.object({
	discordId: zod.number(),
});

export const getPublicGuildEventsResponseBannerTitleMax = 64;
export const getPublicGuildEventsResponseBannerDescriptionMax = 512;

export const getPublicGuildEventsResponseItem = zod.object({
	id: zod.string().describe('Event id as a string'),
	name: zod.string().describe('Name of the event'),
	type: zod
		.enum(['none', 'farming-weight', 'collection', 'experience', 'medals', 'pests'])
		.describe('Type of the event'),
	mode: zod.string().nullish().describe('Team mode of the event'),
	description: zod.string().nullish().describe('Event description'),
	rules: zod.string().nullish().describe('Event rules'),
	prizeInfo: zod.string().nullish().describe('Event prize information'),
	banner: zod
		.object({
			title: zod.string().max(getPublicGuildEventsResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPublicGuildEventsResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Image URL for the event banner'),
	startTime: zod.string().nullish().describe('Start time of the event as a string in Unix seconds'),
	joinUntilTime: zod.string().nullish().describe('Join time of the event as a string in Unix seconds'),
	endTime: zod.string().nullish().describe('End time of the event as a string in Unix seconds'),
	dynamicStartTime: zod.boolean().describe('Currently unused'),
	active: zod.boolean().describe('Event status'),
	approved: zod.boolean().describe('Event approval status'),
	maxTeams: zod.number().describe('Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited'),
	maxTeamMembers: zod.number().describe('Max amount of members allowed in a team, 0 if solo event, -1 if unlimited'),
	requiredRole: zod.string().nullish().describe('Discord role id required to participate in the event'),
	blockedRole: zod.string().nullish().describe('Discord role id blocked from participating in the event'),
	guildId: zod.string().nullish().describe('Discord server id as a string'),
	data: zod.any().nullish().describe('Data specific to the event'),
});
export const getPublicGuildEventsResponse = zod.array(getPublicGuildEventsResponseItem);

/**
 * @summary Modify guild jacob permissions
 */
export const setJacobFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setJacobFeatureQueryEnableDefault = true;
export const setJacobFeatureQueryMaxDefault = false;

export const setJacobFeatureQueryParams = zod.object({
	enable: zod.boolean().default(setJacobFeatureQueryEnableDefault),
	max: zod.number().nullish(),
});

/**
 * @summary Lock or unlock a guild
 */
export const setGuildLockedParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setGuildLockedQueryLockedDefault = true;

export const setGuildLockedQueryParams = zod.object({
	locked: zod
		.boolean()
		.default(setGuildLockedQueryLockedDefault)
		.describe("If server subscriptions shouldn't override feature values"),
});

/**
 * @summary Set a guild to public or private
 */
export const setGuildPublicParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setGuildPublicQueryPublicDefault = true;

export const setGuildPublicQueryParams = zod.object({
	public: zod.boolean().default(setGuildPublicQueryPublicDefault),
});

/**
 * @summary Get public guild
 */
export const getPublicGuildParams = zod.object({
	discordId: zod.number(),
});

export const getPublicGuildResponseIconTitleMax = 64;
export const getPublicGuildResponseIconDescriptionMax = 512;
export const getPublicGuildResponseBannerTitleMax = 64;
export const getPublicGuildResponseBannerDescriptionMax = 512;

export const getPublicGuildResponse = zod.object({
	id: zod.string(),
	name: zod.string(),
	icon: zod
		.object({
			title: zod.string().max(getPublicGuildResponseIconTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPublicGuildResponseIconDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	banner: zod
		.object({
			title: zod.string().max(getPublicGuildResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPublicGuildResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	inviteCode: zod.string().nullish(),
	description: zod.string().nullish(),
	memberCount: zod.number(),
	features: zod.object({
		jacobLeaderboardEnabled: zod.boolean(),
		jacobLeaderboard: zod
			.object({
				maxLeaderboards: zod.number(),
				blockedRoles: zod.array(
					zod.object({
						id: zod.string(),
						name: zod.string(),
						position: zod.number(),
						permissions: zod.number(),
					})
				),
				requiredRoles: zod.array(
					zod.object({
						id: zod.string(),
						name: zod.string(),
						position: zod.number(),
						permissions: zod.number(),
					})
				),
				excludedTimespans: zod.array(
					zod.object({
						start: zod.number(),
						end: zod.number(),
						reason: zod.string().nullish(),
					})
				),
				leaderboards: zod.array(
					zod.object({
						id: zod.string(),
						channelId: zod.string().nullish(),
						startCutoff: zod.number(),
						endCutoff: zod.number(),
						title: zod.string().nullish(),
						active: zod.boolean(),
						requiredRole: zod.string().nullish(),
						blockedRole: zod.string().nullish(),
						updateChannelId: zod.string().nullish(),
						updateRoleId: zod.string().nullish(),
						pingForSmallImprovements: zod.boolean(),
						crops: zod.object({
							cactus: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							carrot: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							potato: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							wheat: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							melon: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							pumpkin: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							mushroom: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							cocoaBeans: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							sugarCane: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
							netherWart: zod.array(
								zod.object({
									uuid: zod.string(),
									ign: zod.string(),
									discordId: zod.string(),
									record: zod.object({
										crop: zod.string(),
										timestamp: zod.number(),
										collected: zod.number(),
										position: zod.number(),
										participants: zod.number(),
										medal: zod.string().nullish(),
									}),
								})
							),
						}),
					})
				),
			})
			.nullish(),
		eventsEnabled: zod.boolean(),
		eventSettings: zod
			.object({
				maxMonthlyEvents: zod.number(),
				publicEventsEnabled: zod.boolean(),
				createdEvents: zod.array(
					zod.object({
						id: zod.string(),
						createdAt: zod.string().datetime({}),
					})
				),
			})
			.nullish(),
		contestPingsEnabled: zod.boolean(),
		contestPings: zod
			.object({
				enabled: zod.boolean(),
				guildId: zod.string().nullish(),
				channelId: zod.string().nullish(),
				alwaysPingRole: zod.string().nullish(),
				cropPingRoles: zod
					.object({
						cactus: zod.string().nullish(),
						carrot: zod.string().nullish(),
						potato: zod.string().nullish(),
						wheat: zod.string().nullish(),
						melon: zod.string().nullish(),
						pumpkin: zod.string().nullish(),
						mushroom: zod.string().nullish(),
						cocoaBeans: zod.string().nullish(),
						sugarCane: zod.string().nullish(),
						netherWart: zod.string().nullish(),
					})
					.nullish(),
				delaySeconds: zod.number(),
				disabledReason: zod.string().nullish(),
			})
			.nullish(),
	}),
});

/**
 * @summary Get public guilds
 */
export const getPublicGuildsResponseIconTitleMax = 64;
export const getPublicGuildsResponseIconDescriptionMax = 512;
export const getPublicGuildsResponseBannerTitleMax = 64;
export const getPublicGuildsResponseBannerDescriptionMax = 512;

export const getPublicGuildsResponseItem = zod.object({
	id: zod.string(),
	name: zod.string(),
	icon: zod
		.object({
			title: zod.string().max(getPublicGuildsResponseIconTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPublicGuildsResponseIconDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	banner: zod
		.object({
			title: zod.string().max(getPublicGuildsResponseBannerTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getPublicGuildsResponseBannerDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	inviteCode: zod.string().nullish(),
	memberCount: zod.number(),
});
export const getPublicGuildsResponse = zod.array(getPublicGuildsResponseItem);

/**
 * @summary Delete contest pings for a guild
 */
export const deleteContestPingsParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const deleteContestPingsQueryParams = zod.object({
	reason: zod.string().nullish(),
});

/**
 * @summary Update contest pings for a guild
 */
export const updateContestPingsParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateContestPingsBodyDisabledReasonMin = 0;

export const updateContestPingsBodyDisabledReasonMax = 128;

export const updateContestPingsBody = zod.object({
	enabled: zod.boolean().describe('Indicates whether the contest pings feature is enabled for the guild.'),
	channelId: zod.string().nullish().describe('Channel ID to send contest pings to.'),
	alwaysPingRole: zod.string().nullish().describe('Role ID to ping when a contest starts.'),
	cropPingRoles: zod
		.object({
			cactus: zod.string().nullish(),
			carrot: zod.string().nullish(),
			potato: zod.string().nullish(),
			wheat: zod.string().nullish(),
			melon: zod.string().nullish(),
			pumpkin: zod.string().nullish(),
			mushroom: zod.string().nullish(),
			cocoaBeans: zod.string().nullish(),
			sugarCane: zod.string().nullish(),
			netherWart: zod.string().nullish(),
		})
		.nullish()
		.describe('Individual roles to ping when a contest for a specific crop starts.'),
	delaySeconds: zod.number().describe('Not in use yet. Delay in seconds before sending the ping.'),
	disabledReason: zod
		.string()
		.min(updateContestPingsBodyDisabledReasonMin)
		.max(updateContestPingsBodyDisabledReasonMax)
		.nullish()
		.describe('Reason for disabling the feature.'),
});

/**
 * @summary Get guild memberships for the current user
 */
export const getUserGuildsResponseIconTitleMax = 64;
export const getUserGuildsResponseIconDescriptionMax = 512;

export const getUserGuildsResponseItem = zod.object({
	id: zod.string(),
	name: zod.string(),
	icon: zod
		.object({
			title: zod.string().max(getUserGuildsResponseIconTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getUserGuildsResponseIconDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	hasBot: zod.boolean(),
	permissions: zod.string(),
	roles: zod.array(zod.string()),
	admin: zod.boolean().nullish(),
});
export const getUserGuildsResponse = zod.array(getUserGuildsResponseItem);

/**
 * @summary Get a guild membership for the current user
 */
export const getUserGuildParams = zod.object({
	discordId: zod.number(),
});

export const getUserGuildResponseGuildFeaturesJacobLeaderboardLeaderboardsItemTitleMax = 64;
export const getUserGuildResponseGuildIconTitleMax = 64;
export const getUserGuildResponseGuildIconDescriptionMax = 512;
export const getUserGuildResponseGuildBannerTitleMax = 64;
export const getUserGuildResponseGuildBannerDescriptionMax = 512;
export const getUserGuildResponseMemberIconTitleMax = 64;
export const getUserGuildResponseMemberIconDescriptionMax = 512;

export const getUserGuildResponse = zod.object({
	id: zod.string(),
	permissions: zod.string(),
	guild: zod
		.object({
			id: zod.string(),
			name: zod.string(),
			public: zod.boolean(),
			features: zod.object({
				locked: zod.boolean(),
				jacobLeaderboardEnabled: zod.boolean(),
				jacobLeaderboard: zod
					.object({
						maxLeaderboards: zod.number(),
						blockedRoles: zod.array(
							zod.object({
								id: zod.string(),
								name: zod.string(),
								position: zod.number(),
								permissions: zod.number(),
							})
						),
						blockedUsers: zod.array(zod.number()),
						requiredRoles: zod.array(
							zod.object({
								id: zod.string(),
								name: zod.string(),
								position: zod.number(),
								permissions: zod.number(),
							})
						),
						excludedParticipations: zod.array(zod.string()),
						excludedTimespans: zod.array(
							zod.object({
								start: zod.number(),
								end: zod.number(),
								reason: zod.string().nullish(),
							})
						),
						leaderboards: zod.array(
							zod.object({
								id: zod.string(),
								channelId: zod.string().nullish(),
								startCutoff: zod.number(),
								endCutoff: zod.number(),
								title: zod
									.string()
									.max(getUserGuildResponseGuildFeaturesJacobLeaderboardLeaderboardsItemTitleMax)
									.nullish(),
								active: zod.boolean(),
								requiredRole: zod.string().nullish(),
								blockedRole: zod.string().nullish(),
								updateChannelId: zod.string().nullish(),
								updateRoleId: zod.string().nullish(),
								pingForSmallImprovements: zod.boolean(),
								crops: zod.object({
									cactus: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									carrot: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									potato: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									wheat: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									melon: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									pumpkin: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									mushroom: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									cocoaBeans: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									sugarCane: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
									netherWart: zod.array(
										zod.object({
											uuid: zod.string(),
											ign: zod.string(),
											discordId: zod.string(),
											record: zod.object({
												crop: zod.string(),
												timestamp: zod.number(),
												collected: zod.number(),
												position: zod.number(),
												participants: zod.number(),
												medal: zod.string().nullish(),
											}),
										})
									),
								}),
							})
						),
					})
					.nullish(),
				verifiedRoleEnabled: zod.boolean(),
				verifiedRole: zod
					.object({
						enabled: zod.boolean(),
						autoRoles: zod.array(
							zod.object({
								roleId: zod.string().nullish(),
								requiredWeight: zod.number(),
							})
						),
					})
					.nullish(),
				eventsEnabled: zod.boolean(),
				eventSettings: zod
					.object({
						maxMonthlyEvents: zod.number(),
						publicEventsEnabled: zod.boolean(),
						createdEvents: zod.array(
							zod.object({
								id: zod.string(),
								createdAt: zod.string().datetime({}),
							})
						),
					})
					.nullish(),
				contestPingsEnabled: zod.boolean(),
				contestPings: zod
					.object({
						enabled: zod.boolean(),
						channelId: zod.string().nullish(),
						alwaysPingRole: zod.string().nullish(),
						cropPingRoles: zod
							.object({
								cactus: zod.string().nullish(),
								carrot: zod.string().nullish(),
								potato: zod.string().nullish(),
								wheat: zod.string().nullish(),
								melon: zod.string().nullish(),
								pumpkin: zod.string().nullish(),
								mushroom: zod.string().nullish(),
								cocoaBeans: zod.string().nullish(),
								sugarCane: zod.string().nullish(),
								netherWart: zod.string().nullish(),
							})
							.nullish(),
						delaySeconds: zod.number(),
						disabledReason: zod.string().nullish(),
					})
					.nullish(),
			}),
			icon: zod
				.object({
					title: zod.string().max(getUserGuildResponseGuildIconTitleMax).nullish().describe('Image title'),
					description: zod
						.string()
						.max(getUserGuildResponseGuildIconDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish(),
			banner: zod
				.object({
					title: zod.string().max(getUserGuildResponseGuildBannerTitleMax).nullish().describe('Image title'),
					description: zod
						.string()
						.max(getUserGuildResponseGuildBannerDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish(),
			inviteCode: zod.string().nullish(),
			description: zod.string().nullish(),
			adminRole: zod.string().nullish(),
			botPermissions: zod.string().nullish(),
			botPermissionsNew: zod.string(),
			discordFeatures: zod.array(zod.string()),
			memberCount: zod.number(),
			channels: zod.array(
				zod.object({
					id: zod.string(),
					name: zod.string(),
					type: zod.number(),
					position: zod.number(),
				})
			),
			roles: zod.array(
				zod.object({
					id: zod.string(),
					name: zod.string(),
					position: zod.number(),
				})
			),
		})
		.nullish(),
	member: zod
		.object({
			id: zod.string(),
			name: zod.string(),
			icon: zod
				.object({
					title: zod.string().max(getUserGuildResponseMemberIconTitleMax).nullish().describe('Image title'),
					description: zod
						.string()
						.max(getUserGuildResponseMemberIconDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish(),
			hasBot: zod.boolean(),
			permissions: zod.string(),
			roles: zod.array(zod.string()),
			admin: zod.boolean().nullish(),
		})
		.nullish(),
});

/**
 * @summary Create a Jacob leaderboard
 */
export const createGuildJacobFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const createGuildJacobFeatureBodyTitleMin = 0;

export const createGuildJacobFeatureBodyTitleMax = 64;

export const createGuildJacobFeatureBody = zod.object({
	title: zod.string().min(createGuildJacobFeatureBodyTitleMin).max(createGuildJacobFeatureBodyTitleMax),
	channelId: zod.string().nullish(),
	startCutoff: zod.number().nullish(),
	endCutoff: zod.number().nullish(),
	active: zod.boolean().nullish(),
	requiredRole: zod.string().nullish(),
	blockedRole: zod.string().nullish(),
	updateChannelId: zod.string().nullish(),
	updateRoleId: zod.string().nullish(),
	pingForSmallImprovements: zod.boolean().nullish(),
});

/**
 * @summary Delete a Jacob leaderboard
 */
export const deleteGuildJacobFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	leaderboardId: zod.string(),
});

/**
 * @summary Update a Jacob leaderboard
 */
export const updateGuildJacobLeaderboardParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	leaderboardId: zod.string(),
});

export const updateGuildJacobLeaderboardBodyTitleMax = 64;

export const updateGuildJacobLeaderboardBody = zod.object({
	title: zod.string().max(updateGuildJacobLeaderboardBodyTitleMax).nullish(),
	channelId: zod.string().nullish(),
	startCutoff: zod.number().nullish(),
	endCutoff: zod.number().nullish(),
	active: zod.boolean().nullish(),
	requiredRole: zod.string().nullish(),
	blockedRole: zod.string().nullish(),
	updateChannelId: zod.string().nullish(),
	updateRoleId: zod.string().nullish(),
	pingForSmallImprovements: zod.boolean().nullish(),
});

/**
 * @summary Get Jacob leaderboards for a guild
 */
export const getGuildJacobParams = zod.object({
	discordId: zod.number(),
});

export const getGuildJacobResponseLeaderboardsItemTitleMax = 64;

export const getGuildJacobResponse = zod.object({
	maxLeaderboards: zod.number(),
	blockedRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	blockedUsers: zod.array(zod.number()),
	requiredRoles: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			position: zod.number(),
			permissions: zod.number(),
		})
	),
	excludedParticipations: zod.array(zod.string()),
	excludedTimespans: zod.array(
		zod.object({
			start: zod.number(),
			end: zod.number(),
			reason: zod.string().nullish(),
		})
	),
	leaderboards: zod.array(
		zod.object({
			id: zod.string(),
			channelId: zod.string().nullish(),
			startCutoff: zod.number(),
			endCutoff: zod.number(),
			title: zod.string().max(getGuildJacobResponseLeaderboardsItemTitleMax).nullish(),
			active: zod.boolean(),
			requiredRole: zod.string().nullish(),
			blockedRole: zod.string().nullish(),
			updateChannelId: zod.string().nullish(),
			updateRoleId: zod.string().nullish(),
			pingForSmallImprovements: zod.boolean(),
			crops: zod.object({
				cactus: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				carrot: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				potato: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				wheat: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				melon: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				pumpkin: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				mushroom: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				cocoaBeans: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				sugarCane: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
				netherWart: zod.array(
					zod.object({
						uuid: zod.string(),
						ign: zod.string(),
						discordId: zod.string(),
						record: zod.object({
							crop: zod.string(),
							timestamp: zod.number(),
							collected: zod.number(),
							position: zod.number(),
							participants: zod.number(),
							medal: zod.string().nullish(),
						}),
					})
				),
			}),
		})
	),
});

/**
 * @summary Update Jacob leaderboards for a guild
 */
export const updateGuildJacobFeatureParams = zod.object({
	discordId: zod.number(),
});

export const updateGuildJacobFeatureQueryParams = zod.object({
	reason: zod.string().nullish(),
});

export const updateGuildJacobFeatureBodyLeaderboardsItemTitleMax = 64;

export const updateGuildJacobFeatureBody = zod.object({
	blockedRoles: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				position: zod.number(),
				permissions: zod.number(),
			})
		)
		.describe("Blocked roles from participating in the guild's Jacob Leaderboards"),
	blockedUsers: zod
		.array(zod.number())
		.describe("Blocked users from participating in the guild's Jacob Leaderboards"),
	requiredRoles: zod
		.array(
			zod.object({
				id: zod.string(),
				name: zod.string(),
				position: zod.number(),
				permissions: zod.number(),
			})
		)
		.describe("Required roles to participate in the guild's Jacob Leaderboards"),
	excludedParticipations: zod
		.array(zod.string())
		.describe("Excluded participations from the guild's Jacob Leaderboards"),
	excludedTimespans: zod
		.array(
			zod.object({
				start: zod.number(),
				end: zod.number(),
				reason: zod.string().nullish(),
			})
		)
		.describe("Excluded timespans from the guild's Jacob Leaderboards"),
	leaderboards: zod
		.array(
			zod.object({
				id: zod.string(),
				channelId: zod.string().nullish(),
				startCutoff: zod.number(),
				endCutoff: zod.number(),
				title: zod.string().max(updateGuildJacobFeatureBodyLeaderboardsItemTitleMax).nullish(),
				active: zod.boolean(),
				requiredRole: zod.string().nullish(),
				blockedRole: zod.string().nullish(),
				updateChannelId: zod.string().nullish(),
				updateRoleId: zod.string().nullish(),
				pingForSmallImprovements: zod.boolean(),
				crops: zod.object({
					cactus: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					carrot: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					potato: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					wheat: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					melon: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					pumpkin: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					mushroom: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					cocoaBeans: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					sugarCane: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
					netherWart: zod.array(
						zod.object({
							uuid: zod.string(),
							ign: zod.string(),
							discordId: zod.string(),
							record: zod.object({
								crop: zod.string(),
								timestamp: zod.number(),
								collected: zod.number(),
								position: zod.number(),
								participants: zod.number(),
								medal: zod.string().nullish(),
							}),
						})
					),
				}),
			})
		)
		.describe("Leaderboards for the guild's Jacob Leaderboards"),
});

/**
 * @summary Send a Jacob leaderboard to Discord
 */
export const sendGuildJacobFeatureParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	leaderboardId: zod.string(),
});

/**
 * This fetches the latest data from Discord for the specified guild
 * @summary Request Guild Refresh
 */
export const requestGuildRefreshParams = zod.object({
	discordId: zod.number(),
});

/**
 * @summary Set an admin role for a guild
 */
export const setAdminRoleParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setAdminRoleBody = zod.string();

/**
 * @summary Set invite code for a guild
 */
export const setInviteParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const setInviteBody = zod.string();

/**
 * @summary Refresh Guild Purchases
 */
export const updateGuildPurchasesParams = zod.object({
	discordId: zod.number(),
});

/**
 * @summary Get Leaderboard
 */
export const getLeaderboardParams = zod.object({
	leaderboard: zod.string().describe('Id of leaderboard'),
});

export const getLeaderboardQueryOffsetDefault = 0;
export const getLeaderboardQueryLimitDefault = 20;
export const getLeaderboardQueryRemovedDefault = 0;
export const getLeaderboardQueryNewDefault = true;

export const getLeaderboardQueryParams = zod.object({
	offset: zod.number().nullish(),
	limit: zod.number().default(getLeaderboardQueryLimitDefault),
	interval: zod.string().nullish().describe('Time interval key of a monthly leaderboard. Format: yyyy-MM'),
	mode: zod
		.string()
		.nullish()
		.describe(
			'Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"'
		),
	removed: zod
		.union([zod.literal(0), zod.literal(1), zod.literal(2)])
		.nullish()
		.describe(
			'Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All'
		),
	new: zod
		.boolean()
		.default(getLeaderboardQueryNewDefault)
		.describe('Use new leaderboard backend (will be default in the future)'),
});

export const getLeaderboardResponseEntriesItemMetaPrefixMax = 16;
export const getLeaderboardResponseEntriesItemMetaSuffixMax = 16;

export const getLeaderboardResponse = zod.object({
	id: zod.string(),
	title: zod.string(),
	shortTitle: zod.string().nullish(),
	interval: zod.string().nullish(),
	limit: zod.number(),
	offset: zod.number(),
	maxEntries: zod.number(),
	minimumScore: zod.number().describe('The minimum score required to be on the leaderboard'),
	startsAt: zod.number(),
	endsAt: zod.number(),
	profile: zod.boolean(),
	entries: zod.array(
		zod.object({
			ign: zod.string().nullish().describe("Player's IGN if player leaderboard"),
			profile: zod.string().nullish().describe("Player's profile name if player leaderboard"),
			uuid: zod.string().describe('Uuid of the player or profile'),
			amount: zod.number().describe('Score of the entry'),
			removed: zod.boolean(),
			initialAmount: zod.number().describe('Initial score of the entry'),
			mode: zod
				.string()
				.nullish()
				.describe('Game mode of the entry. Classic profiles are considered default/null.'),
			members: zod
				.array(
					zod.object({
						ign: zod.string(),
						uuid: zod.string(),
						xp: zod.number().describe('Skyblock xp of the player (used for sorting)'),
						removed: zod.boolean(),
					})
				)
				.nullish(),
			meta: zod
				.object({
					prefix: zod.string().max(getLeaderboardResponseEntriesItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getLeaderboardResponseEntriesItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish()
				.describe('Metadata of the entry'),
		})
	),
});

/**
 * @summary Get leaderboards
 */
export const getLeaderboardsResponse = zod.object({
	leaderboards: zod.record(
		zod.string(),
		zod.object({
			title: zod.string().describe('Leaderboard title'),
			short: zod.string().nullish().describe('Leaderboard short title'),
			category: zod.string().describe('Leaderboard category'),
			profile: zod.boolean().describe('If true, the leaderboard is profile based'),
			minimumScore: zod.number().describe('Minimum score required to be on the leaderboard'),
			intervalType: zod
				.union([zod.literal(0), zod.literal(1), zod.literal(2)])
				.describe('Interval type of the leaderboard'),
			scoreDataType: zod
				.union([zod.literal(0), zod.literal(1), zod.literal(2)])
				.describe('Score data type of the leaderboard'),
		})
	),
});

/**
 * @summary Get a Player's Leaderboard Ranks
 */
export const getPlayerLeaderboardRanksParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getPlayerLeaderboardRanksQueryParams = zod.object({
	max: zod
		.number()
		.nullish()
		.describe("Maximum rank number to return. Used if you don't want ranks higher than a certain number."),
});

export const getPlayerLeaderboardRanksResponse = zod.object({
	ranks: zod.record(
		zod.string(),
		zod.object({
			title: zod.string(),
			short: zod.string().nullish(),
			slug: zod.string(),
			profile: zod.boolean().nullish(),
			rank: zod.number(),
			intervalIdentifier: zod.string().nullish(),
			amount: zod.number(),
			initialAmount: zod.number(),
			type: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]),
		})
	),
});

/**
 * @summary Get a Player's Leaderboard Rank
 */
export const getPlayerRank1Params = zod.object({
	leaderboard: zod.string().describe('Id of leaderboard'),
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getPlayerRank1QueryIncludeUpcomingDefault = false;
export const getPlayerRank1QueryUpcomingDefault = 0;
export const getPlayerRank1QueryNewDefault = true;
export const getPlayerRank1QueryRemovedDefault = 0;

export const getPlayerRank1QueryParams = zod.object({
	includeUpcoming: zod.boolean().nullish().describe('Include upcoming players'),
	upcoming: zod
		.number()
		.nullish()
		.describe('Amount of upcoming players to include (max 100). Only works with new leaderboard backend'),
	atRank: zod.number().nullish().describe('Start at a specified rank for upcoming players'),
	new: zod
		.boolean()
		.default(getPlayerRank1QueryNewDefault)
		.describe('Use new leaderboard backend (will be removed in the future)'),
	interval: zod.string().nullish().describe('Time interval key of a monthly leaderboard. Format: yyyy-MM'),
	mode: zod
		.string()
		.nullish()
		.describe(
			'Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"'
		),
	removed: zod
		.union([zod.literal(0), zod.literal(1), zod.literal(2)])
		.nullish()
		.describe(
			'Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All'
		),
});

export const getPlayerRank1ResponseUpcomingPlayersItemMetaPrefixMax = 16;
export const getPlayerRank1ResponseUpcomingPlayersItemMetaSuffixMax = 16;

export const getPlayerRank1Response = zod.object({
	rank: zod.number().describe('Current rank of the player (-1 if not on leaderboard)'),
	amount: zod.number().describe('Current score of the player (0 if not on leaderboard)'),
	initialAmount: zod
		.number()
		.describe('The starting amount of the leaderboard entry for interval based leaderboards'),
	minAmount: zod
		.number()
		.describe(
			'The minimum amount required to be on the leaderboard. If this is a time based leaderboard,\nthis score is instead required on the normal leaderboard before the player can be on the\ntime based leaderboard'
		),
	upcomingRank: zod.number().describe('The starting rank of the returned upcoming players list'),
	upcomingPlayers: zod
		.array(
			zod.object({
				ign: zod.string().nullish().describe("Player's IGN if player leaderboard"),
				profile: zod.string().nullish().describe("Player's profile name if player leaderboard"),
				uuid: zod.string().describe('Uuid of the player or profile'),
				amount: zod.number().describe('Score of the entry'),
				removed: zod.boolean(),
				initialAmount: zod.number().describe('Initial score of the entry'),
				mode: zod
					.string()
					.nullish()
					.describe('Game mode of the entry. Classic profiles are considered default/null.'),
				members: zod
					.array(
						zod.object({
							ign: zod.string(),
							uuid: zod.string(),
							xp: zod.number().describe('Skyblock xp of the player (used for sorting)'),
							removed: zod.boolean(),
						})
					)
					.nullish(),
				meta: zod
					.object({
						prefix: zod.string().max(getPlayerRank1ResponseUpcomingPlayersItemMetaPrefixMax).nullish(),
						suffix: zod.string().max(getPlayerRank1ResponseUpcomingPlayersItemMetaSuffixMax).nullish(),
						leaderboard: zod
							.object({
								styleId: zod.number().nullish(),
								backgroundColor: zod.string().nullish(),
								borderColor: zod.string().nullish(),
								textColor: zod.string().nullish(),
								rankColor: zod.string().nullish(),
								backgroundImage: zod.string().nullish(),
								overlayImage: zod.string().nullish(),
							})
							.nullish(),
					})
					.nullish()
					.describe('Metadata of the entry'),
			})
		)
		.nullish()
		.describe('List of upcoming players'),
});

/**
 * @summary Get a Player's Leaderboard Rank
 */
export const getPlayerRank2Params = zod.object({
	leaderboard: zod.string(),
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getPlayerRank2QueryIncludeUpcomingDefault = false;
export const getPlayerRank2QueryUpcomingDefault = 0;
export const getPlayerRank2QueryNewDefault = true;
export const getPlayerRank2QueryRemovedDefault = 0;

export const getPlayerRank2QueryParams = zod.object({
	includeUpcoming: zod.boolean().nullish(),
	upcoming: zod.number().nullish(),
	atRank: zod.number().nullish(),
	new: zod.boolean().default(getPlayerRank2QueryNewDefault),
	interval: zod.string().nullish(),
	mode: zod.string().nullish(),
	removed: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]).nullish(),
});

export const getPlayerRank2ResponseUpcomingPlayersItemMetaPrefixMax = 16;
export const getPlayerRank2ResponseUpcomingPlayersItemMetaSuffixMax = 16;

export const getPlayerRank2Response = zod.object({
	rank: zod.number().describe('Current rank of the player (-1 if not on leaderboard)'),
	amount: zod.number().describe('Current score of the player (0 if not on leaderboard)'),
	initialAmount: zod
		.number()
		.describe('The starting amount of the leaderboard entry for interval based leaderboards'),
	minAmount: zod
		.number()
		.describe(
			'The minimum amount required to be on the leaderboard. If this is a time based leaderboard,\nthis score is instead required on the normal leaderboard before the player can be on the\ntime based leaderboard'
		),
	upcomingRank: zod.number().describe('The starting rank of the returned upcoming players list'),
	upcomingPlayers: zod
		.array(
			zod.object({
				ign: zod.string().nullish().describe("Player's IGN if player leaderboard"),
				profile: zod.string().nullish().describe("Player's profile name if player leaderboard"),
				uuid: zod.string().describe('Uuid of the player or profile'),
				amount: zod.number().describe('Score of the entry'),
				removed: zod.boolean(),
				initialAmount: zod.number().describe('Initial score of the entry'),
				mode: zod
					.string()
					.nullish()
					.describe('Game mode of the entry. Classic profiles are considered default/null.'),
				members: zod
					.array(
						zod.object({
							ign: zod.string(),
							uuid: zod.string(),
							xp: zod.number().describe('Skyblock xp of the player (used for sorting)'),
							removed: zod.boolean(),
						})
					)
					.nullish(),
				meta: zod
					.object({
						prefix: zod.string().max(getPlayerRank2ResponseUpcomingPlayersItemMetaPrefixMax).nullish(),
						suffix: zod.string().max(getPlayerRank2ResponseUpcomingPlayersItemMetaSuffixMax).nullish(),
						leaderboard: zod
							.object({
								styleId: zod.number().nullish(),
								backgroundColor: zod.string().nullish(),
								borderColor: zod.string().nullish(),
								textColor: zod.string().nullish(),
								rankColor: zod.string().nullish(),
								backgroundImage: zod.string().nullish(),
								overlayImage: zod.string().nullish(),
							})
							.nullish(),
					})
					.nullish()
					.describe('Metadata of the entry'),
			})
		)
		.nullish()
		.describe('List of upcoming players'),
});

/**
 * @deprecated
 * @summary Get a Player's Leaderboard Ranks
 */
export const getPlayerRanksParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getPlayerRanksResponse = zod.object({
	misc: zod.record(zod.string(), zod.number()),
	skills: zod.record(zod.string(), zod.number()),
	collections: zod.record(zod.string(), zod.number()),
	pests: zod.record(zod.string(), zod.number()),
	profile: zod.record(zod.string(), zod.number()),
});

/**
 * @summary Get a Profiles's Leaderboard Rank
 */
export const getProfileRank1Params = zod.object({
	leaderboard: zod.string().describe('Id of leaderboard'),
	profileUuid: zod.string(),
});

export const getProfileRank1QueryIncludeUpcomingDefault = false;
export const getProfileRank1QueryUpcomingDefault = 0;
export const getProfileRank1QueryNewDefault = true;
export const getProfileRank1QueryRemovedDefault = 0;

export const getProfileRank1QueryParams = zod.object({
	includeUpcoming: zod.boolean().nullish().describe('Include upcoming players'),
	upcoming: zod
		.number()
		.nullish()
		.describe('Amount of upcoming players to include (max 100). Only works with new leaderboard backend'),
	atRank: zod.number().nullish().describe('Start at a specified rank for upcoming players'),
	new: zod
		.boolean()
		.default(getProfileRank1QueryNewDefault)
		.describe('Use new leaderboard backend (will be default in the future)'),
	interval: zod.string().nullish().describe('Time interval key of a monthly leaderboard. Format: yyyy-MM'),
	mode: zod
		.string()
		.nullish()
		.describe(
			'Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"'
		),
	removed: zod
		.union([zod.literal(0), zod.literal(1), zod.literal(2)])
		.nullish()
		.describe(
			'Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All'
		),
});

export const getProfileRank1ResponseUpcomingPlayersItemMetaPrefixMax = 16;
export const getProfileRank1ResponseUpcomingPlayersItemMetaSuffixMax = 16;

export const getProfileRank1Response = zod.object({
	rank: zod.number().describe('Current rank of the player (-1 if not on leaderboard)'),
	amount: zod.number().describe('Current score of the player (0 if not on leaderboard)'),
	initialAmount: zod
		.number()
		.describe('The starting amount of the leaderboard entry for interval based leaderboards'),
	minAmount: zod
		.number()
		.describe(
			'The minimum amount required to be on the leaderboard. If this is a time based leaderboard,\nthis score is instead required on the normal leaderboard before the player can be on the\ntime based leaderboard'
		),
	upcomingRank: zod.number().describe('The starting rank of the returned upcoming players list'),
	upcomingPlayers: zod
		.array(
			zod.object({
				ign: zod.string().nullish().describe("Player's IGN if player leaderboard"),
				profile: zod.string().nullish().describe("Player's profile name if player leaderboard"),
				uuid: zod.string().describe('Uuid of the player or profile'),
				amount: zod.number().describe('Score of the entry'),
				removed: zod.boolean(),
				initialAmount: zod.number().describe('Initial score of the entry'),
				mode: zod
					.string()
					.nullish()
					.describe('Game mode of the entry. Classic profiles are considered default/null.'),
				members: zod
					.array(
						zod.object({
							ign: zod.string(),
							uuid: zod.string(),
							xp: zod.number().describe('Skyblock xp of the player (used for sorting)'),
							removed: zod.boolean(),
						})
					)
					.nullish(),
				meta: zod
					.object({
						prefix: zod.string().max(getProfileRank1ResponseUpcomingPlayersItemMetaPrefixMax).nullish(),
						suffix: zod.string().max(getProfileRank1ResponseUpcomingPlayersItemMetaSuffixMax).nullish(),
						leaderboard: zod
							.object({
								styleId: zod.number().nullish(),
								backgroundColor: zod.string().nullish(),
								borderColor: zod.string().nullish(),
								textColor: zod.string().nullish(),
								rankColor: zod.string().nullish(),
								backgroundImage: zod.string().nullish(),
								overlayImage: zod.string().nullish(),
							})
							.nullish(),
					})
					.nullish()
					.describe('Metadata of the entry'),
			})
		)
		.nullish()
		.describe('List of upcoming players'),
});

/**
 * @summary Get a Profiles's Leaderboard Rank
 */
export const getProfileRank2Params = zod.object({
	leaderboard: zod.string(),
	profileUuid: zod.string(),
});

export const getProfileRank2QueryIncludeUpcomingDefault = false;
export const getProfileRank2QueryUpcomingDefault = 0;
export const getProfileRank2QueryNewDefault = true;
export const getProfileRank2QueryRemovedDefault = 0;

export const getProfileRank2QueryParams = zod.object({
	includeUpcoming: zod.boolean().nullish(),
	upcoming: zod.number().nullish(),
	atRank: zod.number().nullish(),
	new: zod.boolean().default(getProfileRank2QueryNewDefault),
	interval: zod.string().nullish(),
	mode: zod.string().nullish(),
	removed: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]).nullish(),
});

export const getProfileRank2ResponseUpcomingPlayersItemMetaPrefixMax = 16;
export const getProfileRank2ResponseUpcomingPlayersItemMetaSuffixMax = 16;

export const getProfileRank2Response = zod.object({
	rank: zod.number().describe('Current rank of the player (-1 if not on leaderboard)'),
	amount: zod.number().describe('Current score of the player (0 if not on leaderboard)'),
	initialAmount: zod
		.number()
		.describe('The starting amount of the leaderboard entry for interval based leaderboards'),
	minAmount: zod
		.number()
		.describe(
			'The minimum amount required to be on the leaderboard. If this is a time based leaderboard,\nthis score is instead required on the normal leaderboard before the player can be on the\ntime based leaderboard'
		),
	upcomingRank: zod.number().describe('The starting rank of the returned upcoming players list'),
	upcomingPlayers: zod
		.array(
			zod.object({
				ign: zod.string().nullish().describe("Player's IGN if player leaderboard"),
				profile: zod.string().nullish().describe("Player's profile name if player leaderboard"),
				uuid: zod.string().describe('Uuid of the player or profile'),
				amount: zod.number().describe('Score of the entry'),
				removed: zod.boolean(),
				initialAmount: zod.number().describe('Initial score of the entry'),
				mode: zod
					.string()
					.nullish()
					.describe('Game mode of the entry. Classic profiles are considered default/null.'),
				members: zod
					.array(
						zod.object({
							ign: zod.string(),
							uuid: zod.string(),
							xp: zod.number().describe('Skyblock xp of the player (used for sorting)'),
							removed: zod.boolean(),
						})
					)
					.nullish(),
				meta: zod
					.object({
						prefix: zod.string().max(getProfileRank2ResponseUpcomingPlayersItemMetaPrefixMax).nullish(),
						suffix: zod.string().max(getProfileRank2ResponseUpcomingPlayersItemMetaSuffixMax).nullish(),
						leaderboard: zod
							.object({
								styleId: zod.number().nullish(),
								backgroundColor: zod.string().nullish(),
								borderColor: zod.string().nullish(),
								textColor: zod.string().nullish(),
								rankColor: zod.string().nullish(),
								backgroundImage: zod.string().nullish(),
								overlayImage: zod.string().nullish(),
							})
							.nullish(),
					})
					.nullish()
					.describe('Metadata of the entry'),
			})
		)
		.nullish()
		.describe('List of upcoming players'),
});

/**
 * @summary Get all entitlements for a user or guild
 */
export const getEntitlementsParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const getEntitlementsQueryParams = zod.object({
	target: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]).nullish(),
});

export const getEntitlementsResponseProductWeightStylesItemNameMax = 64;
export const getEntitlementsResponseProductThumbnailTitleMax = 64;
export const getEntitlementsResponseProductThumbnailDescriptionMax = 512;
export const getEntitlementsResponseProductImagesItemTitleMax = 64;
export const getEntitlementsResponseProductImagesItemDescriptionMax = 512;

export const getEntitlementsResponseItem = zod.object({
	id: zod.string().describe('Entitlement ID'),
	type: zod
		.union([
			zod.literal(1),
			zod.literal(2),
			zod.literal(3),
			zod.literal(4),
			zod.literal(5),
			zod.literal(6),
			zod.literal(7),
			zod.literal(8),
		])
		.describe('Type of entitlement'),
	target: zod
		.union([zod.literal(0), zod.literal(1), zod.literal(2)])
		.describe('Target of entitlement.\n0 = None\n1 = User\n2 = Guild'),
	productId: zod.string().describe('SKU ID of the product'),
	product: zod
		.object({
			id: zod.string().describe('Product ID'),
			name: zod.string().describe('Product name'),
			slug: zod.string().describe('Slug of the product'),
			price: zod.number().describe('Product price'),
			description: zod.string().nullish().describe('Product description'),
			available: zod.boolean().describe('If the product is available for purchase'),
			type: zod
				.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
				.describe('Type of product'),
			features: zod
				.object({
					badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
					weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
					weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
					embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
					hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
					moreInfoDefault: zod
						.boolean()
						.nullish()
						.describe('Show \"More Info\" on weight command by default.'),
					customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
					maxMonthlyEvents: zod
						.number()
						.nullish()
						.describe('Maximum number of events that can be created in a month. (For guilds)'),
					maxJacobLeaderboards: zod
						.number()
						.nullish()
						.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
				})
				.describe('Features of the product'),
			weightStyles: zod
				.array(
					zod.object({
						id: zod.number(),
						name: zod.string().max(getEntitlementsResponseProductWeightStylesItemNameMax).nullish(),
					})
				)
				.describe('Unlocked weight styles'),
			thumbnail: zod
				.object({
					title: zod
						.string()
						.max(getEntitlementsResponseProductThumbnailTitleMax)
						.nullish()
						.describe('Image title'),
					description: zod
						.string()
						.max(getEntitlementsResponseProductThumbnailDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish()
				.describe('Product thumbnail'),
			images: zod
				.array(
					zod.object({
						title: zod
							.string()
							.max(getEntitlementsResponseProductImagesItemTitleMax)
							.nullish()
							.describe('Image title'),
						description: zod
							.string()
							.max(getEntitlementsResponseProductImagesItemDescriptionMax)
							.nullish()
							.describe('Image description'),
						order: zod.number().nullish().describe('Image ordering number'),
						url: zod.string().describe('Full image URL'),
					})
				)
				.describe('Product Images'),
			flags: zod.number().describe('Discord flags'),
			isSubscription: zod.boolean(),
			isGuildSubscription: zod.boolean(),
			isUserSubscription: zod.boolean(),
		})
		.describe('Product details'),
	deleted: zod.boolean(),
	consumed: zod.boolean().nullish().describe('Consumed status of the entitlement if applicable'),
	startDate: zod.string().datetime({}).nullish().describe('Start date of the entitlement'),
	endDate: zod.string().datetime({}).nullish().describe('End date of the entitlement'),
});
export const getEntitlementsResponse = zod.array(getEntitlementsResponseItem);

/**
 * This passes along a request to Discord to grant a test entitlement to a user or guild, which only works on subscription products.
 * @summary Grant a test entitlement to a user or guild
 */
export const grantTestEntitlementParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	productId: zod.number(),
});

export const grantTestEntitlementQueryParams = zod.object({
	target: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]).nullish(),
});

/**
 * This passes along a request to Discord to remove a test entitlement from a user or guild.
 * @summary Remove a test entitlement from a user or guild
 */
export const removeTestEntitlementParams = zod.object({
	discordId: zod.number(),
	productId: zod.number(),
});

export const removeTestEntitlementQueryParams = zod.object({
	target: zod.union([zod.literal(0), zod.literal(1), zod.literal(2)]).nullish(),
});

/**
 * @summary Get Linked Accounts
 */
export const getLinkedAccountsParams = zod.object({
	discordId: zod.number(),
});

export const getLinkedAccountsResponse = zod.object({
	selectedUuid: zod.string().nullish(),
	players: zod.array(
		zod.object({
			uuid: zod.string(),
			displayname: zod.string().nullish(),
			firstLogin: zod.number(),
			lastLogin: zod.number(),
			lastLogout: zod.number(),
			karma: zod.number(),
			networkExp: zod.number(),
			rewardHighScore: zod.number(),
			rewardScore: zod.number(),
			rewardStreak: zod.number(),
			totalDailyRewards: zod.number(),
			totalRewards: zod.number(),
			prefix: zod.string().nullish(),
			rank: zod.string().nullish(),
			newPackageRank: zod.string().nullish(),
			rankPlusColor: zod.string().nullish(),
			monthlyPackageRank: zod.string().nullish(),
			mostRecentMonthlyPackageRank: zod.string().nullish(),
			monthlyRankColor: zod.string().nullish(),
			socialMedia: zod
				.object({
					discord: zod.string().nullish(),
					hypixel: zod.string().nullish(),
					youtube: zod.string().nullish(),
				})
				.nullish(),
		})
	),
});

/**
 * @summary Get Player Data
 */
export const getPlayerDataParams = zod.object({
	player: zod.string(),
});

export const getPlayerDataResponse = zod.object({
	uuid: zod.string(),
	displayname: zod.string().nullish(),
	firstLogin: zod.number(),
	lastLogin: zod.number(),
	lastLogout: zod.number(),
	karma: zod.number(),
	networkExp: zod.number(),
	rewardHighScore: zod.number(),
	rewardScore: zod.number(),
	rewardStreak: zod.number(),
	totalDailyRewards: zod.number(),
	totalRewards: zod.number(),
	prefix: zod.string().nullish(),
	rank: zod.string().nullish(),
	newPackageRank: zod.string().nullish(),
	rankPlusColor: zod.string().nullish(),
	monthlyPackageRank: zod.string().nullish(),
	mostRecentMonthlyPackageRank: zod.string().nullish(),
	monthlyRankColor: zod.string().nullish(),
	socialMedia: zod
		.object({
			discord: zod.string().nullish(),
			hypixel: zod.string().nullish(),
			youtube: zod.string().nullish(),
		})
		.nullish(),
});

/**
 * @summary Get All Profile Details
 */
export const getAllProfileDetailsParams = zod.object({
	playerUuid: zod.string(),
});

export const getAllProfileDetailsResponseMembersItemMetaPrefixMax = 16;
export const getAllProfileDetailsResponseMembersItemMetaSuffixMax = 16;

export const getAllProfileDetailsResponseItem = zod.object({
	profileId: zod.string(),
	profileName: zod.string(),
	gameMode: zod.string(),
	selected: zod.boolean(),
	bankBalance: zod.number(),
	deleted: zod.boolean(),
	members: zod.array(
		zod.object({
			uuid: zod.string(),
			username: zod.string(),
			profileName: zod.string().nullish(),
			active: zod.boolean(),
			farmingWeight: zod.number(),
			meta: zod
				.object({
					prefix: zod.string().max(getAllProfileDetailsResponseMembersItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getAllProfileDetailsResponseMembersItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish(),
		})
	),
});
export const getAllProfileDetailsResponse = zod.array(getAllProfileDetailsResponseItem);

/**
 * @summary Get Profile Member
 */
export const getProfileParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getProfileResponseMetaPrefixMax = 16;
export const getProfileResponseMetaSuffixMax = 16;

export const getProfileResponse = zod.object({
	profileId: zod.string(),
	playerUuid: zod.string(),
	profileName: zod.string(),
	api: zod.object({
		inventories: zod.boolean(),
		collections: zod.boolean(),
		skills: zod.boolean(),
		vault: zod.boolean(),
	}),
	skyblockXp: zod.number(),
	purse: zod.number(),
	bankBalance: zod.number(),
	meta: zod
		.object({
			prefix: zod.string().max(getProfileResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getProfileResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish(),
	collections: zod.record(zod.string(), zod.number()),
	collectionTiers: zod.record(zod.string(), zod.number()),
	craftedMinions: zod.record(zod.string(), zod.number()),
	pets: zod.array(
		zod.object({
			uuid: zod.string().nullish(),
			type: zod.string(),
			exp: zod.number(),
			active: zod.boolean(),
			tier: zod.string().nullish(),
			heldItem: zod.string().nullish(),
			candyUsed: zod.number(),
			skin: zod.string().nullish(),
			level: zod.number(),
		})
	),
	unparsed: zod.object({
		copper: zod.number(),
		consumed: zod.record(zod.string(), zod.number()),
		levelCaps: zod.record(zod.string(), zod.number()),
		perks: zod.record(zod.string(), zod.number()).nullish(),
		tempStatBuffs: zod
			.array(
				zod.object({
					stat: zod.number(),
					key: zod.string().nullish(),
					amount: zod.number(),
					expire_at: zod.number(),
				})
			)
			.nullish(),
		accessoryBagSettings: zod.any().nullish(),
		bestiary: zod.any().nullish(),
	}),
	jacob: zod.object({
		medals: zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
		}),
		earnedMedals: zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
			platinum: zod.number(),
			diamond: zod.number(),
		}),
		perks: zod.object({
			doubleDrops: zod.number(),
			levelCap: zod.number(),
		}),
		stats: zod.object({
			brackets: zod.record(
				zod.string(),
				zod.union([
					zod.literal(0),
					zod.literal(1),
					zod.literal(2),
					zod.literal(3),
					zod.literal(4),
					zod.literal(5),
				])
			),
			personalBests: zod.record(zod.string(), zod.number()),
			crops: zod.record(
				zod.string(),
				zod.object({
					participations: zod.number(),
					firstPlaceScores: zod.number(),
					personalBestTimestamp: zod.number().nullish(),
					medals: zod.object({
						bronze: zod.number(),
						silver: zod.number(),
						gold: zod.number(),
						platinum: zod.number(),
						diamond: zod.number(),
					}),
				})
			),
		}),
		participations: zod.number(),
		firstPlaceScores: zod.number(),
		contests: zod.array(
			zod.object({
				crop: zod.string(),
				timestamp: zod.number(),
				collected: zod.number(),
				position: zod.number(),
				participants: zod.number(),
				medal: zod.string().nullish(),
			})
		),
	}),
	farmingWeight: zod.object({
		totalWeight: zod.number(),
		crops: zod.record(zod.string(), zod.number()).nullish(),
		cropWeight: zod.record(zod.string(), zod.number()),
		bonusWeight: zod.record(zod.string(), zod.number()),
		uncountedCrops: zod.record(zod.string(), zod.number()),
		pests: zod.object({
			beetle: zod.number(),
			cricket: zod.number(),
			fly: zod.number(),
			locust: zod.number(),
			mite: zod.number(),
			mosquito: zod.number(),
			moth: zod.number(),
			rat: zod.number(),
			slug: zod.number(),
			earthworm: zod.number(),
			mouse: zod.number().nullish(),
		}),
		inventory: zod
			.object({
				armor: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				tools: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				equipment: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				accessories: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
			})
			.nullish(),
		lastUpdated: zod.number(),
	}),
	garden: zod
		.object({
			profileId: zod.string().describe('Profile ID'),
			experience: zod.number().describe('Garden experience'),
			completedVisitors: zod.number().describe('Total completed visitors'),
			uniqueVisitors: zod.number().describe('Unique visitors unlocked'),
			crops: zod
				.object({
					cactus: zod.string().nullish(),
					carrot: zod.string().nullish(),
					potato: zod.string().nullish(),
					wheat: zod.string().nullish(),
					melon: zod.string().nullish(),
					pumpkin: zod.string().nullish(),
					mushroom: zod.string().nullish(),
					cocoaBeans: zod.string().nullish(),
					sugarCane: zod.string().nullish(),
					netherWart: zod.string().nullish(),
				})
				.describe('Crops counted towards milestones'),
			cropUpgrades: zod
				.object({
					cactus: zod.number(),
					carrot: zod.number(),
					potato: zod.number(),
					wheat: zod.number(),
					melon: zod.number(),
					pumpkin: zod.number(),
					mushroom: zod.number(),
					cocoaBeans: zod.number(),
					sugarCane: zod.number(),
					netherWart: zod.number(),
				})
				.describe('Crop upgrades'),
			plots: zod.array(zod.string()).describe('List of unlocked plots'),
			composter: zod
				.object({
					organic_matter: zod.number(),
					fuel_units: zod.number(),
					compost_units: zod.number(),
					compost_items: zod.number(),
					conversion_ticks: zod.number(),
					last_save: zod.number(),
					upgrades: zod.object({
						speed: zod.number(),
						multi_drop: zod.number(),
						fuel_cap: zod.number(),
						organic_matter_cap: zod.number(),
						cost_reduction: zod.number(),
					}),
					lastSave: zod.number().describe('Last save time in unix seconds'),
				})
				.describe('Composter data'),
			visitors: zod
				.record(
					zod.string(),
					zod.object({
						visits: zod.number(),
						accepted: zod.number(),
					})
				)
				.describe('Visitor data'),
			lastSave: zod.string().describe('Last save time in unix seconds'),
		})
		.nullish(),
	skills: zod.object({
		farming: zod.number(),
		mining: zod.number(),
		combat: zod.number(),
		foraging: zod.number(),
		fishing: zod.number(),
		enchanting: zod.number(),
		alchemy: zod.number(),
		carpentry: zod.number(),
		runecrafting: zod.number(),
		taming: zod.number(),
		social: zod.number(),
	}),
	chocolateFactory: zod.object({
		chocolate: zod.number(),
		totalChocolate: zod.number(),
		chocolateSincePrestige: zod.number(),
		chocolateSpent: zod.number(),
		prestige: zod.number(),
		lastViewed: zod.number(),
		uniqueRabbits: zod.object({
			common: zod.number(),
			uncommon: zod.number(),
			rare: zod.number(),
			epic: zod.number(),
			legendary: zod.number(),
			mythic: zod.number(),
			divine: zod.number(),
		}),
		totalRabbits: zod.object({
			common: zod.number(),
			uncommon: zod.number(),
			rare: zod.number(),
			epic: zod.number(),
			legendary: zod.number(),
			mythic: zod.number(),
			divine: zod.number(),
		}),
		unlockedZorro: zod.boolean(),
		refinedTrufflesConsumed: zod.number(),
		cocoaFortuneUpgrades: zod.number(),
	}),
	events: zod.array(
		zod.object({
			eventId: zod.string(),
			eventName: zod.string(),
			teamId: zod.string().nullish(),
			status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
			rank: zod.number().describe('Currently not populated'),
			score: zod.string().nullish(),
		})
	),
	isSelected: zod.boolean(),
	wasRemoved: zod.boolean(),
	lastUpdated: zod.number(),
});

/**
 * @summary Get Profile Details
 */
export const getProfileDetailsParams = zod.object({
	profileUuid: zod.string(),
});

export const getProfileDetailsResponseMembersItemMetaPrefixMax = 16;
export const getProfileDetailsResponseMembersItemMetaSuffixMax = 16;

export const getProfileDetailsResponse = zod.object({
	profileId: zod.string(),
	profileName: zod.string(),
	gameMode: zod.string(),
	selected: zod.boolean(),
	bankBalance: zod.number(),
	deleted: zod.boolean(),
	members: zod.array(
		zod.object({
			uuid: zod.string(),
			username: zod.string(),
			profileName: zod.string().nullish(),
			active: zod.boolean(),
			farmingWeight: zod.number(),
			meta: zod
				.object({
					prefix: zod.string().max(getProfileDetailsResponseMembersItemMetaPrefixMax).nullish(),
					suffix: zod.string().max(getProfileDetailsResponseMembersItemMetaSuffixMax).nullish(),
					leaderboard: zod
						.object({
							styleId: zod.number().nullish(),
							backgroundColor: zod.string().nullish(),
							borderColor: zod.string().nullish(),
							textColor: zod.string().nullish(),
							rankColor: zod.string().nullish(),
							backgroundImage: zod.string().nullish(),
							overlayImage: zod.string().nullish(),
						})
						.nullish(),
				})
				.nullish(),
		})
	),
});

/**
 * @summary Get names of a player's profiles
 */
export const getProfileNamesParams = zod.object({
	player: zod.string(),
});

export const getProfileNamesResponseItem = zod.object({
	id: zod.string(),
	name: zod.string(),
	selected: zod.boolean(),
});
export const getProfileNamesResponse = zod.array(getProfileNamesResponseItem);

/**
 * @summary Get Profile Member
 */
export const getSelectedProfileParams = zod.object({
	playerUuid: zod.string(),
});

export const getSelectedProfileResponseMetaPrefixMax = 16;
export const getSelectedProfileResponseMetaSuffixMax = 16;

export const getSelectedProfileResponse = zod.object({
	profileId: zod.string(),
	playerUuid: zod.string(),
	profileName: zod.string(),
	api: zod.object({
		inventories: zod.boolean(),
		collections: zod.boolean(),
		skills: zod.boolean(),
		vault: zod.boolean(),
	}),
	skyblockXp: zod.number(),
	purse: zod.number(),
	bankBalance: zod.number(),
	meta: zod
		.object({
			prefix: zod.string().max(getSelectedProfileResponseMetaPrefixMax).nullish(),
			suffix: zod.string().max(getSelectedProfileResponseMetaSuffixMax).nullish(),
			leaderboard: zod
				.object({
					styleId: zod.number().nullish(),
					backgroundColor: zod.string().nullish(),
					borderColor: zod.string().nullish(),
					textColor: zod.string().nullish(),
					rankColor: zod.string().nullish(),
					backgroundImage: zod.string().nullish(),
					overlayImage: zod.string().nullish(),
				})
				.nullish(),
		})
		.nullish(),
	collections: zod.record(zod.string(), zod.number()),
	collectionTiers: zod.record(zod.string(), zod.number()),
	craftedMinions: zod.record(zod.string(), zod.number()),
	pets: zod.array(
		zod.object({
			uuid: zod.string().nullish(),
			type: zod.string(),
			exp: zod.number(),
			active: zod.boolean(),
			tier: zod.string().nullish(),
			heldItem: zod.string().nullish(),
			candyUsed: zod.number(),
			skin: zod.string().nullish(),
			level: zod.number(),
		})
	),
	unparsed: zod.object({
		copper: zod.number(),
		consumed: zod.record(zod.string(), zod.number()),
		levelCaps: zod.record(zod.string(), zod.number()),
		perks: zod.record(zod.string(), zod.number()).nullish(),
		tempStatBuffs: zod
			.array(
				zod.object({
					stat: zod.number(),
					key: zod.string().nullish(),
					amount: zod.number(),
					expire_at: zod.number(),
				})
			)
			.nullish(),
		accessoryBagSettings: zod.any().nullish(),
		bestiary: zod.any().nullish(),
	}),
	jacob: zod.object({
		medals: zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
		}),
		earnedMedals: zod.object({
			bronze: zod.number(),
			silver: zod.number(),
			gold: zod.number(),
			platinum: zod.number(),
			diamond: zod.number(),
		}),
		perks: zod.object({
			doubleDrops: zod.number(),
			levelCap: zod.number(),
		}),
		stats: zod.object({
			brackets: zod.record(
				zod.string(),
				zod.union([
					zod.literal(0),
					zod.literal(1),
					zod.literal(2),
					zod.literal(3),
					zod.literal(4),
					zod.literal(5),
				])
			),
			personalBests: zod.record(zod.string(), zod.number()),
			crops: zod.record(
				zod.string(),
				zod.object({
					participations: zod.number(),
					firstPlaceScores: zod.number(),
					personalBestTimestamp: zod.number().nullish(),
					medals: zod.object({
						bronze: zod.number(),
						silver: zod.number(),
						gold: zod.number(),
						platinum: zod.number(),
						diamond: zod.number(),
					}),
				})
			),
		}),
		participations: zod.number(),
		firstPlaceScores: zod.number(),
		contests: zod.array(
			zod.object({
				crop: zod.string(),
				timestamp: zod.number(),
				collected: zod.number(),
				position: zod.number(),
				participants: zod.number(),
				medal: zod.string().nullish(),
			})
		),
	}),
	farmingWeight: zod.object({
		totalWeight: zod.number(),
		crops: zod.record(zod.string(), zod.number()).nullish(),
		cropWeight: zod.record(zod.string(), zod.number()),
		bonusWeight: zod.record(zod.string(), zod.number()),
		uncountedCrops: zod.record(zod.string(), zod.number()),
		pests: zod.object({
			beetle: zod.number(),
			cricket: zod.number(),
			fly: zod.number(),
			locust: zod.number(),
			mite: zod.number(),
			mosquito: zod.number(),
			moth: zod.number(),
			rat: zod.number(),
			slug: zod.number(),
			earthworm: zod.number(),
			mouse: zod.number().nullish(),
		}),
		inventory: zod
			.object({
				armor: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				tools: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				equipment: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
				accessories: zod.array(
					zod.object({
						id: zod.number().describe('Old Minecraft id of the item'),
						count: zod.number().describe('Minecraft stack count of the item'),
						skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
						uuid: zod
							.string()
							.nullish()
							.describe('Item UUID to uniquely identify a specific instance of this item'),
						name: zod.string().nullish().describe('Item name, first line of the lore'),
						lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
						enchantments: zod
							.record(zod.string(), zod.number())
							.nullish()
							.describe('Applied enchantments with their levels'),
						attributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAttributes not included elsewhere'),
						itemAttributes: zod
							.record(zod.string(), zod.string())
							.nullish()
							.describe('ExtraAtrributes.Attributes for attribute shards'),
						gems: zod
							.record(zod.string(), zod.string().nullable())
							.nullish()
							.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
						petInfo: zod
							.object({
								type: zod.string(),
								active: zod.boolean(),
								exp: zod.number(),
								level: zod.number(),
								tier: zod.string(),
								candyUsed: zod.number(),
								heldItem: zod.string().nullish(),
							})
							.nullish()
							.describe('Pet info if item is a pet'),
					})
				),
			})
			.nullish(),
		lastUpdated: zod.number(),
	}),
	garden: zod
		.object({
			profileId: zod.string().describe('Profile ID'),
			experience: zod.number().describe('Garden experience'),
			completedVisitors: zod.number().describe('Total completed visitors'),
			uniqueVisitors: zod.number().describe('Unique visitors unlocked'),
			crops: zod
				.object({
					cactus: zod.string().nullish(),
					carrot: zod.string().nullish(),
					potato: zod.string().nullish(),
					wheat: zod.string().nullish(),
					melon: zod.string().nullish(),
					pumpkin: zod.string().nullish(),
					mushroom: zod.string().nullish(),
					cocoaBeans: zod.string().nullish(),
					sugarCane: zod.string().nullish(),
					netherWart: zod.string().nullish(),
				})
				.describe('Crops counted towards milestones'),
			cropUpgrades: zod
				.object({
					cactus: zod.number(),
					carrot: zod.number(),
					potato: zod.number(),
					wheat: zod.number(),
					melon: zod.number(),
					pumpkin: zod.number(),
					mushroom: zod.number(),
					cocoaBeans: zod.number(),
					sugarCane: zod.number(),
					netherWart: zod.number(),
				})
				.describe('Crop upgrades'),
			plots: zod.array(zod.string()).describe('List of unlocked plots'),
			composter: zod
				.object({
					organic_matter: zod.number(),
					fuel_units: zod.number(),
					compost_units: zod.number(),
					compost_items: zod.number(),
					conversion_ticks: zod.number(),
					last_save: zod.number(),
					upgrades: zod.object({
						speed: zod.number(),
						multi_drop: zod.number(),
						fuel_cap: zod.number(),
						organic_matter_cap: zod.number(),
						cost_reduction: zod.number(),
					}),
					lastSave: zod.number().describe('Last save time in unix seconds'),
				})
				.describe('Composter data'),
			visitors: zod
				.record(
					zod.string(),
					zod.object({
						visits: zod.number(),
						accepted: zod.number(),
					})
				)
				.describe('Visitor data'),
			lastSave: zod.string().describe('Last save time in unix seconds'),
		})
		.nullish(),
	skills: zod.object({
		farming: zod.number(),
		mining: zod.number(),
		combat: zod.number(),
		foraging: zod.number(),
		fishing: zod.number(),
		enchanting: zod.number(),
		alchemy: zod.number(),
		carpentry: zod.number(),
		runecrafting: zod.number(),
		taming: zod.number(),
		social: zod.number(),
	}),
	chocolateFactory: zod.object({
		chocolate: zod.number(),
		totalChocolate: zod.number(),
		chocolateSincePrestige: zod.number(),
		chocolateSpent: zod.number(),
		prestige: zod.number(),
		lastViewed: zod.number(),
		uniqueRabbits: zod.object({
			common: zod.number(),
			uncommon: zod.number(),
			rare: zod.number(),
			epic: zod.number(),
			legendary: zod.number(),
			mythic: zod.number(),
			divine: zod.number(),
		}),
		totalRabbits: zod.object({
			common: zod.number(),
			uncommon: zod.number(),
			rare: zod.number(),
			epic: zod.number(),
			legendary: zod.number(),
			mythic: zod.number(),
			divine: zod.number(),
		}),
		unlockedZorro: zod.boolean(),
		refinedTrufflesConsumed: zod.number(),
		cocoaFortuneUpgrades: zod.number(),
	}),
	events: zod.array(
		zod.object({
			eventId: zod.string(),
			eventName: zod.string(),
			teamId: zod.string().nullish(),
			status: zod.union([zod.literal(0), zod.literal(1), zod.literal(2), zod.literal(3)]),
			rank: zod.number().describe('Currently not populated'),
			score: zod.string().nullish(),
		})
	),
	isSelected: zod.boolean(),
	wasRemoved: zod.boolean(),
	lastUpdated: zod.number(),
});

/**
 * Get lowest auction house prices.
 * @summary Get Auction House
 */
export const getAuctionHouseProductsResponse = zod.object({
	items: zod.record(
		zod.string(),
		zod.array(
			zod.object({
				skyblockId: zod.string(),
				variantKey: zod.string(),
				variedBy: zod
					.object({
						rarity: zod.string().nullish(),
						enchantments: zod.record(zod.string(), zod.number()).nullish(),
						pet: zod.string().nullish(),
						petLevel: zod
							.object({
								key: zod.string(),
								min: zod.number(),
								max: zod.number(),
							})
							.nullish(),
						itemAttributes: zod.record(zod.string(), zod.string()).nullish(),
						extra: zod.record(zod.string(), zod.string()).nullish(),
					})
					.describe('Data used to generate variant key (easier to parse)'),
				lowest: zod.number().describe('Lowest price seen recently (excluding outliers)'),
				lowestVolume: zod.number().describe('Volume of prices used to get the lowest recent price'),
				lowest3Day: zod.number().describe('Lowest price seen in 3 days (excluding outliers)'),
				lowest3DayVolume: zod.number().describe('Volume of prices used to get the lowest 3 day price'),
				lowest7Day: zod.number().describe('Lowest price seen in 7 days (excluding outliers)'),
				lowest7DayVolume: zod.number().describe('Volume of prices ued to get lowest 3 day price'),
			})
		)
	),
});

/**
 * Get a specific bazaar product and it's npc price (if it exists)
 * @summary Get Bazaar Product
 */
export const getBazaarProductParams = zod.object({
	itemId: zod.string(),
});

export const getBazaarProductResponse = zod.object({
	productId: zod.string(),
	product: zod.object({
		name: zod.string().nullish().describe('Name of the item if it exists.'),
		npc: zod.number().describe('NPC sell price of the item if it exists.'),
		sell: zod.number().describe('Instant Sell price taken directly from most recently fetched data'),
		buy: zod.number().describe('Instant Buy price taken directly from most recently fetched data'),
		sellOrder: zod.number().describe('Sell Order price calculated from most recently fetched data'),
		buyOrder: zod.number().describe('Buy Order price calculated from most recently fetched data'),
		averageSell: zod
			.number()
			.describe('Calculated average Instant Sell price that should be more resistant to price fluctuations'),
		averageBuy: zod
			.number()
			.describe('Calculated average Instant Buy price that should be more resistant to price fluctuations'),
		averageSellOrder: zod
			.number()
			.describe('Calculated average Sell Order price that should be more resistant to price fluctuations'),
		averageBuyOrder: zod
			.number()
			.describe('Calculated average Buy Order price that should be more resistant to price fluctuations'),
	}),
});

/**
 * Get all bazaar products.
 * @summary Get Bazaar Products
 */
export const getBazaarProductsResponse = zod.object({
	products: zod.record(
		zod.string(),
		zod.object({
			name: zod.string().nullish().describe('Name of the item if it exists.'),
			npc: zod.number().describe('NPC sell price of the item if it exists.'),
			sell: zod.number().describe('Instant Sell price taken directly from most recently fetched data'),
			buy: zod.number().describe('Instant Buy price taken directly from most recently fetched data'),
			sellOrder: zod.number().describe('Sell Order price calculated from most recently fetched data'),
			buyOrder: zod.number().describe('Buy Order price calculated from most recently fetched data'),
			averageSell: zod
				.number()
				.describe('Calculated average Instant Sell price that should be more resistant to price fluctuations'),
			averageBuy: zod
				.number()
				.describe('Calculated average Instant Buy price that should be more resistant to price fluctuations'),
			averageSellOrder: zod
				.number()
				.describe('Calculated average Sell Order price that should be more resistant to price fluctuations'),
			averageBuyOrder: zod
				.number()
				.describe('Calculated average Buy Order price that should be more resistant to price fluctuations'),
		})
	),
});

/**
 * Get an ItemDto from raw bytes from Hypixel
 * @summary Parse Skyblock Item from Bytes
 */
export const getItemsFromBytesBody = zod.object({
	bytes: zod.string(),
});

export const getItemsFromBytesResponse = zod.object({
	items: zod.array(
		zod
			.object({
				id: zod.number().describe('Old Minecraft id of the item'),
				count: zod.number().describe('Minecraft stack count of the item'),
				skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
				uuid: zod
					.string()
					.nullish()
					.describe('Item UUID to uniquely identify a specific instance of this item'),
				name: zod.string().nullish().describe('Item name, first line of the lore'),
				lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
				enchantments: zod
					.record(zod.string(), zod.number())
					.nullish()
					.describe('Applied enchantments with their levels'),
				attributes: zod
					.record(zod.string(), zod.string())
					.nullish()
					.describe('ExtraAttributes not included elsewhere'),
				itemAttributes: zod
					.record(zod.string(), zod.string())
					.nullish()
					.describe('ExtraAtrributes.Attributes for attribute shards'),
				gems: zod
					.record(zod.string(), zod.string().nullable())
					.nullish()
					.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
				petInfo: zod
					.object({
						type: zod.string(),
						active: zod.boolean(),
						exp: zod.number(),
						level: zod.number(),
						tier: zod.string(),
						candyUsed: zod.number(),
						heldItem: zod.string().nullish(),
					})
					.nullish()
					.describe('Pet info if item is a pet'),
			})
			.nullable()
	),
});

/**
 * Get all items in the Hypixel resources endpoint
 * @summary Get Skyblock Items
 */
export const getSkyblockItemsResponse = zod.object({
	items: zod.record(
		zod.string(),
		zod
			.object({
				id: zod.string().nullish(),
				material: zod.string().nullish(),
				color: zod.string().nullish(),
				durability: zod.number(),
				skin: zod
					.object({
						value: zod.string().nullish(),
						signature: zod.string().nullish(),
					})
					.nullish(),
				name: zod.string().nullish(),
				category: zod.string().nullish(),
				tier: zod.string().nullish(),
				unstackable: zod.boolean(),
				glowing: zod.boolean(),
				npc_sell_price: zod.number(),
				can_auction: zod.boolean(),
				can_trade: zod.boolean(),
				can_place: zod.boolean(),
				gemstone_slots: zod
					.array(
						zod.object({
							slot_type: zod.string().nullish(),
							costs: zod.array(
								zod.object({
									type: zod.string(),
									item_id: zod.string().nullish(),
									coins: zod.number(),
								})
							),
						})
					)
					.nullish(),
				requirements: zod
					.array(
						zod.object({
							type: zod.string(),
							skill: zod.string().nullish(),
							level: zod.number(),
						})
					)
					.nullish(),
				museum: zod.boolean(),
				museum_data: zod
					.object({
						donation_xp: zod.number(),
						parent: zod.record(zod.string(), zod.string()),
						type: zod.string().nullish(),
						armor_set_donation_xp: zod.record(zod.string(), zod.number()).nullish(),
						game_stage: zod.string().nullish(),
					})
					.nullish(),
				stats: zod.record(zod.string(), zod.number()).nullish(),
				generator_tier: zod.number(),
				dungeon_item_conversion_cost: zod
					.object({
						essence_type: zod.string().nullish(),
						amount: zod.number(),
					})
					.nullish(),
				upgrade_costs: zod
					.array(
						zod.array(
							zod.object({
								type: zod.string().nullish(),
								essence_type: zod.string().nullish(),
								item_id: zod.string().nullish(),
								amount: zod.number(),
							})
						)
					)
					.nullish(),
				catacombs_requirements: zod
					.array(
						zod.object({
							type: zod.string().nullish(),
							dungeon_type: zod.string().nullish(),
							level: zod.number(),
						})
					)
					.nullish(),
				hide_from_viewrecipe_command: zod.boolean(),
				salvagable_from_recipe: zod.boolean(),
				item_specific: zod
					.object({
						rootElement: zod.any().describe('Gets the root element of this JSON document.'),
					})
					.describe(
						'Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.'
					)
					.nullish(),
			})
			.nullable()
	),
});

/**
 * Get specific skyblock items from the Hypixel resources endpoint, along with bazaar data for each.
 * @summary Get Specific Skyblock Items
 */
export const getSpecifiedSkyblockItemsBody = zod.object({
	items: zod.array(zod.string()),
});

export const getSpecifiedSkyblockItemsResponse = zod.object({
	items: zod.record(
		zod.string(),
		zod.object({
			itemId: zod.string(),
			name: zod.string().nullish(),
			data: zod
				.object({
					id: zod.string().nullish(),
					material: zod.string().nullish(),
					color: zod.string().nullish(),
					durability: zod.number(),
					skin: zod
						.object({
							value: zod.string().nullish(),
							signature: zod.string().nullish(),
						})
						.nullish(),
					name: zod.string().nullish(),
					category: zod.string().nullish(),
					tier: zod.string().nullish(),
					unstackable: zod.boolean(),
					glowing: zod.boolean(),
					npc_sell_price: zod.number(),
					can_auction: zod.boolean(),
					can_trade: zod.boolean(),
					can_place: zod.boolean(),
					gemstone_slots: zod
						.array(
							zod.object({
								slot_type: zod.string().nullish(),
								costs: zod.array(
									zod.object({
										type: zod.string(),
										item_id: zod.string().nullish(),
										coins: zod.number(),
									})
								),
							})
						)
						.nullish(),
					requirements: zod
						.array(
							zod.object({
								type: zod.string(),
								skill: zod.string().nullish(),
								level: zod.number(),
							})
						)
						.nullish(),
					museum: zod.boolean(),
					museum_data: zod
						.object({
							donation_xp: zod.number(),
							parent: zod.record(zod.string(), zod.string()),
							type: zod.string().nullish(),
							armor_set_donation_xp: zod.record(zod.string(), zod.number()).nullish(),
							game_stage: zod.string().nullish(),
						})
						.nullish(),
					stats: zod.record(zod.string(), zod.number()).nullish(),
					generator_tier: zod.number(),
					dungeon_item_conversion_cost: zod
						.object({
							essence_type: zod.string().nullish(),
							amount: zod.number(),
						})
						.nullish(),
					upgrade_costs: zod
						.array(
							zod.array(
								zod.object({
									type: zod.string().nullish(),
									essence_type: zod.string().nullish(),
									item_id: zod.string().nullish(),
									amount: zod.number(),
								})
							)
						)
						.nullish(),
					catacombs_requirements: zod
						.array(
							zod.object({
								type: zod.string().nullish(),
								dungeon_type: zod.string().nullish(),
								level: zod.number(),
							})
						)
						.nullish(),
					hide_from_viewrecipe_command: zod.boolean(),
					salvagable_from_recipe: zod.boolean(),
					item_specific: zod
						.object({
							rootElement: zod.any().describe('Gets the root element of this JSON document.'),
						})
						.describe(
							'Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.'
						)
						.nullish(),
				})
				.nullish()
				.describe('Data from the Hypixel items endpoint'),
			bazaar: zod
				.object({
					name: zod.string().nullish().describe('Name of the item if it exists.'),
					npc: zod.number().describe('NPC sell price of the item if it exists.'),
					sell: zod.number().describe('Instant Sell price taken directly from most recently fetched data'),
					buy: zod.number().describe('Instant Buy price taken directly from most recently fetched data'),
					sellOrder: zod.number().describe('Sell Order price calculated from most recently fetched data'),
					buyOrder: zod.number().describe('Buy Order price calculated from most recently fetched data'),
					averageSell: zod
						.number()
						.describe(
							'Calculated average Instant Sell price that should be more resistant to price fluctuations'
						),
					averageBuy: zod
						.number()
						.describe(
							'Calculated average Instant Buy price that should be more resistant to price fluctuations'
						),
					averageSellOrder: zod
						.number()
						.describe(
							'Calculated average Sell Order price that should be more resistant to price fluctuations'
						),
					averageBuyOrder: zod
						.number()
						.describe(
							'Calculated average Buy Order price that should be more resistant to price fluctuations'
						),
				})
				.nullish(),
			auctions: zod
				.array(
					zod.object({
						skyblockId: zod.string(),
						variantKey: zod.string(),
						variedBy: zod
							.object({
								rarity: zod.string().nullish(),
								enchantments: zod.record(zod.string(), zod.number()).nullish(),
								pet: zod.string().nullish(),
								petLevel: zod
									.object({
										key: zod.string(),
										min: zod.number(),
										max: zod.number(),
									})
									.nullish(),
								itemAttributes: zod.record(zod.string(), zod.string()).nullish(),
								extra: zod.record(zod.string(), zod.string()).nullish(),
							})
							.describe('Data used to generate variant key (easier to parse)'),
						lowest: zod.number().describe('Lowest price seen recently (excluding outliers)'),
						lowestVolume: zod.number().describe('Volume of prices used to get the lowest recent price'),
						lowest3Day: zod.number().describe('Lowest price seen in 3 days (excluding outliers)'),
						lowest3DayVolume: zod.number().describe('Volume of prices used to get the lowest 3 day price'),
						lowest7Day: zod.number().describe('Lowest price seen in 7 days (excluding outliers)'),
						lowest7DayVolume: zod.number().describe('Volume of prices ued to get lowest 3 day price'),
					})
				)
				.nullish(),
		})
	),
});

/**
 * Get the Hypixel provided data of a specific item, as well as a bazaar summary.
 * @summary Get Skyblock Item
 */
export const skyblockProductParams = zod.object({
	itemId: zod.string(),
});

export const skyblockProductResponse = zod.object({
	itemId: zod.string(),
	name: zod.string().nullish(),
	data: zod
		.object({
			id: zod.string().nullish(),
			material: zod.string().nullish(),
			color: zod.string().nullish(),
			durability: zod.number(),
			skin: zod
				.object({
					value: zod.string().nullish(),
					signature: zod.string().nullish(),
				})
				.nullish(),
			name: zod.string().nullish(),
			category: zod.string().nullish(),
			tier: zod.string().nullish(),
			unstackable: zod.boolean(),
			glowing: zod.boolean(),
			npc_sell_price: zod.number(),
			can_auction: zod.boolean(),
			can_trade: zod.boolean(),
			can_place: zod.boolean(),
			gemstone_slots: zod
				.array(
					zod.object({
						slot_type: zod.string().nullish(),
						costs: zod.array(
							zod.object({
								type: zod.string(),
								item_id: zod.string().nullish(),
								coins: zod.number(),
							})
						),
					})
				)
				.nullish(),
			requirements: zod
				.array(
					zod.object({
						type: zod.string(),
						skill: zod.string().nullish(),
						level: zod.number(),
					})
				)
				.nullish(),
			museum: zod.boolean(),
			museum_data: zod
				.object({
					donation_xp: zod.number(),
					parent: zod.record(zod.string(), zod.string()),
					type: zod.string().nullish(),
					armor_set_donation_xp: zod.record(zod.string(), zod.number()).nullish(),
					game_stage: zod.string().nullish(),
				})
				.nullish(),
			stats: zod.record(zod.string(), zod.number()).nullish(),
			generator_tier: zod.number(),
			dungeon_item_conversion_cost: zod
				.object({
					essence_type: zod.string().nullish(),
					amount: zod.number(),
				})
				.nullish(),
			upgrade_costs: zod
				.array(
					zod.array(
						zod.object({
							type: zod.string().nullish(),
							essence_type: zod.string().nullish(),
							item_id: zod.string().nullish(),
							amount: zod.number(),
						})
					)
				)
				.nullish(),
			catacombs_requirements: zod
				.array(
					zod.object({
						type: zod.string().nullish(),
						dungeon_type: zod.string().nullish(),
						level: zod.number(),
					})
				)
				.nullish(),
			hide_from_viewrecipe_command: zod.boolean(),
			salvagable_from_recipe: zod.boolean(),
			item_specific: zod
				.object({
					rootElement: zod.any().describe('Gets the root element of this JSON document.'),
				})
				.describe(
					'Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.'
				)
				.nullish(),
		})
		.nullish()
		.describe('Data from the Hypixel items endpoint'),
	bazaar: zod
		.object({
			name: zod.string().nullish().describe('Name of the item if it exists.'),
			npc: zod.number().describe('NPC sell price of the item if it exists.'),
			sell: zod.number().describe('Instant Sell price taken directly from most recently fetched data'),
			buy: zod.number().describe('Instant Buy price taken directly from most recently fetched data'),
			sellOrder: zod.number().describe('Sell Order price calculated from most recently fetched data'),
			buyOrder: zod.number().describe('Buy Order price calculated from most recently fetched data'),
			averageSell: zod
				.number()
				.describe('Calculated average Instant Sell price that should be more resistant to price fluctuations'),
			averageBuy: zod
				.number()
				.describe('Calculated average Instant Buy price that should be more resistant to price fluctuations'),
			averageSellOrder: zod
				.number()
				.describe('Calculated average Sell Order price that should be more resistant to price fluctuations'),
			averageBuyOrder: zod
				.number()
				.describe('Calculated average Buy Order price that should be more resistant to price fluctuations'),
		})
		.nullish(),
	auctions: zod
		.array(
			zod.object({
				skyblockId: zod.string(),
				variantKey: zod.string(),
				variedBy: zod
					.object({
						rarity: zod.string().nullish(),
						enchantments: zod.record(zod.string(), zod.number()).nullish(),
						pet: zod.string().nullish(),
						petLevel: zod
							.object({
								key: zod.string(),
								min: zod.number(),
								max: zod.number(),
							})
							.nullish(),
						itemAttributes: zod.record(zod.string(), zod.string()).nullish(),
						extra: zod.record(zod.string(), zod.string()).nullish(),
					})
					.describe('Data used to generate variant key (easier to parse)'),
				lowest: zod.number().describe('Lowest price seen recently (excluding outliers)'),
				lowestVolume: zod.number().describe('Volume of prices used to get the lowest recent price'),
				lowest3Day: zod.number().describe('Lowest price seen in 3 days (excluding outliers)'),
				lowest3DayVolume: zod.number().describe('Volume of prices used to get the lowest 3 day price'),
				lowest7Day: zod.number().describe('Lowest price seen in 7 days (excluding outliers)'),
				lowest7DayVolume: zod.number().describe('Volume of prices ued to get lowest 3 day price'),
			})
		)
		.nullish(),
});

/**
 * @summary Add Product to Shop Category
 */
export const addProductToCategoryParams = zod.object({
	categoryId: zod.number().describe('Id of the category to add the product to'),
	productId: zod.number().describe('Id of the product to add to the category'),
});

/**
 * @summary Remove Product from Shop Category
 */
export const removeProductToCategoryParams = zod.object({
	categoryId: zod.number().describe('Id of the category to add the product to'),
	productId: zod.number().describe('Id of the product to add to the category'),
});

/**
 * @summary Create Shop Category
 */
export const createCategoryBodyTitleMax = 256;
export const createCategoryBodySlugMax = 32;
export const createCategoryBodyDescriptionMax = 512;

export const createCategoryBody = zod.object({
	title: zod.string().max(createCategoryBodyTitleMax),
	slug: zod.string().max(createCategoryBodySlugMax),
	description: zod.string().max(createCategoryBodyDescriptionMax).nullish(),
});

/**
 * @summary Delete Shop Category
 */
export const deleteCategoryParams = zod.object({
	categoryId: zod.number().describe('Id of the category to delete'),
});

/**
 * @summary Update Shop Category
 */
export const updateCategoryParams = zod.object({
	categoryId: zod.number().describe('Id of the category to update'),
});

export const updateCategoryBodyTitleMax = 256;
export const updateCategoryBodySlugMax = 32;
export const updateCategoryBodyDescriptionMax = 512;

export const updateCategoryBody = zod.object({
	title: zod.string().max(updateCategoryBodyTitleMax).nullish(),
	slug: zod.string().max(updateCategoryBodySlugMax).nullish(),
	description: zod.string().max(updateCategoryBodyDescriptionMax).nullish(),
	published: zod.boolean().nullish(),
});

/**
 * @summary Get Shop Categories
 */
export const getCategoriesQueryParams = zod.object({
	includeProducts: zod.boolean().nullish().describe('Include products in response'),
});

export const getCategoriesResponseProductsItemWeightStylesItemNameMax = 64;
export const getCategoriesResponseProductsItemThumbnailTitleMax = 64;
export const getCategoriesResponseProductsItemThumbnailDescriptionMax = 512;
export const getCategoriesResponseProductsItemImagesItemTitleMax = 64;
export const getCategoriesResponseProductsItemImagesItemDescriptionMax = 512;

export const getCategoriesResponseItem = zod.object({
	id: zod.number(),
	title: zod.string(),
	slug: zod.string(),
	description: zod.string().nullish(),
	order: zod.number(),
	published: zod.boolean(),
	products: zod.array(
		zod.object({
			id: zod.string().describe('Product ID'),
			name: zod.string().describe('Product name'),
			slug: zod.string().describe('Slug of the product'),
			price: zod.number().describe('Product price'),
			description: zod.string().nullish().describe('Product description'),
			available: zod.boolean().describe('If the product is available for purchase'),
			type: zod
				.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
				.describe('Type of product'),
			features: zod
				.object({
					badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
					weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
					weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
					embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
					hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
					moreInfoDefault: zod
						.boolean()
						.nullish()
						.describe('Show \"More Info\" on weight command by default.'),
					customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
					maxMonthlyEvents: zod
						.number()
						.nullish()
						.describe('Maximum number of events that can be created in a month. (For guilds)'),
					maxJacobLeaderboards: zod
						.number()
						.nullish()
						.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
				})
				.describe('Features of the product'),
			weightStyles: zod
				.array(
					zod.object({
						id: zod.number(),
						name: zod.string().max(getCategoriesResponseProductsItemWeightStylesItemNameMax).nullish(),
					})
				)
				.describe('Unlocked weight styles'),
			thumbnail: zod
				.object({
					title: zod
						.string()
						.max(getCategoriesResponseProductsItemThumbnailTitleMax)
						.nullish()
						.describe('Image title'),
					description: zod
						.string()
						.max(getCategoriesResponseProductsItemThumbnailDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish()
				.describe('Product thumbnail'),
			images: zod
				.array(
					zod.object({
						title: zod
							.string()
							.max(getCategoriesResponseProductsItemImagesItemTitleMax)
							.nullish()
							.describe('Image title'),
						description: zod
							.string()
							.max(getCategoriesResponseProductsItemImagesItemDescriptionMax)
							.nullish()
							.describe('Image description'),
						order: zod.number().nullish().describe('Image ordering number'),
						url: zod.string().describe('Full image URL'),
					})
				)
				.describe('Product Images'),
			flags: zod.number().describe('Discord flags'),
			isSubscription: zod.boolean(),
			isGuildSubscription: zod.boolean(),
			isUserSubscription: zod.boolean(),
		})
	),
});
export const getCategoriesResponse = zod.array(getCategoriesResponseItem);

/**
 * @summary Get Shop Category
 */
export const getCategoryParams = zod.object({
	category: zod.string().describe('Category id or slug'),
});

export const getCategoryResponseProductsItemWeightStylesItemNameMax = 64;
export const getCategoryResponseProductsItemThumbnailTitleMax = 64;
export const getCategoryResponseProductsItemThumbnailDescriptionMax = 512;
export const getCategoryResponseProductsItemImagesItemTitleMax = 64;
export const getCategoryResponseProductsItemImagesItemDescriptionMax = 512;

export const getCategoryResponse = zod.object({
	id: zod.number(),
	title: zod.string(),
	slug: zod.string(),
	description: zod.string().nullish(),
	order: zod.number(),
	published: zod.boolean(),
	products: zod.array(
		zod.object({
			id: zod.string().describe('Product ID'),
			name: zod.string().describe('Product name'),
			slug: zod.string().describe('Slug of the product'),
			price: zod.number().describe('Product price'),
			description: zod.string().nullish().describe('Product description'),
			available: zod.boolean().describe('If the product is available for purchase'),
			type: zod
				.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
				.describe('Type of product'),
			features: zod
				.object({
					badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
					weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
					weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
					embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
					hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
					moreInfoDefault: zod
						.boolean()
						.nullish()
						.describe('Show \"More Info\" on weight command by default.'),
					customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
					maxMonthlyEvents: zod
						.number()
						.nullish()
						.describe('Maximum number of events that can be created in a month. (For guilds)'),
					maxJacobLeaderboards: zod
						.number()
						.nullish()
						.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
				})
				.describe('Features of the product'),
			weightStyles: zod
				.array(
					zod.object({
						id: zod.number(),
						name: zod.string().max(getCategoryResponseProductsItemWeightStylesItemNameMax).nullish(),
					})
				)
				.describe('Unlocked weight styles'),
			thumbnail: zod
				.object({
					title: zod
						.string()
						.max(getCategoryResponseProductsItemThumbnailTitleMax)
						.nullish()
						.describe('Image title'),
					description: zod
						.string()
						.max(getCategoryResponseProductsItemThumbnailDescriptionMax)
						.nullish()
						.describe('Image description'),
					order: zod.number().nullish().describe('Image ordering number'),
					url: zod.string().describe('Full image URL'),
				})
				.nullish()
				.describe('Product thumbnail'),
			images: zod
				.array(
					zod.object({
						title: zod
							.string()
							.max(getCategoryResponseProductsItemImagesItemTitleMax)
							.nullish()
							.describe('Image title'),
						description: zod
							.string()
							.max(getCategoryResponseProductsItemImagesItemDescriptionMax)
							.nullish()
							.describe('Image description'),
						order: zod.number().nullish().describe('Image ordering number'),
						url: zod.string().describe('Full image URL'),
					})
				)
				.describe('Product Images'),
			flags: zod.number().describe('Discord flags'),
			isSubscription: zod.boolean(),
			isGuildSubscription: zod.boolean(),
			isUserSubscription: zod.boolean(),
		})
	),
});

/**
 * @summary Reorder Products in Shop Category
 */
export const reorderCategoryProductsParams = zod.object({
	categoryId: zod.number().describe('Category id'),
});

/**
 * @summary Add Cosmetic to Product
 */
export const addCosmeticToProductParams = zod.object({
	productId: zod.number().describe('Id of the produc to add the cosmetic to'),
	cosmeticId: zod.number().describe('Id of the cosmetic to add to the product'),
});

/**
 * @summary Remove Cosmetic from Product
 */
export const removeCosmeticToProductParams = zod.object({
	productId: zod.number().describe('Id of the produc to add the cosmetic to'),
	cosmeticId: zod.number().describe('Id of the cosmetic to add to the product'),
});

/**
 * @summary Add Image To Product
 */
export const addProductImageParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const addProductImageQueryThumbnailDefault = false;

export const addProductImageQueryParams = zod.object({
	thumbnail: zod.boolean().nullish().describe("Use this to set the image as the product's thumbnail"),
});

export const addProductImageBodyTitleMax = 64;
export const addProductImageBodyDescriptionMax = 512;

export const addProductImageBody = zod.object({
	title: zod.string().max(addProductImageBodyTitleMax).nullish(),
	description: zod.string().max(addProductImageBodyDescriptionMax).nullish(),
	image: zod.instanceof(File),
});

/**
 * @summary Remove Image from Product
 */
export const deleteProductImageParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
	imagePath: zod.string(),
});

/**
 * @summary Get Admin Shop Products
 */
export const getAllProductsResponseWeightStylesItemNameMax = 64;
export const getAllProductsResponseThumbnailTitleMax = 64;
export const getAllProductsResponseThumbnailDescriptionMax = 512;
export const getAllProductsResponseImagesItemTitleMax = 64;
export const getAllProductsResponseImagesItemDescriptionMax = 512;

export const getAllProductsResponseItem = zod.object({
	id: zod.string().describe('Product ID'),
	name: zod.string().describe('Product name'),
	slug: zod.string().describe('Slug of the product'),
	price: zod.number().describe('Product price'),
	description: zod.string().nullish().describe('Product description'),
	available: zod.boolean().describe('If the product is available for purchase'),
	type: zod
		.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
		.describe('Type of product'),
	features: zod
		.object({
			badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
			weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
			hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
			maxMonthlyEvents: zod
				.number()
				.nullish()
				.describe('Maximum number of events that can be created in a month. (For guilds)'),
			maxJacobLeaderboards: zod
				.number()
				.nullish()
				.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
		})
		.describe('Features of the product'),
	weightStyles: zod
		.array(
			zod.object({
				id: zod.number(),
				name: zod.string().max(getAllProductsResponseWeightStylesItemNameMax).nullish(),
			})
		)
		.describe('Unlocked weight styles'),
	thumbnail: zod
		.object({
			title: zod.string().max(getAllProductsResponseThumbnailTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getAllProductsResponseThumbnailDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Product thumbnail'),
	images: zod
		.array(
			zod.object({
				title: zod.string().max(getAllProductsResponseImagesItemTitleMax).nullish().describe('Image title'),
				description: zod
					.string()
					.max(getAllProductsResponseImagesItemDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			})
		)
		.describe('Product Images'),
	flags: zod.number().describe('Discord flags'),
	isSubscription: zod.boolean(),
	isGuildSubscription: zod.boolean(),
	isUserSubscription: zod.boolean(),
});
export const getAllProductsResponse = zod.array(getAllProductsResponseItem);

/**
 * @summary Refresh Shop Products
 */
export const refreshProductsResponseWeightStylesItemNameMax = 64;
export const refreshProductsResponseThumbnailTitleMax = 64;
export const refreshProductsResponseThumbnailDescriptionMax = 512;
export const refreshProductsResponseImagesItemTitleMax = 64;
export const refreshProductsResponseImagesItemDescriptionMax = 512;

export const refreshProductsResponseItem = zod.object({
	id: zod.string().describe('Product ID'),
	name: zod.string().describe('Product name'),
	slug: zod.string().describe('Slug of the product'),
	price: zod.number().describe('Product price'),
	description: zod.string().nullish().describe('Product description'),
	available: zod.boolean().describe('If the product is available for purchase'),
	type: zod
		.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
		.describe('Type of product'),
	features: zod
		.object({
			badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
			weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
			hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
			maxMonthlyEvents: zod
				.number()
				.nullish()
				.describe('Maximum number of events that can be created in a month. (For guilds)'),
			maxJacobLeaderboards: zod
				.number()
				.nullish()
				.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
		})
		.describe('Features of the product'),
	weightStyles: zod
		.array(
			zod.object({
				id: zod.number(),
				name: zod.string().max(refreshProductsResponseWeightStylesItemNameMax).nullish(),
			})
		)
		.describe('Unlocked weight styles'),
	thumbnail: zod
		.object({
			title: zod.string().max(refreshProductsResponseThumbnailTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(refreshProductsResponseThumbnailDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Product thumbnail'),
	images: zod
		.array(
			zod.object({
				title: zod.string().max(refreshProductsResponseImagesItemTitleMax).nullish().describe('Image title'),
				description: zod
					.string()
					.max(refreshProductsResponseImagesItemDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			})
		)
		.describe('Product Images'),
	flags: zod.number().describe('Discord flags'),
	isSubscription: zod.boolean(),
	isGuildSubscription: zod.boolean(),
	isUserSubscription: zod.boolean(),
});
export const refreshProductsResponse = zod.array(refreshProductsResponseItem);

/**
 * @summary Update Shop Product
 */
export const updateProductParams = zod.object({
	discordId: zod.number().describe('Discord Snowflake ID of the requested resource (guild, user, etc.)'),
});

export const updateProductBodyDescriptionMax = 1024;

export const updateProductBody = zod.object({
	description: zod.string().max(updateProductBodyDescriptionMax).nullish().describe('Description of the product'),
	available: zod.boolean().nullish().describe('If the product is available for purchase'),
	price: zod.number().nullish().describe('Product price in USD cents'),
	features: zod
		.object({
			badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
			weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
			hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
			maxMonthlyEvents: zod
				.number()
				.nullish()
				.describe('Maximum number of events that can be created in a month. (For guilds)'),
			maxJacobLeaderboards: zod
				.number()
				.nullish()
				.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
		})
		.nullish()
		.describe('Features of the product'),
	releasedAt: zod.string().nullish().describe('Unix seconds timestamp of release date'),
});

/**
 * @summary Get Shop Product
 */
export const getProductParams = zod.object({
	discordId: zod.number(),
});

export const getProductResponseWeightStylesItemNameMax = 64;
export const getProductResponseThumbnailTitleMax = 64;
export const getProductResponseThumbnailDescriptionMax = 512;
export const getProductResponseImagesItemTitleMax = 64;
export const getProductResponseImagesItemDescriptionMax = 512;

export const getProductResponse = zod.object({
	id: zod.string().describe('Product ID'),
	name: zod.string().describe('Product name'),
	slug: zod.string().describe('Slug of the product'),
	price: zod.number().describe('Product price'),
	description: zod.string().nullish().describe('Product description'),
	available: zod.boolean().describe('If the product is available for purchase'),
	type: zod
		.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
		.describe('Type of product'),
	features: zod
		.object({
			badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
			weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
			hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
			maxMonthlyEvents: zod
				.number()
				.nullish()
				.describe('Maximum number of events that can be created in a month. (For guilds)'),
			maxJacobLeaderboards: zod
				.number()
				.nullish()
				.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
		})
		.describe('Features of the product'),
	weightStyles: zod
		.array(
			zod.object({
				id: zod.number(),
				name: zod.string().max(getProductResponseWeightStylesItemNameMax).nullish(),
			})
		)
		.describe('Unlocked weight styles'),
	thumbnail: zod
		.object({
			title: zod.string().max(getProductResponseThumbnailTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getProductResponseThumbnailDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Product thumbnail'),
	images: zod
		.array(
			zod.object({
				title: zod.string().max(getProductResponseImagesItemTitleMax).nullish().describe('Image title'),
				description: zod
					.string()
					.max(getProductResponseImagesItemDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			})
		)
		.describe('Product Images'),
	flags: zod.number().describe('Discord flags'),
	isSubscription: zod.boolean(),
	isGuildSubscription: zod.boolean(),
	isUserSubscription: zod.boolean(),
});

/**
 * @summary Claim Free Shop Product
 */
export const claimProductParams = zod.object({
	discordId: zod.number(),
});

/**
 * @summary Get Shop Products
 */
export const getProductsResponseWeightStylesItemNameMax = 64;
export const getProductsResponseThumbnailTitleMax = 64;
export const getProductsResponseThumbnailDescriptionMax = 512;
export const getProductsResponseImagesItemTitleMax = 64;
export const getProductsResponseImagesItemDescriptionMax = 512;

export const getProductsResponseItem = zod.object({
	id: zod.string().describe('Product ID'),
	name: zod.string().describe('Product name'),
	slug: zod.string().describe('Slug of the product'),
	price: zod.number().describe('Product price'),
	description: zod.string().nullish().describe('Product description'),
	available: zod.boolean().describe('If the product is available for purchase'),
	type: zod
		.union([zod.literal(2), zod.literal(3), zod.literal(5), zod.literal(6), zod.literal(-1)])
		.describe('Type of product'),
	features: zod
		.object({
			badgeId: zod.number().nullish().describe('ID of unlocked badge.'),
			weightStyles: zod.array(zod.string()).nullish().describe('Name of weight style to unlock.'),
			weightStyleOverride: zod.boolean().nullish().describe("Ability to override other's weight styles."),
			embedColors: zod.array(zod.string()).nullish().describe('Embed color for the bot.'),
			hideShopPromotions: zod.boolean().nullish().describe('Ability to hide shop promotions.'),
			moreInfoDefault: zod.boolean().nullish().describe('Show \"More Info\" on weight command by default.'),
			customEmoji: zod.boolean().nullish().describe('Ability to have custom name emoji for the user.'),
			maxMonthlyEvents: zod
				.number()
				.nullish()
				.describe('Maximum number of events that can be created in a month. (For guilds)'),
			maxJacobLeaderboards: zod
				.number()
				.nullish()
				.describe('Maximum number of jacob leaderboard that can be active at once. (For guilds)'),
		})
		.describe('Features of the product'),
	weightStyles: zod
		.array(
			zod.object({
				id: zod.number(),
				name: zod.string().max(getProductsResponseWeightStylesItemNameMax).nullish(),
			})
		)
		.describe('Unlocked weight styles'),
	thumbnail: zod
		.object({
			title: zod.string().max(getProductsResponseThumbnailTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getProductsResponseThumbnailDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish()
		.describe('Product thumbnail'),
	images: zod
		.array(
			zod.object({
				title: zod.string().max(getProductsResponseImagesItemTitleMax).nullish().describe('Image title'),
				description: zod
					.string()
					.max(getProductsResponseImagesItemDescriptionMax)
					.nullish()
					.describe('Image description'),
				order: zod.number().nullish().describe('Image ordering number'),
				url: zod.string().describe('Full image URL'),
			})
		)
		.describe('Product Images'),
	flags: zod.number().describe('Discord flags'),
	isSubscription: zod.boolean(),
	isGuildSubscription: zod.boolean(),
	isUserSubscription: zod.boolean(),
});
export const getProductsResponse = zod.array(getProductsResponseItem);

/**
 * @summary Add Image To Style
 */
export const addStyleImageParams = zod.object({
	styleId: zod.number(),
});

export const addStyleImageQueryThumbnailDefault = false;

export const addStyleImageQueryParams = zod.object({
	thumbnail: zod.boolean().nullish().describe("Use this to set the image as the product's thumbnail"),
});

export const addStyleImageBodyTitleMax = 64;
export const addStyleImageBodyDescriptionMax = 512;

export const addStyleImageBody = zod.object({
	title: zod.string().max(addStyleImageBodyTitleMax).nullish(),
	description: zod.string().max(addStyleImageBodyDescriptionMax).nullish(),
	image: zod.instanceof(File),
});

/**
 * @summary Create Shop Style
 */
export const createStyleBodyStyleFormatterMax = 64;
export const createStyleBodyNameMin = 0;

export const createStyleBodyNameMax = 64;
export const createStyleBodyCollectionMax = 64;
export const createStyleBodyDescriptionMax = 1024;

export const createStyleBody = zod.object({
	styleFormatter: zod.string().max(createStyleBodyStyleFormatterMax).nullish(),
	name: zod.string().min(createStyleBodyNameMin).max(createStyleBodyNameMax),
	collection: zod.string().max(createStyleBodyCollectionMax).nullish(),
	description: zod.string().max(createStyleBodyDescriptionMax).nullish(),
	data: zod.object({
		decal: zod
			.object({
				start: zod.object({
					x: zod.number(),
					y: zod.number(),
				}),
				end: zod.object({
					x: zod.number(),
					y: zod.number(),
				}),
				fill: zod.string().nullish(),
				imageUrl: zod.string().nullish(),
				crops: zod.record(zod.string(), zod.string()).nullish(),
			})
			.nullish(),
		elements: zod.object({
			background: zod.object({
				size: zod
					.object({
						x: zod.number(),
						y: zod.number(),
					})
					.nullish(),
				fill: zod.string().nullish(),
				rects: zod
					.array(
						zod.object({
							start: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
							end: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
							fill: zod.string().nullish(),
							useEmbedColor: zod.boolean().nullish(),
							opacity: zod.number().nullish(),
						})
					)
					.nullish(),
				imageUrl: zod.string().nullish(),
				radius: zod.number().nullish(),
				opacity: zod.number().nullish(),
			}),
			gradients: zod
				.array(
					zod.object({
						direction: zod.object({
							start: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
							end: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
						}),
						bounds: zod.object({
							start: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
							end: zod.object({
								x: zod.number(),
								y: zod.number(),
							}),
						}),
						stops: zod
							.array(
								zod.object({
									position: zod.number(),
									fill: zod.string(),
								})
							)
							.nullish(),
						opacity: zod.number().nullish(),
					})
				)
				.nullish(),
			name: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			weight: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			label: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			head: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			badge: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			rank: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
			rankWithBadge: zod
				.object({
					font: zod.string().nullish(),
					fill: zod.string().nullish(),
					fontSize: zod.number().nullish(),
					position: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					maxWidth: zod.number().nullish(),
					maxHeight: zod.number().nullish(),
					outline: zod
						.object({
							width: zod.number().nullish(),
							opacity: zod.number().nullish(),
							fill: zod.string().nullish(),
						})
						.nullish(),
					background: zod
						.object({
							fill: zod.string().nullish(),
							opacity: zod.number().nullish(),
							padding: zod.number().nullish(),
							radius: zod.number().nullish(),
						})
						.nullish(),
				})
				.nullish(),
		}),
	}),
});

/**
 * @summary Delete Shop Style
 */
export const deleteStyleParams = zod.object({
	styleId: zod.number(),
});

/**
 * @summary Get Shop Style
 */
export const getStyleParams = zod.object({
	styleId: zod.number(),
});

export const getStyleResponseStyleFormatterMax = 64;
export const getStyleResponseNameMax = 64;
export const getStyleResponseCollectionMax = 64;
export const getStyleResponseDescriptionMax = 1024;
export const getStyleResponseImageTitleMax = 64;
export const getStyleResponseImageDescriptionMax = 512;
export const getStyleResponseImagesItemTitleMax = 64;
export const getStyleResponseImagesItemDescriptionMax = 512;

export const getStyleResponse = zod.object({
	id: zod.number(),
	styleFormatter: zod.string().max(getStyleResponseStyleFormatterMax).nullish(),
	name: zod.string().max(getStyleResponseNameMax).nullish(),
	collection: zod.string().max(getStyleResponseCollectionMax).nullish(),
	description: zod.string().max(getStyleResponseDescriptionMax).nullish(),
	image: zod
		.object({
			title: zod.string().max(getStyleResponseImageTitleMax).nullish().describe('Image title'),
			description: zod.string().max(getStyleResponseImageDescriptionMax).nullish().describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	images: zod.array(
		zod.object({
			title: zod.string().max(getStyleResponseImagesItemTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getStyleResponseImagesItemDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
	),
	products: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			slug: zod.string().nullish(),
		})
	),
	data: zod
		.object({
			decal: zod
				.object({
					start: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					end: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					fill: zod.string().nullish(),
					imageUrl: zod.string().nullish(),
					crops: zod.record(zod.string(), zod.string()).nullish(),
				})
				.nullish(),
			elements: zod.object({
				background: zod.object({
					size: zod
						.object({
							x: zod.number(),
							y: zod.number(),
						})
						.nullish(),
					fill: zod.string().nullish(),
					align: zod.string().nullish(),
					rects: zod
						.array(
							zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								fill: zod.string().nullish(),
								useEmbedColor: zod.boolean().nullish(),
								opacity: zod.number().nullish(),
							})
						)
						.nullish(),
					imageUrl: zod.string().nullish(),
					radius: zod.number().nullish(),
					opacity: zod.number().nullish(),
				}),
				gradients: zod
					.array(
						zod.object({
							direction: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							bounds: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							stops: zod
								.array(
									zod.object({
										position: zod.number(),
										fill: zod.string(),
									})
								)
								.nullish(),
							opacity: zod.number().nullish(),
						})
					)
					.nullish(),
				name: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				weight: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				label: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				head: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				badge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rank: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rankWithBadge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
			}),
		})
		.nullish(),
	leaderboard: zod
		.object({
			background: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			overlay: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			gradientOpacity: zod.number().nullish(),
			gradientColor: zod.string().nullish(),
			font: zod.string().nullish(),
			name: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			score: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			rank: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			subtitle: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
		})
		.nullish(),
});

/**
 * @summary Update Shop Style
 */
export const updateStyleParams = zod.object({
	styleId: zod.number(),
});

export const updateStyleBodyStyleFormatterMax = 64;
export const updateStyleBodyNameMax = 64;
export const updateStyleBodyCollectionMax = 64;
export const updateStyleBodyDescriptionMax = 1024;
export const updateStyleBodyImageTitleMax = 64;
export const updateStyleBodyImageDescriptionMax = 512;
export const updateStyleBodyImagesItemTitleMax = 64;
export const updateStyleBodyImagesItemDescriptionMax = 512;

export const updateStyleBody = zod.object({
	id: zod.number(),
	styleFormatter: zod.string().max(updateStyleBodyStyleFormatterMax).nullish(),
	name: zod.string().max(updateStyleBodyNameMax).nullish(),
	collection: zod.string().max(updateStyleBodyCollectionMax).nullish(),
	description: zod.string().max(updateStyleBodyDescriptionMax).nullish(),
	image: zod
		.object({
			title: zod.string().max(updateStyleBodyImageTitleMax).nullish().describe('Image title'),
			description: zod.string().max(updateStyleBodyImageDescriptionMax).nullish().describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	images: zod.array(
		zod.object({
			title: zod.string().max(updateStyleBodyImagesItemTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(updateStyleBodyImagesItemDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
	),
	products: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			slug: zod.string().nullish(),
		})
	),
	data: zod
		.object({
			decal: zod
				.object({
					start: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					end: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					fill: zod.string().nullish(),
					imageUrl: zod.string().nullish(),
					crops: zod.record(zod.string(), zod.string()).nullish(),
				})
				.nullish(),
			elements: zod.object({
				background: zod.object({
					size: zod
						.object({
							x: zod.number(),
							y: zod.number(),
						})
						.nullish(),
					fill: zod.string().nullish(),
					align: zod.string().nullish(),
					rects: zod
						.array(
							zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								fill: zod.string().nullish(),
								useEmbedColor: zod.boolean().nullish(),
								opacity: zod.number().nullish(),
							})
						)
						.nullish(),
					imageUrl: zod.string().nullish(),
					radius: zod.number().nullish(),
					opacity: zod.number().nullish(),
				}),
				gradients: zod
					.array(
						zod.object({
							direction: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							bounds: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							stops: zod
								.array(
									zod.object({
										position: zod.number(),
										fill: zod.string(),
									})
								)
								.nullish(),
							opacity: zod.number().nullish(),
						})
					)
					.nullish(),
				name: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				weight: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				label: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				head: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				badge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rank: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rankWithBadge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
			}),
		})
		.nullish(),
	leaderboard: zod
		.object({
			background: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			overlay: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			gradientOpacity: zod.number().nullish(),
			gradientColor: zod.string().nullish(),
			font: zod.string().nullish(),
			name: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			score: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			rank: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			subtitle: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
		})
		.nullish(),
});

/**
 * @summary Remove Image from Style
 */
export const deleteStyleImageParams = zod.object({
	styleId: zod.number(),
	imagePath: zod.string(),
});

/**
 * @summary Get Shop Styles
 */
export const getStylesResponseStyleFormatterMax = 64;
export const getStylesResponseNameMax = 64;
export const getStylesResponseCollectionMax = 64;
export const getStylesResponseDescriptionMax = 1024;
export const getStylesResponseImageTitleMax = 64;
export const getStylesResponseImageDescriptionMax = 512;
export const getStylesResponseImagesItemTitleMax = 64;
export const getStylesResponseImagesItemDescriptionMax = 512;

export const getStylesResponseItem = zod.object({
	id: zod.number(),
	styleFormatter: zod.string().max(getStylesResponseStyleFormatterMax).nullish(),
	name: zod.string().max(getStylesResponseNameMax).nullish(),
	collection: zod.string().max(getStylesResponseCollectionMax).nullish(),
	description: zod.string().max(getStylesResponseDescriptionMax).nullish(),
	image: zod
		.object({
			title: zod.string().max(getStylesResponseImageTitleMax).nullish().describe('Image title'),
			description: zod.string().max(getStylesResponseImageDescriptionMax).nullish().describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
		.nullish(),
	images: zod.array(
		zod.object({
			title: zod.string().max(getStylesResponseImagesItemTitleMax).nullish().describe('Image title'),
			description: zod
				.string()
				.max(getStylesResponseImagesItemDescriptionMax)
				.nullish()
				.describe('Image description'),
			order: zod.number().nullish().describe('Image ordering number'),
			url: zod.string().describe('Full image URL'),
		})
	),
	products: zod.array(
		zod.object({
			id: zod.string(),
			name: zod.string(),
			slug: zod.string().nullish(),
		})
	),
	data: zod
		.object({
			decal: zod
				.object({
					start: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					end: zod.object({
						x: zod.number(),
						y: zod.number(),
					}),
					fill: zod.string().nullish(),
					imageUrl: zod.string().nullish(),
					crops: zod.record(zod.string(), zod.string()).nullish(),
				})
				.nullish(),
			elements: zod.object({
				background: zod.object({
					size: zod
						.object({
							x: zod.number(),
							y: zod.number(),
						})
						.nullish(),
					fill: zod.string().nullish(),
					align: zod.string().nullish(),
					rects: zod
						.array(
							zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								fill: zod.string().nullish(),
								useEmbedColor: zod.boolean().nullish(),
								opacity: zod.number().nullish(),
							})
						)
						.nullish(),
					imageUrl: zod.string().nullish(),
					radius: zod.number().nullish(),
					opacity: zod.number().nullish(),
				}),
				gradients: zod
					.array(
						zod.object({
							direction: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							bounds: zod.object({
								start: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
								end: zod.object({
									x: zod.number(),
									y: zod.number(),
								}),
							}),
							stops: zod
								.array(
									zod.object({
										position: zod.number(),
										fill: zod.string(),
									})
								)
								.nullish(),
							opacity: zod.number().nullish(),
						})
					)
					.nullish(),
				name: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				weight: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				label: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				head: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				badge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rank: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
				rankWithBadge: zod
					.object({
						font: zod.string().nullish(),
						fill: zod.string().nullish(),
						fontSize: zod.number().nullish(),
						position: zod.object({
							x: zod.number(),
							y: zod.number(),
						}),
						maxWidth: zod.number().nullish(),
						maxHeight: zod.number().nullish(),
						outline: zod
							.object({
								width: zod.number().nullish(),
								opacity: zod.number().nullish(),
								fill: zod.string().nullish(),
							})
							.nullish(),
						background: zod
							.object({
								fill: zod.string().nullish(),
								opacity: zod.number().nullish(),
								padding: zod.number().nullish(),
								radius: zod.number().nullish(),
							})
							.nullish(),
					})
					.nullish(),
			}),
		})
		.nullish(),
	leaderboard: zod
		.object({
			background: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			overlay: zod
				.object({
					imageUrl: zod.string().nullish(),
					imageOpacity: zod.string().nullish(),
					fillColor: zod.string().nullish(),
					fillOpacity: zod.number().nullish(),
					borderColor: zod.string().nullish(),
					borderOpacity: zod.number().nullish(),
					align: zod.string().nullish(),
				})
				.nullish(),
			gradientOpacity: zod.number().nullish(),
			gradientColor: zod.string().nullish(),
			font: zod.string().nullish(),
			name: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			score: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			rank: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
			subtitle: zod
				.object({
					color: zod.string().nullish(),
					shadowColor: zod.string().nullish(),
					shadowOpacity: zod.number().nullish(),
					fontWeight: zod.number().nullish(),
				})
				.nullish(),
		})
		.nullish(),
});
export const getStylesResponse = zod.array(getStylesResponseItem);

/**
 * Get all farming weight constants
 * @summary Get all weight constants
 */
export const getAllWeightsResponse = zod.object({
	crops: zod.record(zod.string(), zod.number()),
	pests: zod.object({
		brackets: zod.record(zod.string(), zod.number()),
		values: zod.record(zod.string(), zod.record(zod.string(), zod.number())),
	}),
});

/**
 * @summary Get farming weight for a profile member
 */
export const getWeightForProfileParams = zod.object({
	playerUuid: zod.string(),
	profileUuid: zod.string(),
});

export const getWeightForProfileQueryCollectionsDefault = false;

export const getWeightForProfileQueryParams = zod.object({
	collections: zod.boolean().nullish(),
});

export const getWeightForProfileResponse = zod.object({
	totalWeight: zod.number(),
	crops: zod.record(zod.string(), zod.number()).nullish(),
	cropWeight: zod.record(zod.string(), zod.number()),
	bonusWeight: zod.record(zod.string(), zod.number()),
	uncountedCrops: zod.record(zod.string(), zod.number()),
	pests: zod.object({
		beetle: zod.number(),
		cricket: zod.number(),
		fly: zod.number(),
		locust: zod.number(),
		mite: zod.number(),
		mosquito: zod.number(),
		moth: zod.number(),
		rat: zod.number(),
		slug: zod.number(),
		earthworm: zod.number(),
		mouse: zod.number().nullish(),
	}),
	inventory: zod
		.object({
			armor: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			tools: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			equipment: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			accessories: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
		})
		.nullish(),
	lastUpdated: zod.number(),
});

/**
 * @summary Get farming weight for a player's selected profile
 */
export const getWeightForSelectedParams = zod.object({
	playerUuid: zod.string(),
});

export const getWeightForSelectedQueryCollectionsDefault = false;

export const getWeightForSelectedQueryParams = zod.object({
	collections: zod.boolean().nullish(),
});

export const getWeightForSelectedResponse = zod.object({
	totalWeight: zod.number(),
	crops: zod.record(zod.string(), zod.number()).nullish(),
	cropWeight: zod.record(zod.string(), zod.number()),
	bonusWeight: zod.record(zod.string(), zod.number()),
	uncountedCrops: zod.record(zod.string(), zod.number()),
	pests: zod.object({
		beetle: zod.number(),
		cricket: zod.number(),
		fly: zod.number(),
		locust: zod.number(),
		mite: zod.number(),
		mosquito: zod.number(),
		moth: zod.number(),
		rat: zod.number(),
		slug: zod.number(),
		earthworm: zod.number(),
		mouse: zod.number().nullish(),
	}),
	inventory: zod
		.object({
			armor: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			tools: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			equipment: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
			accessories: zod.array(
				zod.object({
					id: zod.number().describe('Old Minecraft id of the item'),
					count: zod.number().describe('Minecraft stack count of the item'),
					skyblockId: zod.string().nullish().describe('Skyblock ID of the item'),
					uuid: zod
						.string()
						.nullish()
						.describe('Item UUID to uniquely identify a specific instance of this item'),
					name: zod.string().nullish().describe('Item name, first line of the lore'),
					lore: zod.array(zod.string()).nullish().describe('List of item lore in order'),
					enchantments: zod
						.record(zod.string(), zod.number())
						.nullish()
						.describe('Applied enchantments with their levels'),
					attributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAttributes not included elsewhere'),
					itemAttributes: zod
						.record(zod.string(), zod.string())
						.nullish()
						.describe('ExtraAtrributes.Attributes for attribute shards'),
					gems: zod
						.record(zod.string(), zod.string().nullable())
						.nullish()
						.describe('Applied gems with gem rarity, null for an unlocked gem slot without a gem'),
					petInfo: zod
						.object({
							type: zod.string(),
							active: zod.boolean(),
							exp: zod.number(),
							level: zod.number(),
							tier: zod.string(),
							candyUsed: zod.number(),
							heldItem: zod.string().nullish(),
						})
						.nullish()
						.describe('Pet info if item is a pet'),
				})
			),
		})
		.nullish(),
	lastUpdated: zod.number(),
});

/**
 * Get farming weight for all profiles of a player
 * @summary Get farming weight for all profiles of a player
 */
export const getWeightForProfilesParams = zod.object({
	playerUuid: zod.string(),
});

export const getWeightForProfilesQueryCollectionsDefault = false;

export const getWeightForProfilesQueryParams = zod.object({
	collections: zod.boolean().nullish(),
});

export const getWeightForProfilesResponse = zod.object({
	selectedProfileId: zod.string().nullish(),
	profiles: zod.array(
		zod.object({
			profileId: zod.string(),
			profileName: zod.string(),
			totalWeight: zod.number(),
			crops: zod.record(zod.string(), zod.number()).nullish(),
			cropWeight: zod.record(zod.string(), zod.number()),
			bonusWeight: zod.record(zod.string(), zod.number()),
			uncountedCrops: zod.record(zod.string(), zod.number()),
			pests: zod.object({
				beetle: zod.number(),
				cricket: zod.number(),
				fly: zod.number(),
				locust: zod.number(),
				mite: zod.number(),
				mosquito: zod.number(),
				moth: zod.number(),
				rat: zod.number(),
				slug: zod.number(),
				earthworm: zod.number(),
				mouse: zod.number().nullish(),
			}),
			lastUpdated: zod.number(),
		})
	),
});
