{
	"x-generator": "NSwag v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))",
	"openapi": "3.0.0",
	"info": {
	  "title": "Elite API",
	  "description": "A backend API for https://elitebot.dev/ that provides Hypixel Skyblock data.\n<br>\nUse of this API requires following the [Elite API TOS](https://elitebot.dev/apiterms). This API is not affiliated with Hypixel or Mojang.",
	  "termsOfService": "https://elitebot.dev/apiterms",
	  "contact": {
		"name": "- GitHub",
		"url": "https://github.com/EliteFarmers/API"
	  },
	  "license": {
		"name": "GPL-3.0",
		"url": "https://github.com/EliteFarmers/API/blob/master/LICENSE.txt"
	  },
	  "version": "v1"
	},
	"servers": [
	  {
		"url": "https://api.elitebot.dev"
	  }
	],
	"paths": {
	  "/account/{player}": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Get Minecraft Account",
		  "operationId": "EliteAPIFeaturesAccountGetAccountGetAccountEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/MinecraftAccountDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		},
		"post": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Link Account",
		  "operationId": "EliteAPIFeaturesAccountLinkAccountLinkAccountEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Unlink Account",
		  "operationId": "EliteAPIFeaturesAccountUnlinkAccountUnlinkAccountEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/{discordId}": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Get Minecraft Account from Discord Id",
		  "operationId": "EliteAPIFeaturesAccountGetAccountFromDiscordGetAccountFromDiscordEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/MinecraftAccountDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/account/{discordId}/settings": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Get Account Settings",
		  "operationId": "EliteAPIFeaturesAccountGetAccountSettingsGetAccountSettingsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/UserSettingsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/account": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Get Logged-In Account",
		  "operationId": "EliteAPIFeaturesAccountGetAuthAccountGetAuthAccountEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthorizedAccountDto"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/purchases": {
		"post": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Refresh Purchases",
		  "operationId": "EliteAPIFeaturesAccountRefreshPurchasesRefreshPurchasesEndpoint",
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/search": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Search for Minecraft Account",
		  "operationId": "EliteAPIFeaturesAccountSearchAccountsSearchAccountsEndpoint",
		  "parameters": [
			{
			  "name": "q",
			  "in": "query",
			  "required": true,
			  "description": "Search query string",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "start",
			  "in": "query",
			  "description": "Start of results for pagination",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "type": "string"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/account/primary/{player}": {
		"post": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Set Primary Account",
		  "operationId": "EliteAPIFeaturesAccountSetPrimaryAccountSetPrimaryAccountEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/{playerUuid}/badges": {
		"post": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Update Account Settings",
		  "operationId": "EliteAPIFeaturesAccountUpdateBadgesUpdateBadgesEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "badges",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "array",
				  "items": {
					"$ref": "#/components/schemas/EditUserBadgeDto"
				  }
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/settings": {
		"patch": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Update Account Settings",
		  "operationId": "EliteAPIFeaturesAccountUpdateSettingsUpdateAccountEndpoint",
		  "requestBody": {
			"x-name": "UpdateUserSettingsDto",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateUserSettingsDto"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/user/{discordId}/roles/{role}": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Add a role to a user",
		  "operationId": "EliteAPIFeaturesAdminAdminsAddRoleToUserAddRoleToUserEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "role",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Remove a role from a user",
		  "operationId": "EliteAPIFeaturesAdminAdminsRemoveRoleFromUserRemoveRoleFromUserEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "role",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/cooldowns/player/{player}": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Reset a player's cooldowns",
		  "description": "This enables a player's data from Hypixel to be refreshed on the next request.",
		  "operationId": "EliteAPIFeaturesAdminClearPlayerCooldownsClearPlayerCooldownsEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/upcomingcontests": {
		"delete": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Delete all upcoming contests",
		  "description": "Delete all upcoming contests in case of wrong data",
		  "operationId": "EliteAPIFeaturesAdminDeleteUpcomingContestsDeleteUpcomingContestsEndpoint",
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/events/{eventId}": {
		"delete": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Delete Event",
		  "operationId": "EliteAPIFeaturesAdminEventsDeleteEventDeleteEventApprovalEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/events/pending": {
		"get": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Get events pending approval",
		  "operationId": "EliteAPIFeaturesAdminEventsGetPendingEventsGetPendingEventsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventDetailsDto"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/events/{eventId}/approve": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Set event approval",
		  "operationId": "EliteAPIFeaturesAdminEventsSetEventApprovalSetEventApprovalEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "approve",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admins": {
		"get": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Get list of admins",
		  "operationId": "EliteAPIFeaturesAdminGetAdminsGetAdminsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/AccountWithPermsDto"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/roles": {
		"get": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Get list of roles",
		  "operationId": "EliteAPIFeaturesAdminGetRolesGetRolesEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "type": "string"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/link-account": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Link an Account",
		  "operationId": "EliteAPIFeaturesAdminLinkAccountLinkAccountEndpoint",
		  "requestBody": {
			"x-name": "AdminLinkAccountRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/AdminLinkAccountRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/guild/{guildId}/refresh": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Refresh a guild",
		  "description": "This fetches the latest data from Discord for the specified guild",
		  "operationId": "EliteAPIFeaturesAdminRefreshDiscordGuildRefreshDiscordGuildEndpoint",
		  "parameters": [
			{
			  "name": "guildId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/admin/unlink-account": {
		"post": {
		  "tags": [
			"Admin"
		  ],
		  "summary": "Unlink an Account",
		  "operationId": "EliteAPIFeaturesAdminUnlinkAccountUnlinkAccountEndpoint",
		  "requestBody": {
			"x-name": "AdminUnlinkAccountRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/AdminUnlinkAccountRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/auth/me": {
		"get": {
		  "tags": [
			"Auth"
		  ],
		  "summary": "Get logged in account",
		  "description": "Get the account of the currently logged in user",
		  "operationId": "EliteAPIFeaturesAuthGetSelfGetSelfEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthSessionDto"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/auth/login": {
		"post": {
		  "tags": [
			"Auth"
		  ],
		  "summary": "Log in",
		  "description": "Log in with discord credentials",
		  "operationId": "EliteAPIFeaturesAuthLoginLoginEndpoint",
		  "requestBody": {
			"x-name": "DiscordLoginDto",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/DiscordLoginDto"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthResponseDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/auth/refresh": {
		"post": {
		  "tags": [
			"Auth"
		  ],
		  "summary": "Refresh Auth Token",
		  "description": "Refresh the auth token using the refresh token",
		  "operationId": "EliteAPIFeaturesAuthRefreshRefreshEndpoint",
		  "requestBody": {
			"x-name": "AuthRefreshDto",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/AuthRefreshDto"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthResponseDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/badge/user/{player}/{badgeId}": {
		"post": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Add a badge to a user",
		  "operationId": "EliteAPIFeaturesBadgesAddBadgeToUserAddBadgeToUserBadgeEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "description": "ID of the badge",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Remove a badge from a user",
		  "operationId": "EliteAPIFeaturesBadgesDeleteBadgeFromUserDeleteBadgeFromUserBadgeEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/badges": {
		"post": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Create a badge",
		  "operationId": "EliteAPIFeaturesBadgesCreateBadgeCreateBadgeEndpoint",
		  "requestBody": {
			"x-name": "badge",
			"content": {
			  "multipart/form-data": {
				"schema": {
				  "$ref": "#/components/schemas/CreateBadgeRequest_CreateBadge"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"get": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Get all badges",
		  "operationId": "EliteAPIFeaturesBadgesGetBadgesGetBadgesEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/BadgeDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/badge/{badgeId}": {
		"delete": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Delete a badge",
		  "operationId": "EliteAPIFeaturesBadgesDeleteBadgeDeleteBadgeEndpoint",
		  "parameters": [
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "description": "ID of the badge",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"Badge"
		  ],
		  "summary": "Update a badge",
		  "operationId": "EliteAPIFeaturesBadgesUpdateBadgeUpdateBadgeEndpoint",
		  "parameters": [
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "description": "ID of the badge",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "badge",
			"content": {
			  "multipart/form-data": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateBadgeRequest_UpdateBadge"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/bot/account/{discordId}/{player}": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Link Account",
		  "operationId": "EliteAPIFeaturesBotAccountsLinkAccountLinkAccountEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		},
		"delete": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Unlink Account",
		  "operationId": "EliteAPIFeaturesBotAccountsUnlinkAccountUnlinkAccountEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/account/{discordId}/{player}/primary": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Make Primary Account",
		  "operationId": "EliteAPIFeaturesBotAccountsMakePrimaryMakePrimaryAccountEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/account/{discordId}/purchases": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Refresh User Purchases",
		  "operationId": "EliteAPIFeaturesBotAccountsRefreshPurchasesUnlinkAccountEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/badges/{player}/{badgeId}": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Grant Badge",
		  "operationId": "EliteAPIFeaturesBotBadgesGrantBadgeGrantBadgeEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		},
		"delete": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Remove Badge",
		  "operationId": "EliteAPIFeaturesBotBadgesRemoveBadgeRemoveBadgeEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "badgeId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/contestpings/{discordId}": {
		"delete": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Disable contest pings for a guild",
		  "operationId": "EliteAPIFeaturesBotDisableContestPingsDisableContestPingsPingsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "reason",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/contestpings": {
		"get": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Get list of guilds with contest pings enabled",
		  "operationId": "EliteAPIFeaturesBotGetContestPingsGetContestPingsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ContestPingsFeatureDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/{discordId}": {
		"get": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Get guild",
		  "operationId": "EliteAPIFeaturesBotGetGuildGetBotGuildEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/PrivateGuildDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/{discordId}/jacob": {
		"get": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Get guild jacob",
		  "operationId": "EliteAPIFeaturesBotGetJacobFeatureGetJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/GuildJacobLeaderboardFeature"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		},
		"put": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update guild jacob feature",
		  "operationId": "EliteAPIFeaturesBotUpdateJacobFeatureUpdateJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "reason",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "feature",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateJacobFeatureRequest_UpdateJacobFeature"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/GuildJacobLeaderboardFeature"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/guild/{discordId}": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Request Guild Update",
		  "operationId": "EliteAPIFeaturesBotGuildsRefreshGuildRefreshGuildEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		},
		"patch": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update Guild",
		  "operationId": "EliteAPIFeaturesBotGuildsUpdateGuildUpdateGuildEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "guild",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/IncomingGuildDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/DiscordIdRequest"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/guild/{discordId}/channels": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update Guild Channel",
		  "operationId": "EliteAPIFeaturesBotGuildsUpdateGuildChannelUpdateGuildChannelEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "channel",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/IncomingGuildChannelDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/guild/{discordId}/members/{userId}/roles": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update Guild Member Roles",
		  "operationId": "EliteAPIFeaturesBotGuildsUpdateGuildMemberRolesUpdateGuildMemberRolesEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "userId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "roles",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "array",
				  "items": {
					"type": "string"
				  }
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/guild/{discordId}/roles": {
		"post": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update Guild Role",
		  "operationId": "EliteAPIFeaturesBotGuildsUpdateGuildRoleUpdateGuildRoleEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "role",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/IncomingGuildRoleDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/bot/account": {
		"patch": {
		  "tags": [
			"Bot"
		  ],
		  "summary": "Update user Discord account",
		  "operationId": "EliteAPIFeaturesBotUpdateDiscordAccountUpdateDiscordAccountEndpoint",
		  "requestBody": {
			"x-name": "IncomingAccountDto",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/IncomingAccountDto"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthorizedAccountDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contest/{contestKey}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get a contest from a contest key",
		  "operationId": "EliteAPIFeaturesContestsGetContestFromKeyGetContestFromKeyEndpoint",
		  "parameters": [
			{
			  "name": "contestKey",
			  "in": "path",
			  "required": true,
			  "description": "A contest key in the format from the Hypixel API",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/JacobContestWithParticipationsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/{timestamp}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get the three contests that start at a specific timestamp",
		  "operationId": "EliteAPIFeaturesContestsGetContestsAtTimestampGetContestsAtTimestampEndpoint",
		  "parameters": [
			{
			  "name": "timestamp",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/JacobContestWithParticipationsDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/at/{year}/{month}/{day}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get all contests in a SkyBlock year",
		  "operationId": "EliteAPIFeaturesContestsGetContestsInDayGetContestsInDayEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "month",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock month",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "day",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock day",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/JacobContestWithParticipationsDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/at/{year}/{month}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get all contests in a SkyBlock month",
		  "operationId": "EliteAPIFeaturesContestsGetContestsInMonthGetContestsInMonthEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "month",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock month",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"additionalProperties": {
					  "type": "array",
					  "items": {
						"$ref": "#/components/schemas/JacobContestDto"
					  }
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/at/{year}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get all contests in a SkyBlock year",
		  "operationId": "EliteAPIFeaturesContestsGetContestsInYearGetContestsInYearEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "now",
			  "in": "query",
			  "description": "If the year being requested is the current year. Not required.",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/YearlyContestsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/at/now": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get upcoming contests for the current SkyBlock year",
		  "description": "Uses crowd-sourced data, which may not be accurate.\nData used and provided by <see href=\"https://github.com/hannibal002/SkyHanni/\">SkyHanni</see> to display upcoming contests in-game.",
		  "operationId": "EliteAPIFeaturesContestsGetCurrentContestsGetCurrentContestsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/YearlyContestsDto"
				  }
				}
			  }
			}
		  }
		},
		"post": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Upload upcoming contests for the current SkyBlock year",
		  "description": "Data used and provided by <see href=\"https://github.com/hannibal002/SkyHanni/\">SkyHanni</see> to display upcoming contests in-game.",
		  "operationId": "EliteAPIFeaturesContestsUploadCurrentContestsUploadCurrentContestsEndpoint",
		  "requestBody": {
			"x-name": "Dictionary`2",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "example": {
					"1738390500": [
					  "Cactus",
					  "Carrot",
					  "Melon"
					],
					"1738394100": [
					  "Mushroom",
					  "Nether Wart",
					  "Pumpkin"
					],
					"1738397700": [
					  "Cocoa Beans",
					  "Potato",
					  "Wheat"
					],
					"1738401300": [
					  "Cactus",
					  "Cocoa Beans",
					  "Mushroom"
					],
					"1738404900": [
					  "Carrot",
					  "Nether Wart",
					  "Wheat"
					]
				  },
				  "additionalProperties": {
					"type": "array",
					"items": {
					  "type": "string"
					}
				  }
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			}
		  }
		}
	  },
	  "/contests/{playerUuid}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get all contests for a player",
		  "operationId": "EliteAPIFeaturesContestsGetPlayerParticipationsGetPlayerParticipationsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ContestParticipationDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get all contests for a profile member",
		  "operationId": "EliteAPIFeaturesContestsGetProfileMemberParticipationsGetProfileMemberParticipationsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ContestParticipationDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/records/{year}": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get contest records for a SkyBlock year",
		  "operationId": "EliteAPIFeaturesContestsGetRecordsInYearGetRecordsInYearEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/YearlyCropRecordsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/contests/{playerUuid}/selected": {
		"get": {
		  "tags": [
			"Contests"
		  ],
		  "summary": "Get contests for the player's selected profile member",
		  "operationId": "EliteAPIFeaturesContestsGetSelectedMemberParticipationsGetSelectedMemberParticipationsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ContestParticipationDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/account/{discordId}/entitlements": {
		"get": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Get all entitlements for a user or guild",
		  "operationId": "EliteAPIFeaturesEntitlementsGetEntitlementsGetEntitlementsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "target",
			  "in": "query",
			  "schema": {
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/EntitlementTarget"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EntitlementDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/account/{discordId}/entitlement/{productId}": {
		"post": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Grant a test entitlement to a user or guild",
		  "description": "This passes along a request to Discord to grant a test entitlement to a user or guild, which only works on subscription products.",
		  "operationId": "EliteAPIFeaturesEntitlementsGrantTestEntitlementGrantTestEntitlementEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "target",
			  "in": "query",
			  "schema": {
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/EntitlementTarget"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Account"
		  ],
		  "summary": "Remove a test entitlement from a user or guild",
		  "description": "This passes along a request to Discord to remove a test entitlement from a user or guild.",
		  "operationId": "EliteAPIFeaturesEntitlementsRemoveTestEntitlementRemoveTestEntitlementEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "target",
			  "in": "query",
			  "schema": {
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/EntitlementTarget"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/teams/{teamId}/members/{player}": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Add an Event Member to a Team",
		  "operationId": "EliteAPIFeaturesEventsAdminAddTeamMemberAddTeamMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Kick an Event Team Member",
		  "operationId": "EliteAPIFeaturesEventsAdminKickTeamMemberKickTeamMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/bans/{playerUuid}": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Ban an Event Member",
		  "operationId": "EliteAPIFeaturesEventsAdminBanMemberBanMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "reason",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "string"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AdminEventMemberDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Unban an Event Member",
		  "operationId": "EliteAPIFeaturesEventsAdminUnbanMemberUnbanMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/collection": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Create Collection Event",
		  "operationId": "EliteAPIFeaturesEventsAdminCreateEventCollectionCreateCollectionEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "event",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateCollectionEventDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/medals": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Create Medal Event",
		  "operationId": "EliteAPIFeaturesEventsAdminCreateEventMedalsCreateMedalEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "event",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateMedalEventDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/pests": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Create Pests Event",
		  "operationId": "EliteAPIFeaturesEventsAdminCreateEventPestsCreatePestsEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "event",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreatePestEventDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/weight": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Create Weight Event",
		  "operationId": "EliteAPIFeaturesEventsAdminCreateEventWeightCreateWeightEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "event",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateWeightEventDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/teams": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Create an Event Team",
		  "description": "This generally should only be used for events with a set amount of teams (when users are not allowed to create their own teams)",
		  "operationId": "EliteAPIFeaturesEventsAdminCreateTeamCreateTeamEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "userId",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "team",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateEventTeamDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}": {
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Delete Event",
		  "description": "Delete an event and all associated data. Only available for unapproved events.",
		  "operationId": "EliteAPIFeaturesEventsAdminDeleteEventDeleteEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Update Event",
		  "operationId": "EliteAPIFeaturesEventsAdminUpdateEventCreateWeightEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "event",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/EditEventDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/banner": {
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Delete Custom Event Banner",
		  "operationId": "EliteAPIFeaturesEventsAdminDeleteEventBannerDeleteEventBannerEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Set Custom Event Banner",
		  "operationId": "EliteAPIFeaturesEventsAdminSetEventBannerSetEventBannerEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "data",
			"content": {
			  "multipart/form-data": {
				"schema": {
				  "$ref": "#/components/schemas/EditEventBannerDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/members/{playerUuid}": {
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Delete an Event Member",
		  "operationId": "EliteAPIFeaturesEventsAdminDeleteMemberDeleteMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "recordId",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Ban an Event Member",
		  "operationId": "EliteAPIFeaturesEventsAdminForceAddMemberForceAddMemberEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "query",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/teams/{teamId}": {
		"delete": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Delete an Event Team",
		  "operationId": "EliteAPIFeaturesEventsAdminDeleteTeamDeleteTeamEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Update a team",
		  "operationId": "EliteAPIFeaturesEventsAdminUpdateTeamUpdateTeamEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "team",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateEventTeamDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/event/{eventId}/bans": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get banned event members",
		  "operationId": "EliteAPIFeaturesEventsAdminGetBannedMembersGetBannedMembersEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/AdminEventMemberDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/event/{eventId}/members": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get event members",
		  "operationId": "EliteAPIFeaturesEventsAdminGetEventMembersGetEventMembersEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/AdminEventMemberDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/event/{eventId}/admin": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get an event for a guild",
		  "operationId": "EliteAPIFeaturesEventsAdminGetGuildEventGetGuildEventEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/admin": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get all events for a guild",
		  "operationId": "EliteAPIFeaturesEventsAdminGetGuildEventsGetGuildEventsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventDetailsDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/event/{eventId}/teams": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get event teams",
		  "operationId": "EliteAPIFeaturesEventsAdminGetTeamsGetTeamsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventTeamWithMembersDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/events/{eventId}/teams/{teamId}/owner": {
		"put": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Set player as team owner",
		  "operationId": "EliteAPIFeaturesEventsAdminSetTeamOwnerSetTeamOwnerEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "SetTeamOwnerRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/SetTeamOwnerRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get an event",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventGetEventEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDetailsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/event/defaults": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get event default constants",
		  "description": "Default constants for event settings.",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventDefaultsGetEventDefaultsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventDefaultsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/event/{eventId}/member/{playerUuid}": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get an event member",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventMemberGetEventMembersEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventMemberDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/event/{eventId}/members": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get event members",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventMembersGetEventMembersEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventMemberDetailsDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/event/{eventId}/team/{teamId}": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get an event team",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventTeamGetEventTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventTeamWithMembersDto"
				  }
				}
			  }
			}
		  }
		},
		"delete": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Delete team",
		  "operationId": "EliteAPIFeaturesEventsUserDeleteTeamDeleteTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Update a team",
		  "operationId": "EliteAPIFeaturesEventsUserUpdateTeamUpdateTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "team",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateEventTeamDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/teams": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get event teams",
		  "operationId": "EliteAPIFeaturesEventsPublicGetEventTeamsGetEventTeamsEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventTeamWithMembersDto"
					}
				  }
				}
			  }
			}
		  }
		},
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Create a team",
		  "operationId": "EliteAPIFeaturesEventsUserCreateTeamCreateTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "team",
			"content": {
			  "*/*": {
				"schema": {
				  "$ref": "#/components/schemas/CreateEventTeamDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/teams/words": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get event team word list constants",
		  "description": "Lists of whitelisted words for team name generation.",
		  "operationId": "EliteAPIFeaturesEventsPublicGetTeamWordListGetTeamWordListEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/EventTeamsWordListDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/events": {
		"get": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Get upcoming events",
		  "operationId": "EliteAPIFeaturesEventsPublicGetUpcomingGetUpcomingEventsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventDetailsDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/event/{eventId}/join": {
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Join an event",
		  "operationId": "EliteAPIFeaturesEventsUserJoinEventJoinEventEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/team/{teamId}/join": {
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Join a team",
		  "operationId": "EliteAPIFeaturesEventsUserJoinTeamJoinTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "joinCode",
			"description": "Join code for the team",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "string"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/team/{teamId}/member/{player}": {
		"delete": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Kick a team member",
		  "description": "Kicked members can rejoin the team if they have the join code.",
		  "operationId": "EliteAPIFeaturesEventsUserKickTeamMemberKickTeamMemberEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "description": "Player uuid or ign",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/leave": {
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Join an event",
		  "operationId": "EliteAPIFeaturesEventsUserLeaveEventLeaveEventEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/team/{teamId}/leave": {
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Leave a team",
		  "operationId": "EliteAPIFeaturesEventsUserLeaveTeamLeaveTeamEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/team/{teamId}/owner": {
		"put": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Set player as team owner",
		  "operationId": "EliteAPIFeaturesEventsUserSetTeamOwnerSetTeamOwnerEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "ChangeTeamOwnerRequest",
			"description": "",
			"content": {
			  "*/*": {
				"schema": {
				  "$ref": "#/components/schemas/ChangeTeamOwnerRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/event/{eventId}/team/{teamId}/code": {
		"post": {
		  "tags": [
			"Event"
		  ],
		  "summary": "Generate new team join code",
		  "operationId": "EliteAPIFeaturesEventsUserUpdateTeamCodeUpdateTeamJoinCodeEndpoint",
		  "parameters": [
			{
			  "name": "eventId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			{
			  "name": "teamId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/garden/{profileUuid}": {
		"get": {
		  "tags": [
			"Garden"
		  ],
		  "summary": "Get Garden data for a profile",
		  "description": "Get Garden data for a specific profile by UUID",
		  "operationId": "EliteAPIFeaturesGardenGetGardenGetGardenEndpoint",
		  "parameters": [
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/GardenDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/garden/{playerUuid}/selected": {
		"get": {
		  "tags": [
			"Garden"
		  ],
		  "summary": "Get selected Garden data for a player",
		  "description": "Get selected Garden data for a specific player by UUID",
		  "operationId": "EliteAPIFeaturesGardenGetSelectedGardenGetGardenEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/GardenDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/graph/admin/{playerUuid}/{profileUuid}/crops": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get Admin Crop Collections",
		  "operationId": "EliteAPIFeaturesGraphsGetAdminCropGraphsGetAdminCropGraphsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "from",
			  "in": "query",
			  "description": "Unix timestamp in seconds for the start of the data to return",
			  "schema": {
				"type": "integer",
				"format": "int64",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "days",
			  "in": "query",
			  "description": "Amount of days after the \"from\" timestamp to include",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 7,
				"nullable": true
			  }
			},
			{
			  "name": "perDay",
			  "in": "query",
			  "description": "Data points returned per 24-hour period",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 4,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/CropCollectionsDataPointDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/graph/admin/{playerUuid}/{profileUuid}/skills": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get Admin Skill XP",
		  "operationId": "EliteAPIFeaturesGraphsGetAdminSkillGraphsGetAdminSkillGraphsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "from",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int64",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "days",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 7,
				"nullable": true
			  }
			},
			{
			  "name": "perDay",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 4,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/SkillsDataPointDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/graph/{playerUuid}/{profileUuid}/crops": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get Crop Collections Over Time",
		  "operationId": "EliteAPIFeaturesGraphsGetCropGraphsGetCropGraphsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "from",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int64",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "days",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 7,
				"nullable": true
			  }
			},
			{
			  "name": "perDay",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 4,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/CropCollectionsDataPointDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/graph/{playerUuid}/{profileUuid}/skills": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get Skill XP Over Time",
		  "operationId": "EliteAPIFeaturesGraphsGetSkillGraphsGetSkillGraphsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "from",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int64",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "days",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 7,
				"nullable": true
			  }
			},
			{
			  "name": "perDay",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 4,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/SkillsDataPointDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/graph/medals/now": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get current average medal brackets",
		  "operationId": "EliteAPIFeaturesGraphsMedalsGetCurrentMedalBracketsGetCurrentMedalBracketsEndpoint",
		  "parameters": [
			{
			  "name": "months",
			  "in": "query",
			  "description": "Amount of previous SkyBlock months to include in the average",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 2,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ContestBracketsDetailsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/graph/medals/{year}/{month}": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get average medal brackets for a specific SkyBlock month",
		  "operationId": "EliteAPIFeaturesGraphsMedalsGetMedalBracketsGetMedalBracketsEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "month",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock month",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "months",
			  "in": "query",
			  "description": "Amount of previous SkyBlock months to include in the average",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 2,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ContestBracketsDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/graph/medals/{year}": {
		"get": {
		  "tags": [
			"Graph"
		  ],
		  "summary": "Get average medal brackets for multiple SkyBlock years",
		  "operationId": "EliteAPIFeaturesGraphsMedalsGetMedalBracketsGraphGetMedalBracketsGraphEndpoint",
		  "parameters": [
			{
			  "name": "year",
			  "in": "path",
			  "required": true,
			  "description": "SkyBlock year",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "years",
			  "in": "query",
			  "description": "Amount of previous SkyBlock years to include in the average",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 2,
				"nullable": true
			  }
			},
			{
			  "name": "months",
			  "in": "query",
			  "description": "Amount of previous SkyBlock months to include in the average",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 2,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ContestBracketsDetailsDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/guild/{discordId}/events": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Modify guild event permissions",
		  "operationId": "EliteAPIFeaturesGuildsAdminSetEventsSetEventFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "enable",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			},
			{
			  "name": "max",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get public guild",
		  "operationId": "EliteAPIFeaturesGuildsPublicGetGuildEventsGetPublicGuildEventsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/EventDetailsDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/guild/{discordId}/jacob": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Modify guild jacob permissions",
		  "operationId": "EliteAPIFeaturesGuildsAdminSetJacobLeaderboardsSetJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "enable",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			},
			{
			  "name": "max",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/lock": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Lock or unlock a guild",
		  "operationId": "EliteAPIFeaturesGuildsAdminSetLockedSetGuildLockedEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "locked",
			  "in": "query",
			  "description": "If server subscriptions shouldn't override feature values",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}/public": {
		"post": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Set a guild to public or private",
		  "operationId": "EliteAPIFeaturesGuildsAdminSetPublicSetGuildPublicEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "public",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/guild/{discordId}": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get public guild",
		  "operationId": "EliteAPIFeaturesGuildsPublicGetGuildGetPublicGuildEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/PublicGuildDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/guilds": {
		"get": {
		  "tags": [
			"Guild"
		  ],
		  "summary": "Get public guilds",
		  "operationId": "EliteAPIFeaturesGuildsPublicGetGuildsGetPublicGuildsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/GuildDetailsDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/user/guild/{discordId}/contestpings": {
		"delete": {
		  "tags": [
			"User"
		  ],
		  "summary": "Delete contest pings for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserContestPingsDeleteContestPingsDeleteContestPingsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "reason",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"put": {
		  "tags": [
			"User"
		  ],
		  "summary": "Update contest pings for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserContestPingsUpdateContestPingsDeleteContestPingsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "settings",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateContestPingsRequest_UpdateContestPings"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guilds": {
		"get": {
		  "tags": [
			"User"
		  ],
		  "summary": "Get guild memberships for the current user",
		  "operationId": "EliteAPIFeaturesGuildsUserGetGuildsGetUserGuildsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/GuildMemberDto"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}": {
		"get": {
		  "tags": [
			"User"
		  ],
		  "summary": "Get a guild membership for the current user",
		  "operationId": "EliteAPIFeaturesGuildsUserGetMembershipGetUserGuildEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/AuthorizedGuildDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/jacob/leaderboard": {
		"post": {
		  "tags": [
			"User"
		  ],
		  "summary": "Create a Jacob leaderboard",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobCreateJacobLeaderboardUpdateGuildJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "leaderboard",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateJacobLeaderboardRequest_CreateJacobLeaderboard"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/jacob/{leaderboardId}": {
		"delete": {
		  "tags": [
			"User"
		  ],
		  "summary": "Delete a Jacob leaderboard",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobDeleteJacobLeaderboardDeleteGuildJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "leaderboardId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"User"
		  ],
		  "summary": "Update a Jacob leaderboard",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobUpdateJacobLeaderboardUpdateGuildJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "leaderboardId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "leaderboard",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateJacobLeaderboardRequest_UpdateJacobLeaderboard"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/jacob": {
		"get": {
		  "tags": [
			"User"
		  ],
		  "summary": "Get Jacob leaderboards for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobGetJacobGetGuildJacobEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/GuildJacobLeaderboardFeature"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"User"
		  ],
		  "summary": "Update Jacob leaderboards for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobUpdateJacobUpdateGuildJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "reason",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "feature",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/UpdateJacobFeatureRequest_UpdateJacobFeature"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/jacob/{leaderboardId}/send": {
		"post": {
		  "tags": [
			"User"
		  ],
		  "summary": "Send a Jacob leaderboard to Discord",
		  "operationId": "EliteAPIFeaturesGuildsUserJacobSendJacobLeaderboardSendGuildJacobFeatureEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "leaderboardId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/adminrole": {
		"put": {
		  "tags": [
			"User"
		  ],
		  "summary": "Set an admin role for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserSetAdminRoleSetAdminRoleEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "roleId",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "string"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/invite": {
		"put": {
		  "tags": [
			"User"
		  ],
		  "summary": "Set invite code for a guild",
		  "operationId": "EliteAPIFeaturesGuildsUserSetInviteSetInviteEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "invite",
			"content": {
			  "application/json": {
				"schema": {
				  "type": "string"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/user/guild/{discordId}/purchases": {
		"post": {
		  "tags": [
			"User"
		  ],
		  "summary": "Refresh Guild Purchases",
		  "operationId": "EliteAPIFeaturesGuildsUserUpdatePurchasesUpdateGuildPurchasesEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/leaderboard/{leaderboard}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get Leaderboard",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetLeaderboardGetLeaderboardEndpoint",
		  "parameters": [
			{
			  "name": "leaderboard",
			  "in": "path",
			  "required": true,
			  "description": "Id of leaderboard",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "offset",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "limit",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 20,
				"nullable": true
			  }
			},
			{
			  "name": "interval",
			  "in": "query",
			  "description": "Time interval key of a monthly leaderboard. Format: yyyy-MM",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "mode",
			  "in": "query",
			  "description": "Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "removed",
			  "in": "query",
			  "description": "Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All",
			  "schema": {
				"default": 0,
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/RemovedFilter"
				  }
				]
			  }
			},
			{
			  "name": "new",
			  "in": "query",
			  "description": "Use new leaderboard backend (will be default in the future)",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboards": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get leaderboards",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetLeaderboardsGetLeaderboardsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardsResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboards/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Player's Leaderboard Ranks",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetPlayerLeaderboardRanksGetPlayerLeaderboardRanksEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "max",
			  "in": "query",
			  "description": "Maximum rank number to return. Used if you don't want ranks higher than a certain number.",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardRanksResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboard/rank/{leaderboard}/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Player's Leaderboard Rank",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetPlayerRankGetPlayerRankEndpoint1",
		  "parameters": [
			{
			  "name": "leaderboard",
			  "in": "path",
			  "required": true,
			  "description": "Id of leaderboard",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "includeUpcoming",
			  "in": "query",
			  "description": "Include upcoming players",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			},
			{
			  "name": "upcoming",
			  "in": "query",
			  "description": "Amount of upcoming players to include (max 100). Only works with new leaderboard backend",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "atRank",
			  "in": "query",
			  "description": "Start at a specified rank for upcoming players",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			},
			{
			  "name": "new",
			  "in": "query",
			  "description": "Use new leaderboard backend (will be removed in the future)",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			},
			{
			  "name": "interval",
			  "in": "query",
			  "description": "Time interval key of a monthly leaderboard. Format: yyyy-MM",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "mode",
			  "in": "query",
			  "description": "Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "removed",
			  "in": "query",
			  "description": "Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All",
			  "schema": {
				"default": 0,
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/RemovedFilter"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardPositionDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboard/{leaderboard}/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Player's Leaderboard Rank",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetPlayerRankGetPlayerRankEndpoint2",
		  "parameters": [
			{
			  "name": "leaderboard",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "includeUpcoming",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			},
			{
			  "name": "upcoming",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "atRank",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			},
			{
			  "name": "new",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			},
			{
			  "name": "interval",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "mode",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "removed",
			  "in": "query",
			  "schema": {
				"default": 0,
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/RemovedFilter"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardPositionDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboard/ranks/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Player's Leaderboard Ranks",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetPlayerRanksGetPlayerRanksEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardPositionsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  },
		  "deprecated": true
		}
	  },
	  "/leaderboard/rank/{leaderboard}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Profiles's Leaderboard Rank",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetProfileRankGetProfileRankEndpoint1",
		  "parameters": [
			{
			  "name": "leaderboard",
			  "in": "path",
			  "required": true,
			  "description": "Id of leaderboard",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "includeUpcoming",
			  "in": "query",
			  "description": "Include upcoming players",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			},
			{
			  "name": "upcoming",
			  "in": "query",
			  "description": "Amount of upcoming players to include (max 100). Only works with new leaderboard backend",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "atRank",
			  "in": "query",
			  "description": "Start at a specified rank for upcoming players",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			},
			{
			  "name": "new",
			  "in": "query",
			  "description": "Use new leaderboard backend (will be default in the future)",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			},
			{
			  "name": "interval",
			  "in": "query",
			  "description": "Time interval key of a monthly leaderboard. Format: yyyy-MM",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "mode",
			  "in": "query",
			  "description": "Game mode to filter leaderboard by. Leave empty to get all modes.\nOptions: \"ironman\", \"island\", \"classic\"",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "removed",
			  "in": "query",
			  "description": "Removed filter to get leaderboard entries that have been removed from the leaderboard.\nDefault is profiles that have not been removed/wiped.\n0 = Not Removed\n1 = Removed\n2 = All",
			  "schema": {
				"default": 0,
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/RemovedFilter"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardPositionDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/leaderboard/{leaderboard}/{profileUuid}": {
		"get": {
		  "tags": [
			"Leaderboard"
		  ],
		  "summary": "Get a Profiles's Leaderboard Rank",
		  "operationId": "EliteAPIFeaturesLeaderboardsEndpointsGetProfileRankGetProfileRankEndpoint2",
		  "parameters": [
			{
			  "name": "leaderboard",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "includeUpcoming",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			},
			{
			  "name": "upcoming",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"default": 0,
				"nullable": true
			  }
			},
			{
			  "name": "atRank",
			  "in": "query",
			  "schema": {
				"type": "integer",
				"format": "int32",
				"nullable": true
			  }
			},
			{
			  "name": "new",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": true,
				"nullable": true
			  }
			},
			{
			  "name": "interval",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "mode",
			  "in": "query",
			  "schema": {
				"type": "string",
				"nullable": true
			  }
			},
			{
			  "name": "removed",
			  "in": "query",
			  "schema": {
				"default": 0,
				"nullable": true,
				"allOf": [
				  {
					"$ref": "#/components/schemas/RemovedFilter"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LeaderboardPositionDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/player/{discordId}": {
		"get": {
		  "tags": [
			"Player"
		  ],
		  "summary": "Get Linked Accounts",
		  "operationId": "EliteAPIFeaturesPlayerGetLinkedAccountsGetLinkedAccountsEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/LinkedAccountsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/player/{player}": {
		"get": {
		  "tags": [
			"Player"
		  ],
		  "summary": "Get Player Data",
		  "operationId": "EliteAPIFeaturesPlayerGetPlayerDataGetPlayerDataEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/PlayerDataDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/profiles/{playerUuid}": {
		"get": {
		  "tags": [
			"Profile"
		  ],
		  "summary": "Get All Profile Details",
		  "operationId": "EliteAPIFeaturesProfilesEndpointsGetAllProfileDetailsGetAllProfileDetailsEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ProfileDetailsDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/profile/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Profile"
		  ],
		  "summary": "Get Profile Member",
		  "operationId": "EliteAPIFeaturesProfilesEndpointsGetProfileGetProfileEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ProfileMemberDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/profile/{profileUuid}": {
		"get": {
		  "tags": [
			"Profile"
		  ],
		  "summary": "Get Profile Details",
		  "operationId": "EliteAPIFeaturesProfilesEndpointsGetProfileDetailsGetProfileDetailsEndpoint",
		  "parameters": [
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ProfileDetailsDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/profiles/{player}/names": {
		"get": {
		  "tags": [
			"Profile"
		  ],
		  "summary": "Get names of a player's profiles",
		  "operationId": "EliteAPIFeaturesProfilesEndpointsGetProfileNamesGetProfileNamesEndpoint",
		  "parameters": [
			{
			  "name": "player",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ProfileNamesDto"
					}
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/profile/{playerUuid}/selected": {
		"get": {
		  "tags": [
			"Profile"
		  ],
		  "summary": "Get Profile Member",
		  "operationId": "EliteAPIFeaturesProfilesEndpointsGetSelectedProfileGetSelectedProfileEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ProfileMemberDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/shop/category/{categoryId}/product/{productId}": {
		"post": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Add Product to Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesAddProductAddProductToCategoryEndpoint",
		  "parameters": [
			{
			  "name": "categoryId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the category to add the product to",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the product to add to the category",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Remove Product from Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesRemoveProductRemoveProductToCategoryEndpoint",
		  "parameters": [
			{
			  "name": "categoryId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the category to add the product to",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the product to add to the category",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/shop/category": {
		"post": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Create Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesCreateCategoryCreateCategoryEndpoint",
		  "requestBody": {
			"x-name": "CreateCategoryDto",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateCategoryDto"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/shop/category/{categoryId}": {
		"delete": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Delete Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesDeleteCategoryUpdateCategoryEndpoint",
		  "parameters": [
			{
			  "name": "categoryId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the category to delete",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"patch": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Update Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesUpdateCategoryUpdateCategoryEndpoint",
		  "parameters": [
			{
			  "name": "categoryId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the category to update",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "categoryData",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/EditCategoryDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/shop/categories": {
		"get": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Get Shop Categories",
		  "operationId": "EliteAPIFeaturesShopCategoriesGetCategoriesGetCategoriesEndpoint",
		  "parameters": [
			{
			  "name": "includeProducts",
			  "in": "query",
			  "description": "Include products in response",
			  "schema": {
				"type": "boolean",
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ShopCategoryDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/shop/category/{category}": {
		"get": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Get Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesGetCategoryGetCategoryEndpoint",
		  "parameters": [
			{
			  "name": "category",
			  "in": "path",
			  "required": true,
			  "description": "Category id or slug",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ShopCategoryDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/shop/categories/reorder": {
		"post": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Reorder Shop Categories",
		  "operationId": "EliteAPIFeaturesShopCategoriesReorderCategoriesReorderCategoriesEndpoint",
		  "requestBody": {
			"x-name": "ReorderIntRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/ReorderIntRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/shop/category/{categoryId}/reorder": {
		"post": {
		  "tags": [
			"Shop"
		  ],
		  "summary": "Reorder Products in Shop Category",
		  "operationId": "EliteAPIFeaturesShopCategoriesReorderCategoryProductsReorderCategoryProductsEndpoint",
		  "parameters": [
			{
			  "name": "categoryId",
			  "in": "path",
			  "required": true,
			  "description": "Category id",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "ReorderCategoryProductsRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/ReorderCategoryProductsRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/{productId}/cosmetics/{cosmeticId}": {
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Add Cosmetic to Product",
		  "operationId": "EliteAPIFeaturesShopProductsAdminAddCosmeticAddCosmeticToProductEndpoint",
		  "parameters": [
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the produc to add the cosmetic to",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "cosmeticId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the cosmetic to add to the product",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"delete": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Remove Cosmetic from Product",
		  "operationId": "EliteAPIFeaturesShopProductsAdminRemoveCosmeticRemoveCosmeticToProductEndpoint",
		  "parameters": [
			{
			  "name": "productId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the produc to add the cosmetic to",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "cosmeticId",
			  "in": "path",
			  "required": true,
			  "description": "Id of the cosmetic to add to the product",
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/{discordId}/images": {
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Add Image To Product",
		  "operationId": "EliteAPIFeaturesShopProductsAdminAddProductImageAddProductImageEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "thumbnail",
			  "in": "query",
			  "description": "Use this to set the image as the product's thumbnail",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "image",
			"content": {
			  "multipart/form-data": {
				"schema": {
				  "$ref": "#/components/schemas/UploadImageDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/{discordId}/images/{imagePath}": {
		"delete": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Remove Image from Product",
		  "operationId": "EliteAPIFeaturesShopProductsAdminDeleteProductImageDeleteProductImageEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			},
			{
			  "name": "imagePath",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/products/admin": {
		"get": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Get Admin Shop Products",
		  "operationId": "EliteAPIFeaturesShopProductsAdminGetAllProductsGetAllProductsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ProductDto"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/products/refresh": {
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Refresh Shop Products",
		  "operationId": "EliteAPIFeaturesShopProductsAdminRefreshProductsRefreshProductsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ProductDto"
					}
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/{discordId}": {
		"patch": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Update Shop Product",
		  "operationId": "EliteAPIFeaturesShopProductsAdminUpdateProductUpdateProductEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "description": "Discord Snowflake ID of the requested resource (guild, user, etc.)",
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "productData",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/EditProductDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"get": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Get Shop Product",
		  "operationId": "EliteAPIFeaturesShopProductsGetProductGetProductEndpoint",
		  "parameters": [
			{
			  "name": "discordId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int64"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/ProductDto"
				  }
				}
			  }
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/products": {
		"get": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Get Shop Products",
		  "operationId": "EliteAPIFeaturesShopProductsGetProductsGetProductsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/ProductDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/product/style/{styleId}/images": {
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Add Image To Style",
		  "operationId": "EliteAPIFeaturesShopStylesAddStyleImageAddStyleImageEndpoint",
		  "parameters": [
			{
			  "name": "styleId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "thumbnail",
			  "in": "query",
			  "description": "Use this to set the image as the product's thumbnail",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "image",
			"content": {
			  "multipart/form-data": {
				"schema": {
				  "$ref": "#/components/schemas/UploadImageDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/style": {
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Create Shop Style",
		  "operationId": "EliteAPIFeaturesShopStylesCreateStyleCreateStyleEndpoint",
		  "requestBody": {
			"x-name": "CreateStyleRequest",
			"description": "",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/CreateStyleRequest"
				}
			  }
			},
			"required": true,
			"x-position": 1
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/style/{styleId}": {
		"delete": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Delete Shop Style",
		  "operationId": "EliteAPIFeaturesShopStylesDeleteStyleDeleteStyleEndpoint",
		  "parameters": [
			{
			  "name": "styleId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		},
		"get": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Get Shop Style",
		  "operationId": "EliteAPIFeaturesShopStylesGetStyleGetStyleEndpoint",
		  "parameters": [
			{
			  "name": "styleId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/WeightStyleWithDataDto"
				  }
				}
			  }
			}
		  }
		},
		"post": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Update Shop Style",
		  "operationId": "EliteAPIFeaturesShopStylesUpdateStyleUpdateStyleEndpoint",
		  "parameters": [
			{
			  "name": "styleId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  ],
		  "requestBody": {
			"x-name": "data",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/WeightStyleWithDataDto"
				}
			  }
			},
			"required": true
		  },
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"400": {
			  "description": "Bad Request",
			  "content": {
				"application/problem+json": {
				  "schema": {
					"$ref": "#/components/schemas/ErrorResponse"
				  }
				}
			  }
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/style/{styleId}/images/{imagePath}": {
		"delete": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Remove Image from Style",
		  "operationId": "EliteAPIFeaturesShopStylesDeleteStyleImageDeleteStyleImageEndpoint",
		  "parameters": [
			{
			  "name": "styleId",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "integer",
				"format": "int32"
			  }
			},
			{
			  "name": "imagePath",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"204": {
			  "description": "No Content"
			},
			"401": {
			  "description": "Unauthorized"
			},
			"403": {
			  "description": "Forbidden"
			}
		  },
		  "security": [
			{
			  "JWTBearerAuth": []
			}
		  ]
		}
	  },
	  "/product/styles": {
		"get": {
		  "tags": [
			"Product"
		  ],
		  "summary": "Get Shop Styles",
		  "operationId": "EliteAPIFeaturesShopStylesGetStylesGetStylesEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "array",
					"items": {
					  "$ref": "#/components/schemas/WeightStyleWithDataDto"
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/weights/all": {
		"get": {
		  "tags": [
			"Weight"
		  ],
		  "summary": "Get all weight constants",
		  "description": "Get all farming weight constants",
		  "operationId": "EliteAPIFeaturesWeightGetAllWeightsGetAllWeightsEndpoint",
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/WeightsDto"
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/weight/{playerUuid}/{profileUuid}": {
		"get": {
		  "tags": [
			"Weight"
		  ],
		  "summary": "Get farming weight for a profile member",
		  "operationId": "EliteAPIFeaturesWeightGetWeightForProfileGetWeightForProfileEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "profileUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "collections",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/FarmingWeightDto"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/weight/{playerUuid}/selected": {
		"get": {
		  "tags": [
			"Weight"
		  ],
		  "summary": "Get farming weight for a player's selected profile",
		  "operationId": "EliteAPIFeaturesWeightGetWeightForSelectedGetWeightForSelectedEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "collections",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/FarmingWeightDto"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  },
	  "/weight/{playerUuid}": {
		"get": {
		  "tags": [
			"Weight"
		  ],
		  "summary": "Get farming weight for all profiles of a player",
		  "description": "Get farming weight for all profiles of a player",
		  "operationId": "EliteAPIFeaturesWeightGetWeightProfilesGetWeightForProfilesEndpoint",
		  "parameters": [
			{
			  "name": "playerUuid",
			  "in": "path",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "collections",
			  "in": "query",
			  "schema": {
				"type": "boolean",
				"default": false,
				"nullable": true
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success",
			  "content": {
				"application/json": {
				  "schema": {
					"$ref": "#/components/schemas/FarmingWeightAllProfilesDto"
				  }
				}
			  }
			},
			"404": {
			  "description": "Not Found"
			}
		  }
		}
	  }
	},
	"components": {
	  "schemas": {
		"MinecraftAccountDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"primaryAccount",
			"settings",
			"properties",
			"profiles",
			"badges"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"primaryAccount": {
			  "type": "boolean"
			},
			"discordId": {
			  "type": "string",
			  "nullable": true
			},
			"discordUsername": {
			  "type": "string",
			  "nullable": true
			},
			"discordAvatar": {
			  "type": "string",
			  "nullable": true
			},
			"settings": {
			  "$ref": "#/components/schemas/UserSettingsDto"
			},
			"properties": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/MinecraftAccountPropertyDto"
			  }
			},
			"profiles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ProfileDetailsDto"
			  }
			},
			"badges": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/UserBadgeDto"
			  }
			},
			"playerData": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/PlayerDataDto"
				}
			  ]
			}
		  }
		},
		"UserSettingsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"features": {
			  "description": "Configurated features for the user",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ConfiguredProductFeaturesDto"
				}
			  ]
			},
			"weightStyle": {
			  "description": "Selected weight style for the user",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleLinkedDto"
				}
			  ]
			}
		  }
		},
		"ConfiguredProductFeaturesDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"weightStyle": {
			  "type": "integer",
			  "description": "Name of weight style to use.",
			  "format": "int32",
			  "nullable": true
			},
			"weightStyleOverride": {
			  "type": "boolean",
			  "description": "Ability to override other's weight styles.",
			  "nullable": true
			},
			"embedColor": {
			  "type": "string",
			  "description": "Embed color for the bot.",
			  "maxLength": 6,
			  "nullable": true
			},
			"moreInfoDefault": {
			  "type": "boolean",
			  "description": "Show \"More Info\" on weight command by default.",
			  "nullable": true
			},
			"hideShopPromotions": {
			  "type": "boolean",
			  "description": "If shop promotions should be hidden.",
			  "nullable": true
			}
		  }
		},
		"WeightStyleLinkedDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"name": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			}
		  }
		},
		"MinecraftAccountPropertyDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"value"
		  ],
		  "properties": {
			"name": {
			  "type": "string"
			},
			"value": {
			  "type": "string"
			}
		  }
		},
		"ProfileDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"profileId",
			"profileName",
			"gameMode",
			"selected",
			"bankBalance",
			"deleted",
			"members"
		  ],
		  "properties": {
			"profileId": {
			  "type": "string"
			},
			"profileName": {
			  "type": "string"
			},
			"gameMode": {
			  "type": "string"
			},
			"selected": {
			  "type": "boolean"
			},
			"bankBalance": {
			  "type": "number",
			  "format": "double"
			},
			"deleted": {
			  "type": "boolean"
			},
			"members": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/MemberDetailsDto"
			  }
			}
		  }
		},
		"MemberDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"uuid",
			"username",
			"active",
			"farmingWeight"
		  ],
		  "properties": {
			"uuid": {
			  "type": "string"
			},
			"username": {
			  "type": "string"
			},
			"profileName": {
			  "type": "string",
			  "nullable": true
			},
			"active": {
			  "type": "boolean"
			},
			"farmingWeight": {
			  "type": "number",
			  "format": "double"
			},
			"meta": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			}
		  }
		},
		"MemberCosmeticsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"prefix": {
			  "type": "string",
			  "maxLength": 16,
			  "nullable": true
			},
			"suffix": {
			  "type": "string",
			  "maxLength": 16,
			  "nullable": true
			},
			"leaderboard": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberLeaderboardCosmeticsDto"
				}
			  ]
			}
		  }
		},
		"MemberLeaderboardCosmeticsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"styleId": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"backgroundColor": {
			  "type": "string",
			  "nullable": true
			},
			"borderColor": {
			  "type": "string",
			  "nullable": true
			},
			"textColor": {
			  "type": "string",
			  "nullable": true
			},
			"rankColor": {
			  "type": "string",
			  "nullable": true
			},
			"backgroundImage": {
			  "type": "string",
			  "nullable": true
			},
			"overlayImage": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"UserBadgeDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"image",
			"name",
			"description",
			"requirements",
			"timestamp",
			"visible",
			"order"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"image": {
			  "$ref": "#/components/schemas/ImageAttachmentDto"
			},
			"name": {
			  "type": "string"
			},
			"description": {
			  "type": "string"
			},
			"requirements": {
			  "type": "string"
			},
			"timestamp": {
			  "type": "string"
			},
			"visible": {
			  "type": "boolean"
			},
			"order": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ImageAttachmentDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"url"
		  ],
		  "properties": {
			"title": {
			  "type": "string",
			  "description": "Image title",
			  "maxLength": 64,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "description": "Image description",
			  "maxLength": 512,
			  "nullable": true
			},
			"order": {
			  "type": "integer",
			  "description": "Image ordering number",
			  "format": "int32",
			  "nullable": true
			},
			"url": {
			  "type": "string",
			  "description": "Full image URL"
			}
		  }
		},
		"PlayerDataDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"uuid",
			"firstLogin",
			"lastLogin",
			"lastLogout",
			"karma",
			"networkExp",
			"rewardHighScore",
			"rewardScore",
			"rewardStreak",
			"totalDailyRewards",
			"totalRewards"
		  ],
		  "properties": {
			"uuid": {
			  "type": "string"
			},
			"displayname": {
			  "type": "string",
			  "nullable": true
			},
			"firstLogin": {
			  "type": "integer",
			  "format": "int64"
			},
			"lastLogin": {
			  "type": "integer",
			  "format": "int64"
			},
			"lastLogout": {
			  "type": "integer",
			  "format": "int64"
			},
			"karma": {
			  "type": "integer",
			  "format": "int64"
			},
			"networkExp": {
			  "type": "number",
			  "format": "double"
			},
			"rewardHighScore": {
			  "type": "integer",
			  "format": "int32"
			},
			"rewardScore": {
			  "type": "integer",
			  "format": "int32"
			},
			"rewardStreak": {
			  "type": "integer",
			  "format": "int32"
			},
			"totalDailyRewards": {
			  "type": "integer",
			  "format": "int32"
			},
			"totalRewards": {
			  "type": "integer",
			  "format": "int32"
			},
			"prefix": {
			  "type": "string",
			  "nullable": true
			},
			"rank": {
			  "type": "string",
			  "nullable": true
			},
			"newPackageRank": {
			  "type": "string",
			  "nullable": true
			},
			"rankPlusColor": {
			  "type": "string",
			  "nullable": true
			},
			"monthlyPackageRank": {
			  "type": "string",
			  "nullable": true
			},
			"mostRecentMonthlyPackageRank": {
			  "type": "string",
			  "nullable": true
			},
			"monthlyRankColor": {
			  "type": "string",
			  "nullable": true
			},
			"socialMedia": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/SocialMediaLinksDto"
				}
			  ]
			}
		  }
		},
		"SocialMediaLinksDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"discord": {
			  "type": "string",
			  "nullable": true
			},
			"hypixel": {
			  "type": "string",
			  "nullable": true
			},
			"youtube": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"PlayerRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ErrorResponse": {
		  "type": "object",
		  "description": "the dto used to send an error response to the client",
		  "additionalProperties": false,
		  "required": [
			"statusCode",
			"message",
			"errors"
		  ],
		  "properties": {
			"statusCode": {
			  "type": "integer",
			  "description": "the http status code sent to the client. default is 400.",
			  "format": "int32",
			  "default": 400
			},
			"message": {
			  "type": "string",
			  "description": "the message for the error response",
			  "default": "One or more errors occurred!"
			},
			"errors": {
			  "type": "object",
			  "description": "the collection of errors for the current context",
			  "additionalProperties": {
				"type": "array",
				"items": {
				  "type": "string"
				}
			  }
			}
		  }
		},
		"DiscordIdRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"AuthorizedAccountDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"displayName",
			"username",
			"settings",
			"entitlements",
			"minecraftAccounts"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Discord user ID"
			},
			"displayName": {
			  "type": "string",
			  "description": "Discord display name"
			},
			"username": {
			  "type": "string",
			  "description": "Discord username (unique)"
			},
			"discriminator": {
			  "type": "string",
			  "deprecated": true,
			  "x-deprecatedMessage": "Discriminator is deprecated and will be removed in a future version.",
			  "nullable": true
			},
			"email": {
			  "type": "string",
			  "description": "Discord email, not asked for normally",
			  "nullable": true
			},
			"locale": {
			  "type": "string",
			  "description": "Discord user locale",
			  "nullable": true
			},
			"avatar": {
			  "type": "string",
			  "description": "Discord avatar URL hash",
			  "nullable": true
			},
			"settings": {
			  "$ref": "#/components/schemas/UserSettingsDto"
			},
			"entitlements": {
			  "type": "array",
			  "description": "Purchased entitlements from the Discord store",
			  "items": {
				"$ref": "#/components/schemas/EntitlementDto"
			  }
			},
			"minecraftAccounts": {
			  "type": "array",
			  "description": "Linked Minecraft accounts",
			  "items": {
				"$ref": "#/components/schemas/MinecraftAccountDetailsDto"
			  }
			}
		  }
		},
		"EntitlementDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"type",
			"target",
			"productId",
			"product",
			"deleted"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Entitlement ID"
			},
			"type": {
			  "description": "Type of entitlement",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EntitlementType"
				}
			  ]
			},
			"target": {
			  "description": "Target of entitlement.\n0 = None\n1 = User\n2 = Guild",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EntitlementTarget"
				}
			  ]
			},
			"productId": {
			  "type": "string",
			  "description": "SKU ID of the product"
			},
			"product": {
			  "description": "Product details",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ProductDto"
				}
			  ]
			},
			"deleted": {
			  "type": "boolean"
			},
			"consumed": {
			  "type": "boolean",
			  "description": "Consumed status of the entitlement if applicable",
			  "nullable": true
			},
			"startDate": {
			  "type": "string",
			  "description": "Start date of the entitlement",
			  "format": "date-time",
			  "nullable": true
			},
			"endDate": {
			  "type": "string",
			  "description": "End date of the entitlement",
			  "format": "date-time",
			  "nullable": true
			}
		  }
		},
		"EntitlementType": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Purchase",
			"PremiumSubscription",
			"DeveloperGift",
			"TestModePurchase",
			"FreePurchase",
			"UserGift",
			"PremiumPurchase",
			"ApplicationSubscription"
		  ],
		  "enum": [
			1,
			2,
			3,
			4,
			5,
			6,
			7,
			8
		  ]
		},
		"EntitlementTarget": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"None",
			"Guild",
			"User"
		  ],
		  "enum": [
			0,
			1,
			2
		  ]
		},
		"ProductDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"slug",
			"price",
			"available",
			"type",
			"features",
			"weightStyles",
			"images",
			"flags",
			"isSubscription",
			"isGuildSubscription",
			"isUserSubscription"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Product ID"
			},
			"name": {
			  "type": "string",
			  "description": "Product name"
			},
			"slug": {
			  "type": "string",
			  "description": "Slug of the product"
			},
			"price": {
			  "type": "integer",
			  "description": "Product price",
			  "format": "int32"
			},
			"description": {
			  "type": "string",
			  "description": "Product description",
			  "nullable": true
			},
			"available": {
			  "type": "boolean",
			  "description": "If the product is available for purchase"
			},
			"type": {
			  "description": "Type of product",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ProductType"
				}
			  ]
			},
			"features": {
			  "description": "Features of the product",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/UnlockedProductFeaturesDto"
				}
			  ]
			},
			"weightStyles": {
			  "type": "array",
			  "description": "Unlocked weight styles",
			  "items": {
				"$ref": "#/components/schemas/WeightStyleLinkedDto"
			  }
			},
			"thumbnail": {
			  "description": "Product thumbnail",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"images": {
			  "type": "array",
			  "description": "Product Images",
			  "items": {
				"$ref": "#/components/schemas/ImageAttachmentDto"
			  }
			},
			"flags": {
			  "type": "integer",
			  "description": "Discord flags",
			  "format": "int32"
			},
			"isSubscription": {
			  "type": "boolean"
			},
			"isGuildSubscription": {
			  "type": "boolean"
			},
			"isUserSubscription": {
			  "type": "boolean"
			}
		  }
		},
		"ProductType": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Durable",
			"Consumable",
			"Subscription",
			"SubscriptionGroup"
		  ],
		  "enum": [
			2,
			3,
			5,
			6
		  ]
		},
		"UnlockedProductFeaturesDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"badgeId": {
			  "type": "integer",
			  "description": "ID of unlocked badge.",
			  "format": "int32",
			  "nullable": true
			},
			"weightStyles": {
			  "type": "array",
			  "description": "Name of weight style to unlock.",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"weightStyleOverride": {
			  "type": "boolean",
			  "description": "Ability to override other's weight styles.",
			  "nullable": true
			},
			"embedColors": {
			  "type": "array",
			  "description": "Embed color for the bot.",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"hideShopPromotions": {
			  "type": "boolean",
			  "description": "Ability to hide shop promotions.",
			  "nullable": true
			},
			"moreInfoDefault": {
			  "type": "boolean",
			  "description": "Show \"More Info\" on weight command by default.",
			  "nullable": true
			},
			"maxMonthlyEvents": {
			  "type": "integer",
			  "description": "Maximum number of events that can be created in a month. (For guilds)",
			  "format": "int32",
			  "nullable": true
			},
			"maxJacobLeaderboards": {
			  "type": "integer",
			  "description": "Maximum number of jacob leaderboard that can be active at once. (For guilds)",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"MinecraftAccountDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"primaryAccount",
			"badges",
			"properties"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"primaryAccount": {
			  "type": "boolean"
			},
			"badges": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/UserBadgeDto"
			  }
			},
			"properties": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/MinecraftAccountPropertyDto"
			  }
			}
		  }
		},
		"SearchRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"UpdateUserSettingsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"features": {
			  "description": "Configurated features for the user",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ConfiguredProductFeaturesDto"
				}
			  ]
			},
			"weightStyleId": {
			  "type": "integer",
			  "description": "Selected weight style for the user",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"EditUserBadgeDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"badgeId"
		  ],
		  "properties": {
			"badgeId": {
			  "type": "integer",
			  "format": "int32"
			},
			"visible": {
			  "type": "boolean",
			  "nullable": true
			},
			"order": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"UserRoleRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EventIdRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EventDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"type",
			"dynamicStartTime",
			"active",
			"approved",
			"maxTeams",
			"maxTeamMembers"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Event id as a string"
			},
			"name": {
			  "type": "string",
			  "description": "Name of the event"
			},
			"type": {
			  "description": "Type of the event",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EventType"
				}
			  ]
			},
			"mode": {
			  "type": "string",
			  "description": "Team mode of the event",
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "description": "Event description",
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "description": "Event rules",
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "description": "Event prize information",
			  "nullable": true
			},
			"banner": {
			  "description": "Image URL for the event banner",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"startTime": {
			  "type": "string",
			  "description": "Start time of the event as a string in Unix seconds",
			  "nullable": true
			},
			"joinUntilTime": {
			  "type": "string",
			  "description": "Join time of the event as a string in Unix seconds",
			  "nullable": true
			},
			"endTime": {
			  "type": "string",
			  "description": "End time of the event as a string in Unix seconds",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "description": "Currently unused"
			},
			"active": {
			  "type": "boolean",
			  "description": "Event status"
			},
			"approved": {
			  "type": "boolean",
			  "description": "Event approval status"
			},
			"maxTeams": {
			  "type": "integer",
			  "description": "Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"maxTeamMembers": {
			  "type": "integer",
			  "description": "Max amount of members allowed in a team, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"requiredRole": {
			  "type": "string",
			  "description": "Discord role id required to participate in the event",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "description": "Discord role id blocked from participating in the event",
			  "nullable": true
			},
			"guildId": {
			  "type": "string",
			  "description": "Discord server id as a string",
			  "nullable": true
			},
			"data": {
			  "description": "Data specific to the event",
			  "nullable": true
			}
		  }
		},
		"EventType": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"None",
			"FarmingWeight",
			"Collection",
			"Experience",
			"Medals",
			"Pests"
		  ],
		  "enum": [
			0,
			1,
			2,
			3,
			4,
			5
		  ]
		},
		"SetEventApprovalRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"AccountWithPermsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"displayName",
			"username",
			"roles"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"displayName": {
			  "type": "string"
			},
			"username": {
			  "type": "string"
			},
			"roles": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"discriminator": {
			  "type": "string",
			  "nullable": true
			},
			"avatar": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"AdminLinkAccountRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"discordId",
			"player"
		  ],
		  "properties": {
			"discordId": {
			  "type": "string"
			},
			"player": {
			  "type": "string"
			}
		  }
		},
		"GuildIdRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"AdminUnlinkAccountRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"discordId",
			"player"
		  ],
		  "properties": {
			"discordId": {
			  "type": "string"
			},
			"player": {
			  "type": "string"
			}
		  }
		},
		"AuthSessionDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"username",
			"avatar",
			"ign",
			"uuid",
			"roles"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Discord user ID"
			},
			"username": {
			  "type": "string",
			  "description": "Discord username"
			},
			"avatar": {
			  "type": "string",
			  "description": "Discord avatar hash"
			},
			"ign": {
			  "type": "string",
			  "description": "Primary Minecraft IGN"
			},
			"uuid": {
			  "type": "string",
			  "description": "Primary Minecraft UUID"
			},
			"roles": {
			  "type": "array",
			  "description": "List of user roles",
			  "items": {
				"type": "string"
			  }
			}
		  }
		},
		"AuthResponseDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"access_token",
			"refresh_token"
		  ],
		  "properties": {
			"access_token": {
			  "type": "string",
			  "description": "Access token for the user"
			},
			"expires_in": {
			  "type": "string",
			  "description": "Expiry date of the access token in Unix timestamp seconds",
			  "nullable": true
			},
			"refresh_token": {
			  "type": "string",
			  "description": "Refresh token for the user"
			}
		  }
		},
		"DiscordLoginDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"code",
			"redirect_uri"
		  ],
		  "properties": {
			"code": {
			  "type": "string",
			  "description": "Discord login code from OAuth2"
			},
			"redirect_uri": {
			  "type": "string",
			  "description": "Redirect URI from OAuth2"
			}
		  }
		},
		"AuthRefreshDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"user_id",
			"refresh_token"
		  ],
		  "properties": {
			"user_id": {
			  "type": "string",
			  "description": "User ID"
			},
			"refresh_token": {
			  "type": "string",
			  "description": "Refresh token for the user"
			}
		  }
		},
		"PlayerBadgeRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"BadgeRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CreateBadgeRequest_CreateBadge": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"description",
			"requirements",
			"tieToAccount"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "maxLength": 50,
			  "minLength": 0
			},
			"description": {
			  "type": "string",
			  "maxLength": 1024,
			  "minLength": 0
			},
			"requirements": {
			  "type": "string",
			  "maxLength": 512,
			  "minLength": 0
			},
			"tieToAccount": {
			  "type": "boolean"
			},
			"image": {
			  "type": "string",
			  "format": "binary",
			  "nullable": true
			}
		  }
		},
		"BadgeDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"description",
			"requirements"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"name": {
			  "type": "string"
			},
			"description": {
			  "type": "string"
			},
			"requirements": {
			  "type": "string"
			}
		  }
		},
		"DiscordIdPlayerRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"UpdateBadgeRequest_UpdateBadge": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"name": {
			  "type": "string",
			  "maxLength": 50,
			  "minLength": 0,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "maxLength": 1024,
			  "minLength": 0,
			  "nullable": true
			},
			"requirements": {
			  "type": "string",
			  "maxLength": 512,
			  "minLength": 0,
			  "nullable": true
			},
			"image": {
			  "type": "string",
			  "format": "binary",
			  "nullable": true
			}
		  }
		},
		"BotGrantBadgeRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"BotRemoveBadgeRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"DisableContestPingsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ContestPingsFeatureDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"enabled",
			"delaySeconds"
		  ],
		  "properties": {
			"enabled": {
			  "type": "boolean"
			},
			"guildId": {
			  "type": "string",
			  "nullable": true
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"alwaysPingRole": {
			  "type": "string",
			  "nullable": true
			},
			"cropPingRoles": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CropSettingsOfString"
				}
			  ]
			},
			"delaySeconds": {
			  "type": "integer",
			  "format": "int32"
			},
			"disabledReason": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"CropSettingsOfString": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"cactus": {
			  "type": "string",
			  "nullable": true
			},
			"carrot": {
			  "type": "string",
			  "nullable": true
			},
			"potato": {
			  "type": "string",
			  "nullable": true
			},
			"wheat": {
			  "type": "string",
			  "nullable": true
			},
			"melon": {
			  "type": "string",
			  "nullable": true
			},
			"pumpkin": {
			  "type": "string",
			  "nullable": true
			},
			"mushroom": {
			  "type": "string",
			  "nullable": true
			},
			"cocoaBeans": {
			  "type": "string",
			  "nullable": true
			},
			"sugarCane": {
			  "type": "string",
			  "nullable": true
			},
			"netherWart": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"PrivateGuildDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"public",
			"features",
			"botPermissionsNew",
			"discordFeatures",
			"memberCount",
			"channels",
			"roles"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"public": {
			  "type": "boolean"
			},
			"features": {
			  "$ref": "#/components/schemas/GuildFeatures"
			},
			"icon": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"banner": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"inviteCode": {
			  "type": "string",
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "nullable": true
			},
			"adminRole": {
			  "type": "string",
			  "nullable": true
			},
			"botPermissions": {
			  "type": "string",
			  "nullable": true
			},
			"botPermissionsNew": {
			  "type": "string"
			},
			"discordFeatures": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"memberCount": {
			  "type": "integer",
			  "format": "int32"
			},
			"channels": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildChannelDto"
			  }
			},
			"roles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildRoleDto"
			  }
			}
		  }
		},
		"GuildFeatures": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"locked",
			"jacobLeaderboardEnabled",
			"verifiedRoleEnabled",
			"eventsEnabled",
			"contestPingsEnabled"
		  ],
		  "properties": {
			"locked": {
			  "type": "boolean"
			},
			"jacobLeaderboardEnabled": {
			  "type": "boolean"
			},
			"jacobLeaderboard": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/GuildJacobLeaderboardFeature"
				}
			  ]
			},
			"verifiedRoleEnabled": {
			  "type": "boolean"
			},
			"verifiedRole": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/VerifiedRoleFeature"
				}
			  ]
			},
			"eventsEnabled": {
			  "type": "boolean"
			},
			"eventSettings": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/GuildEventSettings"
				}
			  ]
			},
			"contestPingsEnabled": {
			  "type": "boolean"
			},
			"contestPings": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ContestPingsFeature"
				}
			  ]
			}
		  }
		},
		"GuildJacobLeaderboardFeature": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"maxLeaderboards",
			"blockedRoles",
			"blockedUsers",
			"requiredRoles",
			"excludedParticipations",
			"excludedTimespans",
			"leaderboards"
		  ],
		  "properties": {
			"maxLeaderboards": {
			  "type": "integer",
			  "format": "int32"
			},
			"blockedRoles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"blockedUsers": {
			  "type": "array",
			  "items": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			"requiredRoles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"excludedParticipations": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"excludedTimespans": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ExcludedTimespan"
			  }
			},
			"leaderboards": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboard"
			  }
			}
		  }
		},
		"DiscordRole": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"position",
			"permissions"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			},
			"permissions": {
			  "type": "integer",
			  "format": "uint64"
			}
		  }
		},
		"ExcludedTimespan": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "type": "integer",
			  "format": "int64"
			},
			"end": {
			  "type": "integer",
			  "format": "int64"
			},
			"reason": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"GuildJacobLeaderboard": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"startCutoff",
			"endCutoff",
			"active",
			"pingForSmallImprovements",
			"crops"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"startCutoff": {
			  "type": "integer",
			  "format": "int64"
			},
			"endCutoff": {
			  "type": "integer",
			  "format": "int64"
			},
			"title": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"active": {
			  "type": "boolean"
			},
			"requiredRole": {
			  "type": "string",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "nullable": true
			},
			"updateChannelId": {
			  "type": "string",
			  "nullable": true
			},
			"updateRoleId": {
			  "type": "string",
			  "nullable": true
			},
			"pingForSmallImprovements": {
			  "type": "boolean"
			},
			"crops": {
			  "$ref": "#/components/schemas/CropRecords"
			}
		  }
		},
		"CropRecords": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"cactus",
			"carrot",
			"potato",
			"wheat",
			"melon",
			"pumpkin",
			"mushroom",
			"cocoaBeans",
			"sugarCane",
			"netherWart"
		  ],
		  "properties": {
			"cactus": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"carrot": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"potato": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"wheat": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"melon": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"pumpkin": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"mushroom": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"cocoaBeans": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"sugarCane": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			},
			"netherWart": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboardEntry"
			  }
			}
		  }
		},
		"GuildJacobLeaderboardEntry": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"uuid",
			"ign",
			"discordId",
			"record"
		  ],
		  "properties": {
			"uuid": {
			  "type": "string"
			},
			"ign": {
			  "type": "string"
			},
			"discordId": {
			  "type": "string"
			},
			"record": {
			  "$ref": "#/components/schemas/ContestParticipationDto"
			}
		  }
		},
		"ContestParticipationDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"crop",
			"timestamp",
			"collected",
			"position",
			"participants"
		  ],
		  "properties": {
			"crop": {
			  "type": "string"
			},
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"collected": {
			  "type": "integer",
			  "format": "int32"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			},
			"participants": {
			  "type": "integer",
			  "format": "int32"
			},
			"medal": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"VerifiedRoleFeature": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"enabled",
			"autoRoles"
		  ],
		  "properties": {
			"enabled": {
			  "type": "boolean"
			},
			"autoRoles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/AutoRoles"
			  }
			}
		  }
		},
		"AutoRoles": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"requiredWeight"
		  ],
		  "properties": {
			"roleId": {
			  "type": "string",
			  "nullable": true
			},
			"requiredWeight": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"GuildEventSettings": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"maxMonthlyEvents",
			"publicEventsEnabled",
			"createdEvents"
		  ],
		  "properties": {
			"maxMonthlyEvents": {
			  "type": "integer",
			  "format": "int32"
			},
			"publicEventsEnabled": {
			  "type": "boolean"
			},
			"createdEvents": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/EventCreatedDto"
			  }
			}
		  }
		},
		"EventCreatedDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"createdAt"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"createdAt": {
			  "type": "string",
			  "format": "date-time"
			}
		  }
		},
		"ContestPingsFeature": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"enabled",
			"delaySeconds"
		  ],
		  "properties": {
			"enabled": {
			  "type": "boolean"
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"alwaysPingRole": {
			  "type": "string",
			  "nullable": true
			},
			"cropPingRoles": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CropSettingsOfString"
				}
			  ]
			},
			"delaySeconds": {
			  "type": "integer",
			  "format": "int32"
			},
			"disabledReason": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"GuildChannelDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"type",
			"position"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"type": {
			  "type": "integer",
			  "format": "int32"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"GuildRoleDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"position"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"IncomingAccountDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"username"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "uint64"
			},
			"username": {
			  "type": "string"
			},
			"displayName": {
			  "type": "string",
			  "nullable": true
			},
			"discriminator": {
			  "type": "string",
			  "nullable": true
			},
			"avatar": {
			  "type": "string",
			  "nullable": true
			},
			"locale": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"IncomingGuildDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "nullable": true
			},
			"name": {
			  "type": "string"
			},
			"icon": {
			  "type": "string",
			  "nullable": true
			},
			"banner": {
			  "type": "string",
			  "nullable": true
			},
			"permissions": {
			  "type": "string",
			  "nullable": true
			},
			"botPermissions": {
			  "type": "string",
			  "nullable": true
			},
			"features": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"channels": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/IncomingGuildChannelDto"
			  }
			},
			"roles": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/IncomingGuildRoleDto"
			  }
			}
		  }
		},
		"IncomingGuildChannelDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"type",
			"position"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"type": {
			  "type": "integer",
			  "format": "int32"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			},
			"permissions": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"IncomingGuildRoleDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"position"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"JacobContestWithParticipationsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"crop",
			"timestamp",
			"participants",
			"brackets",
			"participations"
		  ],
		  "properties": {
			"crop": {
			  "type": "string"
			},
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"participants": {
			  "type": "integer",
			  "format": "int32"
			},
			"brackets": {
			  "$ref": "#/components/schemas/ContestBracketsDto"
			},
			"participations": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/StrippedContestParticipationDto"
			  }
			}
		  }
		},
		"UpdateJacobFeatureRequest_UpdateJacobFeature": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"blockedRoles",
			"blockedUsers",
			"requiredRoles",
			"excludedParticipations",
			"excludedTimespans",
			"leaderboards"
		  ],
		  "properties": {
			"blockedRoles": {
			  "type": "array",
			  "description": "Blocked roles from participating in the guild's Jacob Leaderboards",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"blockedUsers": {
			  "type": "array",
			  "description": "Blocked users from participating in the guild's Jacob Leaderboards",
			  "items": {
				"type": "integer",
				"format": "uint64"
			  }
			},
			"requiredRoles": {
			  "type": "array",
			  "description": "Required roles to participate in the guild's Jacob Leaderboards",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"excludedParticipations": {
			  "type": "array",
			  "description": "Excluded participations from the guild's Jacob Leaderboards",
			  "items": {
				"type": "string"
			  }
			},
			"excludedTimespans": {
			  "type": "array",
			  "description": "Excluded timespans from the guild's Jacob Leaderboards",
			  "items": {
				"$ref": "#/components/schemas/ExcludedTimespan"
			  }
			},
			"leaderboards": {
			  "type": "array",
			  "description": "Leaderboards for the guild's Jacob Leaderboards",
			  "items": {
				"$ref": "#/components/schemas/GuildJacobLeaderboard"
			  }
			}
		  }
		},
		"ContestBracketsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"bronze",
			"silver",
			"gold",
			"platinum",
			"diamond"
		  ],
		  "properties": {
			"bronze": {
			  "type": "integer",
			  "format": "int32"
			},
			"silver": {
			  "type": "integer",
			  "format": "int32"
			},
			"gold": {
			  "type": "integer",
			  "format": "int32"
			},
			"platinum": {
			  "type": "integer",
			  "format": "int32"
			},
			"diamond": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"StrippedContestParticipationDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"collected",
			"position",
			"removed",
			"playerUuid",
			"playerName",
			"profileUuid"
		  ],
		  "properties": {
			"collected": {
			  "type": "integer",
			  "format": "int32"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			},
			"medal": {
			  "type": "string",
			  "nullable": true
			},
			"removed": {
			  "type": "boolean"
			},
			"playerUuid": {
			  "type": "string"
			},
			"playerName": {
			  "type": "string"
			},
			"profileUuid": {
			  "type": "string"
			}
		  }
		},
		"GetContestFromKeyRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetContestsAtTimestampRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SkyBlockDayRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"JacobContestDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"crop",
			"timestamp",
			"participants"
		  ],
		  "properties": {
			"crop": {
			  "type": "string"
			},
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"participants": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"SkyBlockMonthRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"YearlyContestsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"year",
			"count",
			"complete",
			"contests"
		  ],
		  "properties": {
			"year": {
			  "type": "integer",
			  "format": "int32"
			},
			"count": {
			  "type": "integer",
			  "format": "int32"
			},
			"complete": {
			  "type": "boolean"
			},
			"contests": {
			  "type": "object",
			  "additionalProperties": {
				"type": "array",
				"items": {
				  "type": "string"
				}
			  }
			}
		  }
		},
		"GetContestsInYearRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"PlayerUuidRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"PlayerProfileUuidRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"YearlyCropRecordsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"year",
			"crops"
		  ],
		  "properties": {
			"year": {
			  "type": "integer",
			  "format": "int32"
			},
			"crops": {
			  "type": "object",
			  "additionalProperties": {
				"type": "array",
				"items": {
				  "$ref": "#/components/schemas/ContestParticipationWithTimestampDto"
				}
			  }
			}
		  }
		},
		"ContestParticipationWithTimestampDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"playerUuid",
			"playerName",
			"profileUuid",
			"removed",
			"timestamp",
			"collected",
			"position",
			"participants"
		  ],
		  "properties": {
			"playerUuid": {
			  "type": "string"
			},
			"playerName": {
			  "type": "string"
			},
			"profileUuid": {
			  "type": "string"
			},
			"removed": {
			  "type": "boolean"
			},
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"collected": {
			  "type": "integer",
			  "format": "int32"
			},
			"position": {
			  "type": "integer",
			  "format": "int32"
			},
			"participants": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"SkyBlockYearRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetEntitlementsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"UserEntitlementRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"AddTeamMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"AdminEventMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"eventId",
			"status",
			"id"
		  ],
		  "properties": {
			"playerUuid": {
			  "type": "string",
			  "nullable": true
			},
			"profileId": {
			  "type": "string",
			  "nullable": true
			},
			"playerName": {
			  "type": "string",
			  "nullable": true
			},
			"eventId": {
			  "type": "string"
			},
			"teamId": {
			  "type": "string",
			  "nullable": true
			},
			"status": {
			  "$ref": "#/components/schemas/EventMemberStatus"
			},
			"score": {
			  "type": "string",
			  "nullable": true
			},
			"lastUpdated": {
			  "type": "string",
			  "nullable": true
			},
			"disqualified": {
			  "type": "boolean",
			  "nullable": true
			},
			"data": {
			  "nullable": true
			},
			"meta": {
			  "description": "Metadata of the entry",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			},
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"accountId": {
			  "type": "string",
			  "nullable": true
			},
			"estimatedTimeActive": {
			  "type": "string",
			  "nullable": true
			},
			"notes": {
			  "type": "string",
			  "maxLength": 128,
			  "nullable": true
			}
		  }
		},
		"EventMemberStatus": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Inactive",
			"Active",
			"Left",
			"Disqualified"
		  ],
		  "enum": [
			0,
			1,
			2,
			3
		  ]
		},
		"DeleteEventRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CreateCollectionEventDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"guildId",
			"startTime",
			"endTime",
			"maxTeams",
			"maxTeamMembers"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "description": "The name of the event",
			  "maxLength": 64,
			  "minLength": 1
			},
			"type": {
			  "description": "The type of the event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EventType"
				}
			  ]
			},
			"guildId": {
			  "type": "string",
			  "description": "The Discord server id as a string for the event",
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "An optional description for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "description": "An optional set of rules for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "description": "An optional description of prizes for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"startTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the start time of the event in seconds",
			  "format": "int64"
			},
			"endTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the end time of the event in seconds",
			  "format": "int64"
			},
			"joinTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the latest time a new member can join the event in seconds",
			  "format": "int64",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "description": "Currently unused",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "description": "A Discord role id that is required to participate in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "description": "A Discord role id that is blocked from participating in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"maxTeams": {
			  "type": "integer",
			  "description": "Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"maxTeamMembers": {
			  "type": "integer",
			  "description": "Max amount of members allowed in a team, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"data": {
			  "description": "Data specific to the pest event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CollectionEventData"
				}
			  ]
			}
		  }
		},
		"CollectionEventData": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"collectionWeights"
		  ],
		  "properties": {
			"collectionWeights": {
			  "type": "object",
			  "additionalProperties": {
				"$ref": "#/components/schemas/CollectionWeight"
			  }
			}
		  }
		},
		"CollectionWeight": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"weight"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "nullable": true
			},
			"weight": {
			  "type": "number",
			  "format": "double"
			}
		  }
		},
		"CreateMedalEventDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"guildId",
			"startTime",
			"endTime",
			"maxTeams",
			"maxTeamMembers"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "description": "The name of the event",
			  "maxLength": 64,
			  "minLength": 1
			},
			"type": {
			  "description": "The type of the event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EventType"
				}
			  ]
			},
			"guildId": {
			  "type": "string",
			  "description": "The Discord server id as a string for the event",
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "An optional description for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "description": "An optional set of rules for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "description": "An optional description of prizes for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"startTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the start time of the event in seconds",
			  "format": "int64"
			},
			"endTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the end time of the event in seconds",
			  "format": "int64"
			},
			"joinTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the latest time a new member can join the event in seconds",
			  "format": "int64",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "description": "Currently unused",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "description": "A Discord role id that is required to participate in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "description": "A Discord role id that is blocked from participating in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"maxTeams": {
			  "type": "integer",
			  "description": "Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"maxTeamMembers": {
			  "type": "integer",
			  "description": "Max amount of members allowed in a team, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"data": {
			  "description": "Data specific to the medal event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MedalEventData"
				}
			  ]
			}
		  }
		},
		"MedalEventData": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"medalWeights"
		  ],
		  "properties": {
			"medalWeights": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/ContestMedal"
			  },
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  }
		},
		"ContestMedal": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"None",
			"Bronze",
			"Silver",
			"Gold",
			"Platinum",
			"Diamond"
		  ],
		  "enum": [
			0,
			1,
			2,
			3,
			4,
			5
		  ]
		},
		"CreatePestEventDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"guildId",
			"startTime",
			"endTime",
			"maxTeams",
			"maxTeamMembers"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "description": "The name of the event",
			  "maxLength": 64,
			  "minLength": 1
			},
			"type": {
			  "description": "The type of the event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EventType"
				}
			  ]
			},
			"guildId": {
			  "type": "string",
			  "description": "The Discord server id as a string for the event",
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "An optional description for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "description": "An optional set of rules for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "description": "An optional description of prizes for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"startTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the start time of the event in seconds",
			  "format": "int64"
			},
			"endTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the end time of the event in seconds",
			  "format": "int64"
			},
			"joinTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the latest time a new member can join the event in seconds",
			  "format": "int64",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "description": "Currently unused",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "description": "A Discord role id that is required to participate in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "description": "A Discord role id that is blocked from participating in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"maxTeams": {
			  "type": "integer",
			  "description": "Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"maxTeamMembers": {
			  "type": "integer",
			  "description": "Max amount of members allowed in a team, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"data": {
			  "description": "Data specific to the pest event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/PestEventData"
				}
			  ]
			}
		  }
		},
		"PestEventData": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"pestWeights"
		  ],
		  "properties": {
			"pestWeights": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Pest"
			  },
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  }
		},
		"Pest": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Mite",
			"Cricket",
			"Moth",
			"Earthworm",
			"Slug",
			"Beetle",
			"Locust",
			"Rat",
			"Mosquito",
			"Fly",
			"Mouse"
		  ],
		  "enum": [
			0,
			1,
			2,
			3,
			4,
			5,
			6,
			7,
			8,
			9,
			10
		  ]
		},
		"CreateWeightEventDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"guildId",
			"startTime",
			"endTime",
			"maxTeams",
			"maxTeamMembers"
		  ],
		  "properties": {
			"name": {
			  "type": "string",
			  "description": "The name of the event",
			  "maxLength": 64,
			  "minLength": 1
			},
			"type": {
			  "description": "The type of the event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/EventType"
				}
			  ]
			},
			"guildId": {
			  "type": "string",
			  "description": "The Discord server id as a string for the event",
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "An optional description for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "description": "An optional set of rules for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "description": "An optional description of prizes for the event",
			  "maxLength": 1024,
			  "nullable": true
			},
			"startTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the start time of the event in seconds",
			  "format": "int64"
			},
			"endTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the end time of the event in seconds",
			  "format": "int64"
			},
			"joinTime": {
			  "type": "integer",
			  "description": "Unix timestamp for the latest time a new member can join the event in seconds",
			  "format": "int64",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "description": "Currently unused",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "description": "A Discord role id that is required to participate in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "description": "A Discord role id that is blocked from participating in the event",
			  "maxLength": 24,
			  "nullable": true
			},
			"maxTeams": {
			  "type": "integer",
			  "description": "Max amount of teams allowed in the event, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"maxTeamMembers": {
			  "type": "integer",
			  "description": "Max amount of members allowed in a team, 0 if solo event, -1 if unlimited",
			  "format": "int32"
			},
			"data": {
			  "description": "Data specific to the weight event",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightEventData"
				}
			  ]
			}
		  }
		},
		"WeightEventData": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"cropWeights"
		  ],
		  "properties": {
			"cropWeights": {
			  "type": "object",
			  "description": "The weights of each crop in the event",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Crop"
			  },
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			}
		  }
		},
		"Crop": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Cactus",
			"Carrot",
			"CocoaBeans",
			"Melon",
			"Mushroom",
			"NetherWart",
			"Potato",
			"Pumpkin",
			"SugarCane",
			"Wheat",
			"Seeds"
		  ],
		  "enum": [
			0,
			1,
			2,
			3,
			4,
			5,
			6,
			7,
			8,
			9,
			10
		  ]
		},
		"CreateEventTeamDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"name": {
			  "type": "array",
			  "description": "An array of strings for the team name, example: [ \"Bountiful\", \"Farmers\" ]",
			  "maxItems": 3,
			  "minItems": 1,
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"color": {
			  "type": "string",
			  "maxLength": 7,
			  "nullable": true
			}
		  }
		},
		"DeleteEventBannerRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"DeleteMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"DeleteTeamRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ForceAddMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetBannedMembersRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetEventMembersRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetAdminGuildEventRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EventTeamWithMembersDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"members"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"eventId": {
			  "type": "string",
			  "nullable": true
			},
			"name": {
			  "type": "string",
			  "nullable": true
			},
			"color": {
			  "type": "string",
			  "nullable": true
			},
			"score": {
			  "type": "string",
			  "nullable": true
			},
			"ownerId": {
			  "type": "string",
			  "nullable": true
			},
			"ownerUuid": {
			  "type": "string",
			  "nullable": true
			},
			"members": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/EventMemberDto"
			  }
			},
			"joinCode": {
			  "type": "string",
			  "description": "Join code for the team, only populated if authenticated user is the owner",
			  "nullable": true
			}
		  }
		},
		"EventMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"eventId",
			"status",
			"disqualified"
		  ],
		  "properties": {
			"playerUuid": {
			  "type": "string",
			  "nullable": true
			},
			"playerName": {
			  "type": "string",
			  "nullable": true
			},
			"profileId": {
			  "type": "string",
			  "nullable": true
			},
			"eventId": {
			  "type": "string"
			},
			"teamId": {
			  "type": "string",
			  "nullable": true
			},
			"status": {
			  "$ref": "#/components/schemas/EventMemberStatus"
			},
			"score": {
			  "type": "string",
			  "nullable": true
			},
			"data": {
			  "nullable": true
			},
			"lastUpdated": {
			  "type": "string",
			  "nullable": true
			},
			"disqualified": {
			  "type": "boolean"
			},
			"notes": {
			  "type": "string",
			  "maxLength": 128,
			  "nullable": true
			},
			"meta": {
			  "description": "Metadata of the entry",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			}
		  }
		},
		"GetTeamsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"KickTeamMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SetTeamOwnerRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"player"
		  ],
		  "properties": {
			"player": {
			  "type": "string"
			}
		  }
		},
		"EditEventBannerDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"image": {
			  "type": "string",
			  "format": "binary",
			  "nullable": true
			}
		  }
		},
		"UnbanMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetEventRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EditEventDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"name": {
			  "type": "string",
			  "nullable": true
			},
			"type": {
			  "type": "string",
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "nullable": true
			},
			"rules": {
			  "type": "string",
			  "nullable": true
			},
			"prizeInfo": {
			  "type": "string",
			  "nullable": true
			},
			"startTime": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"joinTime": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"endTime": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"dynamicStartTime": {
			  "type": "boolean",
			  "nullable": true
			},
			"active": {
			  "type": "boolean",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "nullable": true
			},
			"guildId": {
			  "type": "string",
			  "nullable": true
			},
			"weightData": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightEventData"
				}
			  ]
			},
			"medalData": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MedalEventData"
				}
			  ]
			},
			"pestData": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/PestEventData"
				}
			  ]
			},
			"collectionData": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CollectionEventData"
				}
			  ]
			}
		  }
		},
		"UpdateEventTeamDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"name": {
			  "type": "array",
			  "description": "An array of strings for the team name, example: [ \"Bountiful\", \"Farmers\" ]",
			  "maxItems": 3,
			  "minItems": 1,
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"color": {
			  "type": "string",
			  "maxLength": 7,
			  "nullable": true
			},
			"changeCode": {
			  "type": "boolean",
			  "description": "If join code should be changed",
			  "nullable": true
			}
		  }
		},
		"EventDefaultsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"cropWeights",
			"medalValues",
			"pestWeights"
		  ],
		  "properties": {
			"cropWeights": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Crop"
			  },
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"medalValues": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/ContestMedal"
			  },
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"pestWeights": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Pest"
			  },
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  }
		},
		"GetEventMemberRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EventMemberDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"eventId",
			"status"
		  ],
		  "properties": {
			"playerUuid": {
			  "type": "string",
			  "nullable": true
			},
			"profileId": {
			  "type": "string",
			  "nullable": true
			},
			"playerName": {
			  "type": "string",
			  "nullable": true
			},
			"eventId": {
			  "type": "string"
			},
			"teamId": {
			  "type": "string",
			  "nullable": true
			},
			"status": {
			  "$ref": "#/components/schemas/EventMemberStatus"
			},
			"score": {
			  "type": "string",
			  "nullable": true
			},
			"lastUpdated": {
			  "type": "string",
			  "nullable": true
			},
			"disqualified": {
			  "type": "boolean",
			  "nullable": true
			},
			"data": {
			  "nullable": true
			},
			"meta": {
			  "description": "Metadata of the entry",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			}
		  }
		},
		"GetEventMembersRequest2": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetEventTeamRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetEventTeamsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EventTeamsWordListDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"first",
			"second",
			"third"
		  ],
		  "properties": {
			"first": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"second": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"third": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			}
		  }
		},
		"DeleteTeamRequest2": {
		  "type": "object",
		  "additionalProperties": false
		},
		"JoinEventRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"KickTeamMemberRequest2": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LeaveEventRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LeaveTeamRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ChangeTeamOwnerRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"player"
		  ],
		  "properties": {
			"player": {
			  "type": "string"
			}
		  }
		},
		"UpdateTeamJoinCodeRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GardenDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"profileId",
			"experience",
			"completedVisitors",
			"uniqueVisitors",
			"crops",
			"cropUpgrades",
			"plots",
			"composter",
			"visitors",
			"lastSave"
		  ],
		  "properties": {
			"profileId": {
			  "type": "string",
			  "description": "Profile ID"
			},
			"experience": {
			  "type": "integer",
			  "description": "Garden experience",
			  "format": "int32"
			},
			"completedVisitors": {
			  "type": "integer",
			  "description": "Total completed visitors",
			  "format": "int32"
			},
			"uniqueVisitors": {
			  "type": "integer",
			  "description": "Unique visitors unlocked",
			  "format": "int32"
			},
			"crops": {
			  "description": "Crops counted towards milestones",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CropSettingsOfString"
				}
			  ]
			},
			"cropUpgrades": {
			  "description": "Crop upgrades",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CropSettingsOfInt32"
				}
			  ]
			},
			"plots": {
			  "type": "array",
			  "description": "List of unlocked plots",
			  "items": {
				"type": "string"
			  }
			},
			"composter": {
			  "description": "Composter data",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ComposterDto"
				}
			  ]
			},
			"visitors": {
			  "type": "object",
			  "description": "Visitor data",
			  "additionalProperties": {
				"$ref": "#/components/schemas/VisitorDto"
			  }
			},
			"lastSave": {
			  "type": "string",
			  "description": "Last save time in unix seconds"
			}
		  }
		},
		"CropSettingsOfInt32": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"cactus",
			"carrot",
			"potato",
			"wheat",
			"melon",
			"pumpkin",
			"mushroom",
			"cocoaBeans",
			"sugarCane",
			"netherWart"
		  ],
		  "properties": {
			"cactus": {
			  "type": "integer",
			  "format": "int32"
			},
			"carrot": {
			  "type": "integer",
			  "format": "int32"
			},
			"potato": {
			  "type": "integer",
			  "format": "int32"
			},
			"wheat": {
			  "type": "integer",
			  "format": "int32"
			},
			"melon": {
			  "type": "integer",
			  "format": "int32"
			},
			"pumpkin": {
			  "type": "integer",
			  "format": "int32"
			},
			"mushroom": {
			  "type": "integer",
			  "format": "int32"
			},
			"cocoaBeans": {
			  "type": "integer",
			  "format": "int32"
			},
			"sugarCane": {
			  "type": "integer",
			  "format": "int32"
			},
			"netherWart": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ComposterDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"organic_matter",
			"fuel_units",
			"compost_units",
			"compost_items",
			"conversion_ticks",
			"last_save",
			"upgrades",
			"lastSave"
		  ],
		  "properties": {
			"organic_matter": {
			  "type": "number",
			  "format": "double"
			},
			"fuel_units": {
			  "type": "number",
			  "format": "double"
			},
			"compost_units": {
			  "type": "integer",
			  "format": "int32"
			},
			"compost_items": {
			  "type": "integer",
			  "format": "int32"
			},
			"conversion_ticks": {
			  "type": "integer",
			  "format": "int32"
			},
			"last_save": {
			  "type": "integer",
			  "format": "int64"
			},
			"upgrades": {
			  "$ref": "#/components/schemas/ComposterUpgrades"
			},
			"lastSave": {
			  "type": "integer",
			  "description": "Last save time in unix seconds",
			  "format": "int64"
			}
		  }
		},
		"ComposterUpgrades": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"speed",
			"multi_drop",
			"fuel_cap",
			"organic_matter_cap",
			"cost_reduction"
		  ],
		  "properties": {
			"speed": {
			  "type": "integer",
			  "format": "int32"
			},
			"multi_drop": {
			  "type": "integer",
			  "format": "int32"
			},
			"fuel_cap": {
			  "type": "integer",
			  "format": "int32"
			},
			"organic_matter_cap": {
			  "type": "integer",
			  "format": "int32"
			},
			"cost_reduction": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"VisitorDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"visits",
			"accepted"
		  ],
		  "properties": {
			"visits": {
			  "type": "integer",
			  "format": "int32"
			},
			"accepted": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ProfileUuidRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CropCollectionsDataPointDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"timestamp",
			"cropWeight",
			"crops",
			"pests"
		  ],
		  "properties": {
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"cropWeight": {
			  "type": "string"
			},
			"crops": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int64"
			  }
			},
			"pests": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  }
		},
		"GraphRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SkillsDataPointDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"timestamp",
			"skills"
		  ],
		  "properties": {
			"timestamp": {
			  "type": "integer",
			  "format": "int64"
			},
			"skills": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			}
		  }
		},
		"ContestBracketsDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end",
			"brackets"
		  ],
		  "properties": {
			"start": {
			  "type": "string"
			},
			"end": {
			  "type": "string"
			},
			"brackets": {
			  "type": "object",
			  "additionalProperties": {
				"$ref": "#/components/schemas/ContestBracketsDto"
			  }
			}
		  }
		},
		"GetCurrentMedalBracketsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetMedalBracketsRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetMedalBracketsGraphRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SetEventFeatureRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SetJacobFeatureRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SetGuildLockedRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"SetGuildPublicRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"PublicGuildDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"memberCount",
			"features"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"icon": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"banner": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"inviteCode": {
			  "type": "string",
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "nullable": true
			},
			"memberCount": {
			  "type": "integer",
			  "format": "int32"
			},
			"features": {
			  "$ref": "#/components/schemas/PublicGuildFeaturesDto"
			}
		  }
		},
		"PublicGuildFeaturesDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"jacobLeaderboardEnabled",
			"eventsEnabled",
			"contestPingsEnabled"
		  ],
		  "properties": {
			"jacobLeaderboardEnabled": {
			  "type": "boolean"
			},
			"jacobLeaderboard": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/PublicJacobLeaderboardFeatureDto"
				}
			  ]
			},
			"eventsEnabled": {
			  "type": "boolean"
			},
			"eventSettings": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/GuildEventSettings"
				}
			  ]
			},
			"contestPingsEnabled": {
			  "type": "boolean"
			},
			"contestPings": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ContestPingsFeatureDto"
				}
			  ]
			}
		  }
		},
		"PublicJacobLeaderboardFeatureDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"maxLeaderboards",
			"blockedRoles",
			"requiredRoles",
			"excludedTimespans",
			"leaderboards"
		  ],
		  "properties": {
			"maxLeaderboards": {
			  "type": "integer",
			  "format": "int32"
			},
			"blockedRoles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"requiredRoles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/DiscordRole"
			  }
			},
			"excludedTimespans": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ExcludedTimespan"
			  }
			},
			"leaderboards": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/PublicJacobLeaderboardDto"
			  }
			}
		  }
		},
		"PublicJacobLeaderboardDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"startCutoff",
			"endCutoff",
			"active",
			"pingForSmallImprovements",
			"crops"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"startCutoff": {
			  "type": "integer",
			  "format": "int64"
			},
			"endCutoff": {
			  "type": "integer",
			  "format": "int64"
			},
			"title": {
			  "type": "string",
			  "nullable": true
			},
			"active": {
			  "type": "boolean"
			},
			"requiredRole": {
			  "type": "string",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "nullable": true
			},
			"updateChannelId": {
			  "type": "string",
			  "nullable": true
			},
			"updateRoleId": {
			  "type": "string",
			  "nullable": true
			},
			"pingForSmallImprovements": {
			  "type": "boolean"
			},
			"crops": {
			  "$ref": "#/components/schemas/CropRecords"
			}
		  }
		},
		"GuildDetailsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"memberCount"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"icon": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"banner": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"inviteCode": {
			  "type": "string",
			  "nullable": true
			},
			"memberCount": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"DisableContestPingsRequest2": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GuildMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"hasBot",
			"permissions",
			"roles"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"icon": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"hasBot": {
			  "type": "boolean"
			},
			"permissions": {
			  "type": "string"
			},
			"roles": {
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"admin": {
			  "type": "boolean",
			  "nullable": true
			}
		  }
		},
		"UpdateContestPingsRequest_UpdateContestPings": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"enabled",
			"delaySeconds"
		  ],
		  "properties": {
			"enabled": {
			  "type": "boolean",
			  "description": "Indicates whether the contest pings feature is enabled for the guild."
			},
			"channelId": {
			  "type": "string",
			  "description": "Channel ID to send contest pings to.",
			  "nullable": true
			},
			"alwaysPingRole": {
			  "type": "string",
			  "description": "Role ID to ping when a contest starts.",
			  "nullable": true
			},
			"cropPingRoles": {
			  "description": "Individual roles to ping when a contest for a specific crop starts.",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/CropSettingsOfString"
				}
			  ]
			},
			"delaySeconds": {
			  "type": "integer",
			  "description": "Not in use yet. Delay in seconds before sending the ping.",
			  "format": "int32"
			},
			"disabledReason": {
			  "type": "string",
			  "description": "Reason for disabling the feature.",
			  "maxLength": 128,
			  "minLength": 0,
			  "nullable": true
			}
		  }
		},
		"AuthorizedGuildDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"permissions"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"permissions": {
			  "type": "string"
			},
			"guild": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/PrivateGuildDto"
				}
			  ]
			},
			"member": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/GuildMemberDto"
				}
			  ]
			}
		  }
		},
		"DeleteGuildJacobLeaderboardRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CreateJacobLeaderboardRequest_CreateJacobLeaderboard": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"title"
		  ],
		  "properties": {
			"title": {
			  "type": "string",
			  "maxLength": 64,
			  "minLength": 0,
			  "nullable": false
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"startCutoff": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"endCutoff": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"active": {
			  "type": "boolean",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "nullable": true
			},
			"updateChannelId": {
			  "type": "string",
			  "nullable": true
			},
			"updateRoleId": {
			  "type": "string",
			  "nullable": true
			},
			"pingForSmallImprovements": {
			  "type": "boolean",
			  "nullable": true
			}
		  }
		},
		"SendJacobLeaderboardRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LeaderboardDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"title",
			"limit",
			"offset",
			"maxEntries",
			"minimumScore",
			"startsAt",
			"endsAt",
			"profile",
			"entries"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"title": {
			  "type": "string"
			},
			"shortTitle": {
			  "type": "string",
			  "nullable": true
			},
			"interval": {
			  "type": "string",
			  "nullable": true
			},
			"limit": {
			  "type": "integer",
			  "format": "int32"
			},
			"offset": {
			  "type": "integer",
			  "format": "int32"
			},
			"maxEntries": {
			  "type": "integer",
			  "format": "int32"
			},
			"minimumScore": {
			  "type": "number",
			  "description": "The minimum score required to be on the leaderboard",
			  "format": "decimal"
			},
			"startsAt": {
			  "type": "integer",
			  "format": "int64"
			},
			"endsAt": {
			  "type": "integer",
			  "format": "int64"
			},
			"profile": {
			  "type": "boolean"
			},
			"entries": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/LeaderboardEntryDto"
			  }
			}
		  }
		},
		"UpdateJacobLeaderboardRequest_UpdateJacobLeaderboard": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"title": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"channelId": {
			  "type": "string",
			  "nullable": true
			},
			"startCutoff": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"endCutoff": {
			  "type": "integer",
			  "format": "int64",
			  "nullable": true
			},
			"active": {
			  "type": "boolean",
			  "nullable": true
			},
			"requiredRole": {
			  "type": "string",
			  "nullable": true
			},
			"blockedRole": {
			  "type": "string",
			  "nullable": true
			},
			"updateChannelId": {
			  "type": "string",
			  "nullable": true
			},
			"updateRoleId": {
			  "type": "string",
			  "nullable": true
			},
			"pingForSmallImprovements": {
			  "type": "boolean",
			  "nullable": true
			}
		  }
		},
		"LeaderboardEntryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"uuid",
			"amount",
			"removed",
			"initialAmount"
		  ],
		  "properties": {
			"ign": {
			  "type": "string",
			  "description": "Player's IGN if player leaderboard",
			  "nullable": true
			},
			"profile": {
			  "type": "string",
			  "description": "Player's profile name if player leaderboard",
			  "nullable": true
			},
			"uuid": {
			  "type": "string",
			  "description": "Uuid of the player or profile"
			},
			"amount": {
			  "type": "number",
			  "description": "Score of the entry",
			  "format": "double"
			},
			"removed": {
			  "type": "boolean"
			},
			"initialAmount": {
			  "type": "number",
			  "description": "Initial score of the entry",
			  "format": "double"
			},
			"mode": {
			  "type": "string",
			  "description": "Game mode of the entry. Classic profiles are considered default/null.",
			  "nullable": true
			},
			"members": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/ProfileLeaderboardMemberDto"
			  }
			},
			"meta": {
			  "description": "Metadata of the entry",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			}
		  }
		},
		"ProfileLeaderboardMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"ign",
			"uuid",
			"xp",
			"removed"
		  ],
		  "properties": {
			"ign": {
			  "type": "string"
			},
			"uuid": {
			  "type": "string"
			},
			"xp": {
			  "type": "integer",
			  "description": "Skyblock xp of the player (used for sorting)",
			  "format": "int32"
			},
			"removed": {
			  "type": "boolean"
			}
		  }
		},
		"LeaderboardSliceRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"RemovedFilter": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"NotRemoved",
			"Removed",
			"All"
		  ],
		  "enum": [
			0,
			1,
			2
		  ]
		},
		"LeaderboardsResponse": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"leaderboards"
		  ],
		  "properties": {
			"leaderboards": {
			  "type": "object",
			  "additionalProperties": {
				"$ref": "#/components/schemas/LeaderboardInfoDto"
			  }
			}
		  }
		},
		"LeaderboardInfoDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"title",
			"category",
			"profile",
			"minimumScore",
			"intervalType",
			"scoreDataType"
		  ],
		  "properties": {
			"title": {
			  "type": "string",
			  "description": "Leaderboard title"
			},
			"short": {
			  "type": "string",
			  "description": "Leaderboard short title",
			  "nullable": true
			},
			"category": {
			  "type": "string",
			  "description": "Leaderboard category"
			},
			"profile": {
			  "type": "boolean",
			  "description": "If true, the leaderboard is profile based"
			},
			"minimumScore": {
			  "type": "number",
			  "description": "Minimum score required to be on the leaderboard",
			  "format": "decimal"
			},
			"intervalType": {
			  "description": "Interval type of the leaderboard",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/LeaderboardType"
				}
			  ]
			},
			"scoreDataType": {
			  "description": "Score data type of the leaderboard",
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/LeaderboardScoreDataType"
				}
			  ]
			}
		  }
		},
		"LeaderboardType": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Current",
			"Weekly",
			"Monthly"
		  ],
		  "enum": [
			0,
			1,
			2
		  ]
		},
		"LeaderboardScoreDataType": {
		  "type": "integer",
		  "description": "",
		  "x-enumNames": [
			"Double",
			"Long",
			"Decimal"
		  ],
		  "enum": [
			0,
			1,
			2
		  ]
		},
		"LeaderboardRanksResponse": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"ranks"
		  ],
		  "properties": {
			"ranks": {
			  "type": "object",
			  "additionalProperties": {
				"$ref": "#/components/schemas/PlayerLeaderboardEntryWithRankDto"
			  }
			}
		  }
		},
		"PlayerLeaderboardEntryWithRankDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"title",
			"slug",
			"rank",
			"amount",
			"initialAmount",
			"type"
		  ],
		  "properties": {
			"title": {
			  "type": "string"
			},
			"short": {
			  "type": "string",
			  "nullable": true
			},
			"slug": {
			  "type": "string"
			},
			"profile": {
			  "type": "boolean",
			  "nullable": true
			},
			"rank": {
			  "type": "integer",
			  "format": "int32"
			},
			"intervalIdentifier": {
			  "type": "string",
			  "nullable": true
			},
			"amount": {
			  "type": "number",
			  "format": "double"
			},
			"initialAmount": {
			  "type": "number",
			  "format": "double"
			},
			"type": {
			  "$ref": "#/components/schemas/LeaderboardScoreDataType"
			}
		  }
		},
		"LeaderboardRanksRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LeaderboardPositionDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"rank",
			"amount",
			"minAmount",
			"upcomingRank"
		  ],
		  "properties": {
			"rank": {
			  "type": "integer",
			  "description": "Current rank of the player (-1 if not on leaderboard)",
			  "format": "int32"
			},
			"amount": {
			  "type": "number",
			  "description": "Current score of the player (0 if not on leaderboard)",
			  "format": "double"
			},
			"minAmount": {
			  "type": "number",
			  "description": "The minimum amount required to be on the leaderboard. If this is a time based leaderboard,\nthis score is instead required on the normal leaderboard before the player can be on the\ntime based leaderboard",
			  "format": "double"
			},
			"upcomingRank": {
			  "type": "integer",
			  "description": "The starting rank of the returned upcoming players list",
			  "format": "int32"
			},
			"upcomingPlayers": {
			  "type": "array",
			  "description": "List of upcoming players",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/LeaderboardEntryDto"
			  }
			}
		  }
		},
		"GetPlayerRankRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LeaderboardPositionsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"misc",
			"skills",
			"collections",
			"pests",
			"profile"
		  ],
		  "properties": {
			"misc": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"skills": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"collections": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"pests": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"profile": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			}
		  }
		},
		"GetProfileRankRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"LinkedAccountsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"players"
		  ],
		  "properties": {
			"selectedUuid": {
			  "type": "string",
			  "nullable": true
			},
			"players": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/PlayerDataDto"
			  }
			}
		  }
		},
		"ProfileMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"profileId",
			"playerUuid",
			"profileName",
			"api",
			"skyblockXp",
			"purse",
			"bankBalance",
			"collections",
			"collectionTiers",
			"craftedMinions",
			"pets",
			"unparsed",
			"jacob",
			"farmingWeight",
			"skills",
			"chocolateFactory",
			"events",
			"isSelected",
			"wasRemoved",
			"lastUpdated"
		  ],
		  "properties": {
			"profileId": {
			  "type": "string"
			},
			"playerUuid": {
			  "type": "string"
			},
			"profileName": {
			  "type": "string"
			},
			"api": {
			  "$ref": "#/components/schemas/ApiAccessDto"
			},
			"skyblockXp": {
			  "type": "integer",
			  "format": "int32"
			},
			"purse": {
			  "type": "number",
			  "format": "double"
			},
			"bankBalance": {
			  "type": "number",
			  "format": "double"
			},
			"meta": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/MemberCosmeticsDto"
				}
			  ]
			},
			"collections": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int64"
			  }
			},
			"collectionTiers": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"craftedMinions": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"pets": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/PetDto"
			  }
			},
			"unparsed": {
			  "$ref": "#/components/schemas/UnparsedApiDataDto"
			},
			"jacob": {
			  "$ref": "#/components/schemas/JacobDataDto"
			},
			"farmingWeight": {
			  "$ref": "#/components/schemas/FarmingWeightDto"
			},
			"garden": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/GardenDto"
				}
			  ]
			},
			"skills": {
			  "$ref": "#/components/schemas/SkillsDto"
			},
			"chocolateFactory": {
			  "$ref": "#/components/schemas/ChocolateFactoryDto"
			},
			"events": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ProfileEventMemberDto"
			  }
			},
			"isSelected": {
			  "type": "boolean"
			},
			"wasRemoved": {
			  "type": "boolean"
			},
			"lastUpdated": {
			  "type": "integer",
			  "format": "int64"
			}
		  }
		},
		"ApiAccessDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"inventories",
			"collections",
			"skills",
			"vault"
		  ],
		  "properties": {
			"inventories": {
			  "type": "boolean"
			},
			"collections": {
			  "type": "boolean"
			},
			"skills": {
			  "type": "boolean"
			},
			"vault": {
			  "type": "boolean"
			}
		  }
		},
		"PetDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"type",
			"exp",
			"active",
			"candyUsed"
		  ],
		  "properties": {
			"uuid": {
			  "type": "string",
			  "nullable": true
			},
			"type": {
			  "type": "string"
			},
			"exp": {
			  "type": "number",
			  "format": "double"
			},
			"active": {
			  "type": "boolean"
			},
			"tier": {
			  "type": "string",
			  "nullable": true
			},
			"heldItem": {
			  "type": "string",
			  "nullable": true
			},
			"candyUsed": {
			  "type": "integer"
			},
			"skin": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"UnparsedApiDataDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"copper",
			"consumed",
			"levelCaps"
		  ],
		  "properties": {
			"copper": {
			  "type": "integer",
			  "format": "int32"
			},
			"consumed": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"levelCaps": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"perks": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"tempStatBuffs": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/TempStatBuffResponse"
			  }
			},
			"accessoryBagSettings": {
			  "nullable": true
			},
			"bestiary": {
			  "nullable": true
			}
		  }
		},
		"TempStatBuffResponse": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"stat",
			"amount",
			"expire_at"
		  ],
		  "properties": {
			"stat": {
			  "type": "integer",
			  "format": "int32"
			},
			"key": {
			  "type": "string",
			  "nullable": true
			},
			"amount": {
			  "type": "integer",
			  "format": "int32"
			},
			"expire_at": {
			  "type": "integer",
			  "format": "int64"
			}
		  }
		},
		"JacobDataDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"medals",
			"earnedMedals",
			"perks",
			"stats",
			"participations",
			"firstPlaceScores",
			"contests"
		  ],
		  "properties": {
			"medals": {
			  "$ref": "#/components/schemas/MedalInventoryDto"
			},
			"earnedMedals": {
			  "$ref": "#/components/schemas/EarnedMedalInventoryDto"
			},
			"perks": {
			  "$ref": "#/components/schemas/JacobPerksDto"
			},
			"stats": {
			  "$ref": "#/components/schemas/JacobStatsDto"
			},
			"participations": {
			  "type": "integer",
			  "format": "int32"
			},
			"firstPlaceScores": {
			  "type": "integer",
			  "format": "int32"
			},
			"contests": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ContestParticipationDto"
			  }
			}
		  }
		},
		"MedalInventoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"bronze",
			"silver",
			"gold"
		  ],
		  "properties": {
			"bronze": {
			  "type": "integer",
			  "format": "int32"
			},
			"silver": {
			  "type": "integer",
			  "format": "int32"
			},
			"gold": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"EarnedMedalInventoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"bronze",
			"silver",
			"gold",
			"platinum",
			"diamond"
		  ],
		  "properties": {
			"bronze": {
			  "type": "integer",
			  "format": "int32"
			},
			"silver": {
			  "type": "integer",
			  "format": "int32"
			},
			"gold": {
			  "type": "integer",
			  "format": "int32"
			},
			"platinum": {
			  "type": "integer",
			  "format": "int32"
			},
			"diamond": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"JacobPerksDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"doubleDrops",
			"levelCap"
		  ],
		  "properties": {
			"doubleDrops": {
			  "type": "integer",
			  "format": "int32"
			},
			"levelCap": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"JacobStatsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"brackets",
			"personalBests",
			"crops"
		  ],
		  "properties": {
			"brackets": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Crop"
			  },
			  "additionalProperties": {
				"$ref": "#/components/schemas/ContestMedal"
			  }
			},
			"personalBests": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Crop"
			  },
			  "additionalProperties": {
				"type": "integer",
				"format": "int64"
			  }
			},
			"crops": {
			  "type": "object",
			  "x-dictionaryKey": {
				"$ref": "#/components/schemas/Crop"
			  },
			  "additionalProperties": {
				"$ref": "#/components/schemas/JacobCropStatsDto"
			  }
			}
		  }
		},
		"JacobCropStatsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"participations",
			"firstPlaceScores",
			"medals"
		  ],
		  "properties": {
			"participations": {
			  "type": "integer",
			  "format": "int32"
			},
			"firstPlaceScores": {
			  "type": "integer",
			  "format": "int32"
			},
			"personalBestTimestamp": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"medals": {
			  "$ref": "#/components/schemas/EarnedMedalInventoryDto"
			}
		  }
		},
		"FarmingWeightDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"totalWeight",
			"cropWeight",
			"bonusWeight",
			"uncountedCrops",
			"pests",
			"lastUpdated"
		  ],
		  "properties": {
			"totalWeight": {
			  "type": "number",
			  "format": "double"
			},
			"crops": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "integer",
				"format": "int64"
			  }
			},
			"cropWeight": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"bonusWeight": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"uncountedCrops": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"pests": {
			  "$ref": "#/components/schemas/PestsDto"
			},
			"inventory": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/FarmingInventoryDto"
				}
			  ]
			},
			"lastUpdated": {
			  "type": "integer",
			  "format": "int64"
			}
		  }
		},
		"PestsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"beetle",
			"cricket",
			"fly",
			"locust",
			"mite",
			"mosquito",
			"moth",
			"rat",
			"slug",
			"earthworm"
		  ],
		  "properties": {
			"beetle": {
			  "type": "integer",
			  "format": "int32"
			},
			"cricket": {
			  "type": "integer",
			  "format": "int32"
			},
			"fly": {
			  "type": "integer",
			  "format": "int32"
			},
			"locust": {
			  "type": "integer",
			  "format": "int32"
			},
			"mite": {
			  "type": "integer",
			  "format": "int32"
			},
			"mosquito": {
			  "type": "integer",
			  "format": "int32"
			},
			"moth": {
			  "type": "integer",
			  "format": "int32"
			},
			"rat": {
			  "type": "integer",
			  "format": "int32"
			},
			"slug": {
			  "type": "integer",
			  "format": "int32"
			},
			"earthworm": {
			  "type": "integer",
			  "format": "int32"
			},
			"mouse": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"FarmingInventoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"armor",
			"tools",
			"equipment",
			"accessories"
		  ],
		  "properties": {
			"armor": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ItemDto"
			  }
			},
			"tools": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ItemDto"
			  }
			},
			"equipment": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ItemDto"
			  }
			},
			"accessories": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ItemDto"
			  }
			}
		  }
		},
		"ItemDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"count"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"count": {
			  "type": "integer",
			  "format": "byte"
			},
			"skyblockId": {
			  "type": "string",
			  "nullable": true
			},
			"uuid": {
			  "type": "string",
			  "nullable": true
			},
			"name": {
			  "type": "string",
			  "nullable": true
			},
			"lore": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"enchantments": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"attributes": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "string"
			  }
			},
			"gems": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "string"
			  }
			}
		  }
		},
		"SkillsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"farming",
			"mining",
			"combat",
			"foraging",
			"fishing",
			"enchanting",
			"alchemy",
			"carpentry",
			"runecrafting",
			"taming",
			"social"
		  ],
		  "properties": {
			"farming": {
			  "type": "number",
			  "format": "double"
			},
			"mining": {
			  "type": "number",
			  "format": "double"
			},
			"combat": {
			  "type": "number",
			  "format": "double"
			},
			"foraging": {
			  "type": "number",
			  "format": "double"
			},
			"fishing": {
			  "type": "number",
			  "format": "double"
			},
			"enchanting": {
			  "type": "number",
			  "format": "double"
			},
			"alchemy": {
			  "type": "number",
			  "format": "double"
			},
			"carpentry": {
			  "type": "number",
			  "format": "double"
			},
			"runecrafting": {
			  "type": "number",
			  "format": "double"
			},
			"taming": {
			  "type": "number",
			  "format": "double"
			},
			"social": {
			  "type": "number",
			  "format": "double"
			}
		  }
		},
		"ChocolateFactoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"chocolate",
			"totalChocolate",
			"chocolateSincePrestige",
			"chocolateSpent",
			"prestige",
			"lastViewed",
			"uniqueRabbits",
			"totalRabbits",
			"unlockedZorro",
			"refinedTrufflesConsumed",
			"cocoaFortuneUpgrades"
		  ],
		  "properties": {
			"chocolate": {
			  "type": "integer",
			  "format": "int64"
			},
			"totalChocolate": {
			  "type": "integer",
			  "format": "int64"
			},
			"chocolateSincePrestige": {
			  "type": "integer",
			  "format": "int64"
			},
			"chocolateSpent": {
			  "type": "integer",
			  "format": "int64"
			},
			"prestige": {
			  "type": "integer",
			  "format": "int32"
			},
			"lastViewed": {
			  "type": "integer",
			  "format": "int64"
			},
			"uniqueRabbits": {
			  "$ref": "#/components/schemas/ChocolateFactoryRabbitsDto"
			},
			"totalRabbits": {
			  "$ref": "#/components/schemas/ChocolateFactoryRabbitsDto"
			},
			"unlockedZorro": {
			  "type": "boolean"
			},
			"refinedTrufflesConsumed": {
			  "type": "integer",
			  "format": "int32"
			},
			"cocoaFortuneUpgrades": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ChocolateFactoryRabbitsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"common",
			"uncommon",
			"rare",
			"epic",
			"legendary",
			"mythic",
			"divine"
		  ],
		  "properties": {
			"common": {
			  "type": "integer",
			  "format": "int32"
			},
			"uncommon": {
			  "type": "integer",
			  "format": "int32"
			},
			"rare": {
			  "type": "integer",
			  "format": "int32"
			},
			"epic": {
			  "type": "integer",
			  "format": "int32"
			},
			"legendary": {
			  "type": "integer",
			  "format": "int32"
			},
			"mythic": {
			  "type": "integer",
			  "format": "int32"
			},
			"divine": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ProfileEventMemberDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"eventId",
			"eventName",
			"status",
			"rank"
		  ],
		  "properties": {
			"eventId": {
			  "type": "string"
			},
			"eventName": {
			  "type": "string"
			},
			"teamId": {
			  "type": "string",
			  "nullable": true
			},
			"status": {
			  "$ref": "#/components/schemas/EventMemberStatus"
			},
			"rank": {
			  "type": "integer",
			  "description": "Currently not populated",
			  "format": "int32"
			},
			"score": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"ProfileNamesDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name",
			"selected"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"selected": {
			  "type": "boolean"
			}
		  }
		},
		"AddProductToCategoryRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CreateCategoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"title",
			"slug"
		  ],
		  "properties": {
			"title": {
			  "type": "string",
			  "maxLength": 256
			},
			"slug": {
			  "type": "string",
			  "maxLength": 32
			},
			"description": {
			  "type": "string",
			  "maxLength": 512,
			  "nullable": true
			}
		  }
		},
		"DeleteCategoryRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ShopCategoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"title",
			"slug",
			"order",
			"published",
			"products"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"title": {
			  "type": "string"
			},
			"slug": {
			  "type": "string"
			},
			"description": {
			  "type": "string",
			  "nullable": true
			},
			"order": {
			  "type": "integer",
			  "format": "int32"
			},
			"published": {
			  "type": "boolean"
			},
			"products": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ProductDto"
			  }
			}
		  }
		},
		"GetCategoriesRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetCategoryRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"RemoveProductFromCategoryRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"ReorderIntRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"elements"
		  ],
		  "properties": {
			"elements": {
			  "type": "array",
			  "minLength": 1,
			  "nullable": false,
			  "items": {
				"$ref": "#/components/schemas/ReorderElementOfInt32"
			  }
			}
		  }
		},
		"ReorderElementOfInt32": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"order"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"order": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"ReorderCategoryProductsRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"elements"
		  ],
		  "properties": {
			"elements": {
			  "type": "array",
			  "minLength": 1,
			  "nullable": false,
			  "items": {
				"$ref": "#/components/schemas/ReorderElementOfString"
			  }
			}
		  }
		},
		"ReorderElementOfString": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"order"
		  ],
		  "properties": {
			"id": {
			  "type": "string",
			  "nullable": true
			},
			"order": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		},
		"AddCosmeticToProductRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"EditCategoryDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"title": {
			  "type": "string",
			  "maxLength": 256,
			  "nullable": true
			},
			"slug": {
			  "type": "string",
			  "maxLength": 32,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "maxLength": 512,
			  "nullable": true
			},
			"published": {
			  "type": "boolean",
			  "nullable": true
			}
		  }
		},
		"DeleteProductImageRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"UploadImageDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"image"
		  ],
		  "properties": {
			"title": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "maxLength": 512,
			  "nullable": true
			},
			"image": {
			  "type": "string",
			  "format": "binary"
			}
		  }
		},
		"RemoveCosmeticToProductRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"CreateStyleRequest": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"name",
			"data"
		  ],
		  "properties": {
			"styleFormatter": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"name": {
			  "type": "string",
			  "maxLength": 64,
			  "minLength": 0,
			  "nullable": false
			},
			"collection": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "maxLength": 1024,
			  "nullable": true
			},
			"data": {
			  "minLength": 1,
			  "nullable": false,
			  "$ref": "#/components/schemas/WeightStyleData"
			}
		  }
		},
		"EditProductDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"description": {
			  "type": "string",
			  "description": "Description of the product",
			  "maxLength": 1024,
			  "nullable": true
			},
			"available": {
			  "type": "boolean",
			  "description": "If the product is available for purchase",
			  "nullable": true
			},
			"price": {
			  "type": "integer",
			  "description": "Product price in USD cents",
			  "format": "int32",
			  "nullable": true
			},
			"features": {
			  "description": "Features of the product",
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/UnlockedProductFeaturesDto"
				}
			  ]
			},
			"releasedAt": {
			  "type": "string",
			  "description": "Unix seconds timestamp of release date",
			  "nullable": true
			}
		  }
		},
		"WeightStyleData": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"elements"
		  ],
		  "properties": {
			"decal": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleDecal"
				}
			  ]
			},
			"elements": {
			  "$ref": "#/components/schemas/WeightStyleElements"
			}
		  }
		},
		"WeightStyleDecal": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"imageUrl": {
			  "type": "string",
			  "nullable": true
			},
			"crops": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "string"
			  }
			}
		  }
		},
		"WeightStylePosition": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"x",
			"y"
		  ],
		  "properties": {
			"x": {
			  "type": "number",
			  "format": "double"
			},
			"y": {
			  "type": "number",
			  "format": "double"
			}
		  }
		},
		"WeightStyleElements": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"background"
		  ],
		  "properties": {
			"background": {
			  "$ref": "#/components/schemas/WeightStyleBackground"
			},
			"gradients": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleGradient"
			  }
			},
			"name": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"weight": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"label": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"head": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"badge": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"rank": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			},
			"rankWithBadge": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElement"
				}
			  ]
			}
		  }
		},
		"WeightStyleBackground": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"size": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStylePosition"
				}
			  ]
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"rects": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleBackgroundRect"
			  }
			},
			"imageUrl": {
			  "type": "string",
			  "nullable": true
			},
			"radius": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleBackgroundRect": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"useEmbedColor": {
			  "type": "boolean",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleGradient": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"direction",
			"bounds"
		  ],
		  "properties": {
			"direction": {
			  "$ref": "#/components/schemas/WeightStyleDirection"
			},
			"bounds": {
			  "$ref": "#/components/schemas/WeightStyleDirection"
			},
			"stops": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleGradientStop"
			  }
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleDirection": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			}
		  }
		},
		"WeightStyleGradientStop": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"position",
			"fill"
		  ],
		  "properties": {
			"position": {
			  "type": "number",
			  "format": "double"
			},
			"fill": {
			  "type": "string"
			}
		  }
		},
		"WeightStyleElement": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"position"
		  ],
		  "properties": {
			"font": {
			  "type": "string",
			  "nullable": true
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"fontSize": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"position": {
			  "$ref": "#/components/schemas/WeightStylePosition"
			},
			"maxWidth": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"maxHeight": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"outline": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementOutline"
				}
			  ]
			},
			"background": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleTextBackground"
				}
			  ]
			}
		  }
		},
		"WeightStyleElementOutline": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"width": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"WeightStyleTextBackground": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"padding": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"radius": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"DeleteStyleRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"DeleteStyleImageRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"WeightStyleWithDataDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"images",
			"products"
		  ],
		  "properties": {
			"id": {
			  "type": "integer",
			  "format": "int32"
			},
			"styleFormatter": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"name": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"collection": {
			  "type": "string",
			  "maxLength": 64,
			  "nullable": true
			},
			"description": {
			  "type": "string",
			  "maxLength": 1024,
			  "nullable": true
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/ImageAttachmentDto"
				}
			  ]
			},
			"images": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ImageAttachmentDto"
			  }
			},
			"products": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/ParentProductDto"
			  }
			},
			"data": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleDataDto"
				}
			  ]
			}
		  }
		},
		"ParentProductDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"id",
			"name"
		  ],
		  "properties": {
			"id": {
			  "type": "string"
			},
			"name": {
			  "type": "string"
			},
			"slug": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"WeightStyleDataDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"elements"
		  ],
		  "properties": {
			"decal": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleDecalDto"
				}
			  ]
			},
			"elements": {
			  "$ref": "#/components/schemas/WeightStyleElementsDto"
			}
		  }
		},
		"WeightStyleDecalDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"imageUrl": {
			  "type": "string",
			  "nullable": true
			},
			"crops": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "string"
			  }
			}
		  }
		},
		"WeightStylePositionDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"x",
			"y"
		  ],
		  "properties": {
			"x": {
			  "type": "number",
			  "format": "double"
			},
			"y": {
			  "type": "number",
			  "format": "double"
			}
		  }
		},
		"WeightStyleElementsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"background"
		  ],
		  "properties": {
			"background": {
			  "$ref": "#/components/schemas/WeightStyleBackgroundDto"
			},
			"gradients": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleGradientDto"
			  }
			},
			"name": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"weight": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"label": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"head": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"badge": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"rank": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			},
			"rankWithBadge": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementDto"
				}
			  ]
			}
		  }
		},
		"WeightStyleBackgroundDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"size": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStylePositionDto"
				}
			  ]
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"rects": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleBackgroundRectDto"
			  }
			},
			"imageUrl": {
			  "type": "string",
			  "nullable": true
			},
			"radius": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleBackgroundRectDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"useEmbedColor": {
			  "type": "boolean",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleGradientDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"direction",
			"bounds"
		  ],
		  "properties": {
			"direction": {
			  "$ref": "#/components/schemas/WeightStyleDirectionDto"
			},
			"bounds": {
			  "$ref": "#/components/schemas/WeightStyleDirectionDto"
			},
			"stops": {
			  "type": "array",
			  "nullable": true,
			  "items": {
				"$ref": "#/components/schemas/WeightStyleGradientStopDto"
			  }
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			}
		  }
		},
		"WeightStyleDirectionDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"start",
			"end"
		  ],
		  "properties": {
			"start": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"end": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			}
		  }
		},
		"WeightStyleGradientStopDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"position",
			"fill"
		  ],
		  "properties": {
			"position": {
			  "type": "number",
			  "format": "double"
			},
			"fill": {
			  "type": "string"
			}
		  }
		},
		"WeightStyleElementDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"position"
		  ],
		  "properties": {
			"font": {
			  "type": "string",
			  "nullable": true
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"fontSize": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"position": {
			  "$ref": "#/components/schemas/WeightStylePositionDto"
			},
			"maxWidth": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"maxHeight": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"outline": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleElementOutlineDto"
				}
			  ]
			},
			"background": {
			  "nullable": true,
			  "oneOf": [
				{
				  "$ref": "#/components/schemas/WeightStyleTextBackgroundDto"
				}
			  ]
			}
		  }
		},
		"WeightStyleElementOutlineDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"width": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"fill": {
			  "type": "string",
			  "nullable": true
			}
		  }
		},
		"WeightStyleTextBackgroundDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "properties": {
			"fill": {
			  "type": "string",
			  "nullable": true
			},
			"opacity": {
			  "type": "number",
			  "format": "double",
			  "nullable": true
			},
			"padding": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			},
			"radius": {
			  "type": "integer",
			  "format": "int32",
			  "nullable": true
			}
		  }
		},
		"GetStyleRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"WeightsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"crops",
			"pests"
		  ],
		  "properties": {
			"crops": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"pests": {
			  "$ref": "#/components/schemas/PestWeightsDto"
			}
		  }
		},
		"PestWeightsDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"brackets",
			"values"
		  ],
		  "properties": {
			"brackets": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"values": {
			  "type": "object",
			  "additionalProperties": {
				"type": "object",
				"additionalProperties": {
				  "type": "number",
				  "format": "double"
				}
			  }
			}
		  }
		},
		"GetWeightProfilesRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"GetWeightSelectedProfileRequest": {
		  "type": "object",
		  "additionalProperties": false
		},
		"FarmingWeightAllProfilesDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"profiles"
		  ],
		  "properties": {
			"selectedProfileId": {
			  "type": "string",
			  "nullable": true
			},
			"profiles": {
			  "type": "array",
			  "items": {
				"$ref": "#/components/schemas/FarmingWeightWithProfileDto"
			  }
			}
		  }
		},
		"FarmingWeightWithProfileDto": {
		  "type": "object",
		  "additionalProperties": false,
		  "required": [
			"profileId",
			"profileName",
			"totalWeight",
			"cropWeight",
			"bonusWeight",
			"uncountedCrops",
			"pests",
			"lastUpdated"
		  ],
		  "properties": {
			"profileId": {
			  "type": "string"
			},
			"profileName": {
			  "type": "string"
			},
			"totalWeight": {
			  "type": "number",
			  "format": "double"
			},
			"crops": {
			  "type": "object",
			  "nullable": true,
			  "additionalProperties": {
				"type": "integer",
				"format": "int64"
			  }
			},
			"cropWeight": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"bonusWeight": {
			  "type": "object",
			  "additionalProperties": {
				"type": "number",
				"format": "double"
			  }
			},
			"uncountedCrops": {
			  "type": "object",
			  "additionalProperties": {
				"type": "integer",
				"format": "int32"
			  }
			},
			"pests": {
			  "$ref": "#/components/schemas/PestsDto"
			},
			"lastUpdated": {
			  "type": "integer",
			  "format": "int64"
			}
		  }
		},
		"GetWeightForProfilesRequest": {
		  "type": "object",
		  "additionalProperties": false
		}
	  },
	  "securitySchemes": {
		"JWTBearerAuth": {
		  "type": "http",
		  "description": "Enter a JWT token to authorize the requests...",
		  "scheme": "Bearer",
		  "bearerFormat": "JWT"
		}
	  }
	}
  }