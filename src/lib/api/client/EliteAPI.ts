/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Elite API
 * A backend API for https://elitebot.dev/ that provides Hypixel Skyblock data.
<br><br>
Use of this API requires following the [Elite API TOS](https://elitebot.dev/apiterms). This API is not affiliated with Hypixel or Mojang.
 * OpenAPI spec version: v1
 */
import type {
	AccountWithPermsDto,
	AddProductImageParams,
	AddStyleImageParams,
	AdminEventMemberDto,
	AdminLinkAccountRequest,
	AdminUnlinkAccountRequest,
	AnnouncementDto,
	AuctionHouseDto,
	AuthRefreshDto,
	AuthResponseDto,
	AuthSessionDto,
	AuthorizedAccountDto,
	AuthorizedGuildDto,
	BadgeDto,
	ChangeTeamOwnerRequest,
	ContestBracketsDetailsDto,
	ContestParticipationDto,
	ContestPingsFeatureDto,
	CreateAnnouncementDto,
	CreateBadgeRequestCreateBadge,
	CreateCategoryDto,
	CreateEventDto,
	CreateEventTeamDto,
	CreateJacobLeaderboardRequestCreateJacobLeaderboard,
	CreateStyleRequest,
	CreateTeamAdminParams,
	CropCollectionsDataPointDto,
	DeleteContestPingsParams,
	DeleteMemberAdminParams,
	DisableContestPingsPingsParams,
	DiscordIdRequest,
	DiscordLoginDto,
	EditCategoryDto,
	EditEventBannerDto,
	EditEventDto,
	EditProductDto,
	EditUserBadgeDto,
	EntitlementDto,
	ErrorResponse,
	EventDefaultsDto,
	EventDetailsDto,
	EventMemberDetailsDto,
	EventMemberDto,
	EventTeamWithMembersDto,
	EventTeamsWordListDto,
	FarmingWeightAllProfilesDto,
	FarmingWeightDto,
	ForceAddMemberAdminParams,
	GardenDto,
	GetAdminCropGraphsParams,
	GetAdminSkillGraphsParams,
	GetBazaarProductResponse,
	GetBazaarProductsResponse,
	GetCategoriesParams,
	GetContestsAtTimestampParams,
	GetContestsInMonth200,
	GetContestsInYearParams,
	GetCropGraphsParams,
	GetCurrentMedalBracketsParams,
	GetEntitlementsParams,
	GetItemsFromBytesRequest,
	GetItemsFromBytesResponse,
	GetLeaderboardParams,
	GetMedalBracketsGraphParams,
	GetMedalBracketsParams,
	GetPlayerLeaderboardRanksParams,
	GetPlayerRank1Params,
	GetPlayerRank2Params,
	GetProfileRank1Params,
	GetProfileRank2Params,
	GetSkillGraphsParams,
	GetSkyblockItemsResponse,
	GetSpecifiedSkyblockItemsRequest,
	GetSpecifiedSkyblockItemsResponse,
	GetUpcomingEventsParams,
	GetWeightForProfileParams,
	GetWeightForProfilesParams,
	GetWeightForSelectedParams,
	GrantTestEntitlementParams,
	GuildDetailsDto,
	GuildJacobLeaderboardFeature,
	GuildMemberDto,
	IncomingAccountDto,
	IncomingGuildChannelDto,
	IncomingGuildDto,
	IncomingGuildRoleDto,
	JacobContestWithParticipationsDto,
	JoinEventParams,
	LeaderboardDto,
	LeaderboardPositionDto,
	LeaderboardPositionsDto,
	LeaderboardRanksResponse,
	LeaderboardsResponse,
	LinkedAccountsDto,
	MemberFortuneSettingsDto,
	MinecraftAccountDto,
	PlayerDataDto,
	PrivateGuildDto,
	ProblemDetails,
	ProductDto,
	ProfileDetailsDto,
	ProfileMemberDto,
	ProfileNamesDto,
	PublicGuildDto,
	RemoveTestEntitlementParams,
	ReorderCategoryProductsRequest,
	ReorderIntRequest,
	SearchAccountsParams,
	SetEventApprovalParams,
	SetEventFeatureParams,
	SetGuildLockedParams,
	SetGuildPublicParams,
	SetJacobFeatureParams,
	SetTeamOwnerRequest,
	ShopCategoryDto,
	SkillsDataPointDto,
	SkyblockItemResponse,
	UpdateBadgeRequestUpdateBadge,
	UpdateContestPingsRequestUpdateContestPings,
	UpdateEventTeamDto,
	UpdateGuildJacobFeatureParams,
	UpdateJacobFeatureParams,
	UpdateJacobFeatureRequestUpdateJacobFeature,
	UpdateJacobLeaderboardRequestUpdateJacobLeaderboard,
	UpdateUserSettingsDto,
	UploadCurrentContestsBody,
	UploadImageDto,
	UserSettingsDto,
	WeightStyleWithDataDto,
	WeightsDto,
	YearlyContestsDto,
	YearlyCropRecordsDto,
} from '../schemas';

import { customFetch } from '../custom-fetch';
import { ELITE_API_URL } from '$env/static/private';

/**
 * Retrieves the Minecraft account information for a given player, along with an overview of their profiles and player data.
 * @summary Get Account
 */
export type getAccountResponse200 = {
	data: MinecraftAccountDto;
	status: 200;
};

export type getAccountResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAccountResponseComposite = getAccountResponse200 | getAccountResponse400;

export type getAccountResponse = getAccountResponseComposite & {
	headers: Headers;
};

export const getGetAccountUrl = (player: string) => {
	return `${ELITE_API_URL}/account/${player}`;
};

export const getAccount = async (player: string, options?: RequestInit) => {
	return customFetch<getAccountResponse>(getGetAccountUrl(player), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Link Account
 */
export type linkOwnAccountResponse204 = {
	data: null;
	status: 204;
};

export type linkOwnAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type linkOwnAccountResponseComposite = linkOwnAccountResponse204 | linkOwnAccountResponse400;

export type linkOwnAccountResponse = linkOwnAccountResponseComposite & {
	headers: Headers;
};

export const getLinkOwnAccountUrl = (player: string) => {
	return `${ELITE_API_URL}/account/${player}`;
};

export const linkOwnAccount = async (player: string, options?: RequestInit) => {
	return customFetch<linkOwnAccountResponse>(getLinkOwnAccountUrl(player), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Unlink Account
 */
export type unlinkOwnAccountResponse204 = {
	data: null;
	status: 204;
};

export type unlinkOwnAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type unlinkOwnAccountResponseComposite = unlinkOwnAccountResponse204 | unlinkOwnAccountResponse400;

export type unlinkOwnAccountResponse = unlinkOwnAccountResponseComposite & {
	headers: Headers;
};

export const getUnlinkOwnAccountUrl = (player: string) => {
	return `${ELITE_API_URL}/account/${player}`;
};

export const unlinkOwnAccount = async (player: string, options?: RequestInit) => {
	return customFetch<unlinkOwnAccountResponse>(getUnlinkOwnAccountUrl(player), {
		...options,
		method: 'DELETE',
	});
};

/**
 * Returns an 8x8 or 72x72 face png image of the Minecraft account associated with the provided player name or UUID. 72x72 response includes the player's "hat" overlay. If not found, returns Steve's face.
 * @summary Get Minecraft Account Face Image
 */
export type getAccountFace1Response204 = {
	data: null;
	status: 204;
};

export type getAccountFace1Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAccountFace1ResponseComposite = getAccountFace1Response204 | getAccountFace1Response400;

export type getAccountFace1Response = getAccountFace1ResponseComposite & {
	headers: Headers;
};

export const getGetAccountFace1Url = (player: string) => {
	return `${ELITE_API_URL}/account/${player}/face`;
};

export const getAccountFace1 = async (player: string, options?: RequestInit) => {
	return customFetch<getAccountFace1Response>(getGetAccountFace1Url(player), {
		...options,
		method: 'GET',
	});
};

/**
 * Returns an 8x8 or 72x72 face png image of the Minecraft account associated with the provided player name or UUID. 72x72 response includes the player's "hat" overlay. If not found, returns Steve's face.
 * @summary Get Minecraft Account Face Image
 */
export type getAccountFace2Response204 = {
	data: null;
	status: 204;
};

export type getAccountFace2Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAccountFace2ResponseComposite = getAccountFace2Response204 | getAccountFace2Response400;

export type getAccountFace2Response = getAccountFace2ResponseComposite & {
	headers: Headers;
};

export const getGetAccountFace2Url = (player: string) => {
	return `${ELITE_API_URL}/account/${player}/face.png`;
};

export const getAccountFace2 = async (player: string, options?: RequestInit) => {
	return customFetch<getAccountFace2Response>(getGetAccountFace2Url(player), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Minecraft Account from Discord Id
 */
export type getAccountFromDiscordResponse200 = {
	data: MinecraftAccountDto;
	status: 200;
};

export type getAccountFromDiscordResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAccountFromDiscordResponseComposite =
	| getAccountFromDiscordResponse200
	| getAccountFromDiscordResponse400;

export type getAccountFromDiscordResponse = getAccountFromDiscordResponseComposite & {
	headers: Headers;
};

export const getGetAccountFromDiscordUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/account/${discordId}`;
};

export const getAccountFromDiscord = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getAccountFromDiscordResponse>(getGetAccountFromDiscordUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Account Settings
 */
export type getAccountSettingsResponse200 = {
	data: UserSettingsDto;
	status: 200;
};

export type getAccountSettingsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAccountSettingsResponseComposite = getAccountSettingsResponse200 | getAccountSettingsResponse400;

export type getAccountSettingsResponse = getAccountSettingsResponseComposite & {
	headers: Headers;
};

export const getGetAccountSettingsUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/account/${discordId}/settings`;
};

export const getAccountSettings = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getAccountSettingsResponse>(getGetAccountSettingsUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Logged-In Account
 */
export type getAuthAccountResponse200 = {
	data: AuthorizedAccountDto;
	status: 200;
};

export type getAuthAccountResponse401 = {
	data: null;
	status: 401;
};

export type getAuthAccountResponseComposite = getAuthAccountResponse200 | getAuthAccountResponse401;

export type getAuthAccountResponse = getAuthAccountResponseComposite & {
	headers: Headers;
};

export const getGetAuthAccountUrl = () => {
	return `${ELITE_API_URL}/account`;
};

export const getAuthAccount = async (options?: RequestInit) => {
	return customFetch<getAuthAccountResponse>(getGetAuthAccountUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Refresh Purchases
 */
export type refreshPurchasesResponse204 = {
	data: null;
	status: 204;
};

export type refreshPurchasesResponse401 = {
	data: null;
	status: 401;
};

export type refreshPurchasesResponseComposite = refreshPurchasesResponse204 | refreshPurchasesResponse401;

export type refreshPurchasesResponse = refreshPurchasesResponseComposite & {
	headers: Headers;
};

export const getRefreshPurchasesUrl = () => {
	return `${ELITE_API_URL}/account/purchases`;
};

export const refreshPurchases = async (options?: RequestInit) => {
	return customFetch<refreshPurchasesResponse>(getRefreshPurchasesUrl(), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Search for Minecraft Account
 */
export type searchAccountsResponse200 = {
	data: string[];
	status: 200;
};

export type searchAccountsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type searchAccountsResponseComposite = searchAccountsResponse200 | searchAccountsResponse400;

export type searchAccountsResponse = searchAccountsResponseComposite & {
	headers: Headers;
};

export const getSearchAccountsUrl = (params: SearchAccountsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/account/search?${stringifiedParams}`
		: `${ELITE_API_URL}/account/search`;
};

export const searchAccounts = async (params: SearchAccountsParams, options?: RequestInit) => {
	return customFetch<searchAccountsResponse>(getSearchAccountsUrl(params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Set Primary Account
 */
export type setPrimaryAccountResponse204 = {
	data: null;
	status: 204;
};

export type setPrimaryAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type setPrimaryAccountResponseComposite = setPrimaryAccountResponse204 | setPrimaryAccountResponse400;

export type setPrimaryAccountResponse = setPrimaryAccountResponseComposite & {
	headers: Headers;
};

export const getSetPrimaryAccountUrl = (player: string) => {
	return `${ELITE_API_URL}/account/primary/${player}`;
};

export const setPrimaryAccount = async (player: string, options?: RequestInit) => {
	return customFetch<setPrimaryAccountResponse>(getSetPrimaryAccountUrl(player), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Update Account Settings
 */
export type updateBadgesResponse204 = {
	data: null;
	status: 204;
};

export type updateBadgesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateBadgesResponse401 = {
	data: null;
	status: 401;
};

export type updateBadgesResponseComposite = updateBadgesResponse204 | updateBadgesResponse400 | updateBadgesResponse401;

export type updateBadgesResponse = updateBadgesResponseComposite & {
	headers: Headers;
};

export const getUpdateBadgesUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/account/${playerUuid}/badges`;
};

export const updateBadges = async (playerUuid: string, editUserBadgeDto: EditUserBadgeDto[], options?: RequestInit) => {
	return customFetch<updateBadgesResponse>(getUpdateBadgesUrl(playerUuid), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(editUserBadgeDto),
	});
};

/**
 * @summary Update Fortune Settings for Account
 */
export type updateFortuneSettingsResponse204 = {
	data: null;
	status: 204;
};

export type updateFortuneSettingsResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type updateFortuneSettingsResponseComposite =
	| updateFortuneSettingsResponse204
	| updateFortuneSettingsResponse400;

export type updateFortuneSettingsResponse = updateFortuneSettingsResponseComposite & {
	headers: Headers;
};

export const getUpdateFortuneSettingsUrl = (playerUuid: string, profileUuid: string) => {
	return `${ELITE_API_URL}/account/${playerUuid}/${profileUuid}/fortune`;
};

export const updateFortuneSettings = async (
	playerUuid: string,
	profileUuid: string,
	memberFortuneSettingsDto: MemberFortuneSettingsDto,
	options?: RequestInit
) => {
	return customFetch<updateFortuneSettingsResponse>(getUpdateFortuneSettingsUrl(playerUuid, profileUuid), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(memberFortuneSettingsDto),
	});
};

/**
 * @summary Update Account Settings
 */
export type updateAccountResponse204 = {
	data: null;
	status: 204;
};

export type updateAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type updateAccountResponseComposite = updateAccountResponse204 | updateAccountResponse400;

export type updateAccountResponse = updateAccountResponseComposite & {
	headers: Headers;
};

export const getUpdateAccountUrl = () => {
	return `${ELITE_API_URL}/account/settings`;
};

export const updateAccount = async (updateUserSettingsDto: UpdateUserSettingsDto, options?: RequestInit) => {
	return customFetch<updateAccountResponse>(getUpdateAccountUrl(), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateUserSettingsDto),
	});
};

/**
 * @summary Add a role to a user
 */
export type addRoleToUserResponse204 = {
	data: null;
	status: 204;
};

export type addRoleToUserResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type addRoleToUserResponse401 = {
	data: null;
	status: 401;
};

export type addRoleToUserResponse403 = {
	data: null;
	status: 403;
};

export type addRoleToUserResponseComposite =
	| addRoleToUserResponse204
	| addRoleToUserResponse400
	| addRoleToUserResponse401
	| addRoleToUserResponse403;

export type addRoleToUserResponse = addRoleToUserResponseComposite & {
	headers: Headers;
};

export const getAddRoleToUserUrl = (discordId: bigint | number | string, role: string) => {
	return `${ELITE_API_URL}/admin/user/${discordId}/roles/${role}`;
};

export const addRoleToUser = async (discordId: bigint | number | string, role: string, options?: RequestInit) => {
	return customFetch<addRoleToUserResponse>(getAddRoleToUserUrl(discordId, role), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Remove a role from a user
 */
export type removeRoleFromUserResponse204 = {
	data: null;
	status: 204;
};

export type removeRoleFromUserResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type removeRoleFromUserResponse401 = {
	data: null;
	status: 401;
};

export type removeRoleFromUserResponse403 = {
	data: null;
	status: 403;
};

export type removeRoleFromUserResponseComposite =
	| removeRoleFromUserResponse204
	| removeRoleFromUserResponse400
	| removeRoleFromUserResponse401
	| removeRoleFromUserResponse403;

export type removeRoleFromUserResponse = removeRoleFromUserResponseComposite & {
	headers: Headers;
};

export const getRemoveRoleFromUserUrl = (discordId: bigint | number | string, role: string) => {
	return `${ELITE_API_URL}/admin/user/${discordId}/roles/${role}`;
};

export const removeRoleFromUser = async (discordId: bigint | number | string, role: string, options?: RequestInit) => {
	return customFetch<removeRoleFromUserResponse>(getRemoveRoleFromUserUrl(discordId, role), {
		...options,
		method: 'DELETE',
	});
};

/**
 * This enables a player's data from Hypixel to be refreshed on the next request.
 * @summary Reset a player's cooldowns
 */
export type clearPlayerCooldownsResponse204 = {
	data: null;
	status: 204;
};

export type clearPlayerCooldownsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type clearPlayerCooldownsResponse401 = {
	data: null;
	status: 401;
};

export type clearPlayerCooldownsResponse403 = {
	data: null;
	status: 403;
};

export type clearPlayerCooldownsResponseComposite =
	| clearPlayerCooldownsResponse204
	| clearPlayerCooldownsResponse400
	| clearPlayerCooldownsResponse401
	| clearPlayerCooldownsResponse403;

export type clearPlayerCooldownsResponse = clearPlayerCooldownsResponseComposite & {
	headers: Headers;
};

export const getClearPlayerCooldownsUrl = (player: string) => {
	return `${ELITE_API_URL}/admin/cooldowns/player/${player}`;
};

export const clearPlayerCooldowns = async (player: string, options?: RequestInit) => {
	return customFetch<clearPlayerCooldownsResponse>(getClearPlayerCooldownsUrl(player), {
		...options,
		method: 'POST',
	});
};

/**
 * Delete all upcoming contests in case of wrong data
 * @summary Delete all upcoming contests
 */
export type deleteUpcomingContestsResponse204 = {
	data: null;
	status: 204;
};

export type deleteUpcomingContestsResponse401 = {
	data: null;
	status: 401;
};

export type deleteUpcomingContestsResponse403 = {
	data: null;
	status: 403;
};

export type deleteUpcomingContestsResponseComposite =
	| deleteUpcomingContestsResponse204
	| deleteUpcomingContestsResponse401
	| deleteUpcomingContestsResponse403;

export type deleteUpcomingContestsResponse = deleteUpcomingContestsResponseComposite & {
	headers: Headers;
};

export const getDeleteUpcomingContestsUrl = () => {
	return `${ELITE_API_URL}/admin/upcomingcontests`;
};

export const deleteUpcomingContests = async (options?: RequestInit) => {
	return customFetch<deleteUpcomingContestsResponse>(getDeleteUpcomingContestsUrl(), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Delete Event
 */
export type deleteEventApprovalResponse204 = {
	data: null;
	status: 204;
};

export type deleteEventApprovalResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteEventApprovalResponse401 = {
	data: null;
	status: 401;
};

export type deleteEventApprovalResponse403 = {
	data: null;
	status: 403;
};

export type deleteEventApprovalResponseComposite =
	| deleteEventApprovalResponse204
	| deleteEventApprovalResponse400
	| deleteEventApprovalResponse401
	| deleteEventApprovalResponse403;

export type deleteEventApprovalResponse = deleteEventApprovalResponseComposite & {
	headers: Headers;
};

export const getDeleteEventApprovalUrl = (eventId: bigint | number | string) => {
	return `${ELITE_API_URL}/admin/events/${eventId}`;
};

export const deleteEventApproval = async (eventId: bigint | number | string, options?: RequestInit) => {
	return customFetch<deleteEventApprovalResponse>(getDeleteEventApprovalUrl(eventId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get events pending approval
 */
export type getPendingEventsResponse200 = {
	data: EventDetailsDto[];
	status: 200;
};

export type getPendingEventsResponse401 = {
	data: null;
	status: 401;
};

export type getPendingEventsResponse403 = {
	data: null;
	status: 403;
};

export type getPendingEventsResponseComposite =
	| getPendingEventsResponse200
	| getPendingEventsResponse401
	| getPendingEventsResponse403;

export type getPendingEventsResponse = getPendingEventsResponseComposite & {
	headers: Headers;
};

export const getGetPendingEventsUrl = () => {
	return `${ELITE_API_URL}/admin/events/pending`;
};

export const getPendingEvents = async (options?: RequestInit) => {
	return customFetch<getPendingEventsResponse>(getGetPendingEventsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Set event approval
 */
export type setEventApprovalResponse204 = {
	data: null;
	status: 204;
};

export type setEventApprovalResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setEventApprovalResponse401 = {
	data: null;
	status: 401;
};

export type setEventApprovalResponse403 = {
	data: null;
	status: 403;
};

export type setEventApprovalResponseComposite =
	| setEventApprovalResponse204
	| setEventApprovalResponse400
	| setEventApprovalResponse401
	| setEventApprovalResponse403;

export type setEventApprovalResponse = setEventApprovalResponseComposite & {
	headers: Headers;
};

export const getSetEventApprovalUrl = (eventId: bigint | number | string, params?: SetEventApprovalParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/admin/events/${eventId}/approve?${stringifiedParams}`
		: `${ELITE_API_URL}/admin/events/${eventId}/approve`;
};

export const setEventApproval = async (
	eventId: bigint | number | string,
	params?: SetEventApprovalParams,
	options?: RequestInit
) => {
	return customFetch<setEventApprovalResponse>(getSetEventApprovalUrl(eventId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Get list of admins
 */
export type getAdminsResponse200 = {
	data: AccountWithPermsDto[];
	status: 200;
};

export type getAdminsResponse401 = {
	data: null;
	status: 401;
};

export type getAdminsResponse403 = {
	data: null;
	status: 403;
};

export type getAdminsResponseComposite = getAdminsResponse200 | getAdminsResponse401 | getAdminsResponse403;

export type getAdminsResponse = getAdminsResponseComposite & {
	headers: Headers;
};

export const getGetAdminsUrl = () => {
	return `${ELITE_API_URL}/admins`;
};

export const getAdmins = async (options?: RequestInit) => {
	return customFetch<getAdminsResponse>(getGetAdminsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get list of roles
 */
export type getRolesResponse200 = {
	data: string[];
	status: 200;
};

export type getRolesResponse401 = {
	data: null;
	status: 401;
};

export type getRolesResponse403 = {
	data: null;
	status: 403;
};

export type getRolesResponseComposite = getRolesResponse200 | getRolesResponse401 | getRolesResponse403;

export type getRolesResponse = getRolesResponseComposite & {
	headers: Headers;
};

export const getGetRolesUrl = () => {
	return `${ELITE_API_URL}/admin/roles`;
};

export const getRoles = async (options?: RequestInit) => {
	return customFetch<getRolesResponse>(getGetRolesUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Link an Account
 */
export type linkUserAccountResponse204 = {
	data: null;
	status: 204;
};

export type linkUserAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type linkUserAccountResponseComposite = linkUserAccountResponse204 | linkUserAccountResponse400;

export type linkUserAccountResponse = linkUserAccountResponseComposite & {
	headers: Headers;
};

export const getLinkUserAccountUrl = () => {
	return `${ELITE_API_URL}/admin/link-account`;
};

export const linkUserAccount = async (adminLinkAccountRequest: AdminLinkAccountRequest, options?: RequestInit) => {
	return customFetch<linkUserAccountResponse>(getLinkUserAccountUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(adminLinkAccountRequest),
	});
};

/**
 * This fetches the latest data from Discord for the specified guild
 * @summary Refresh a guild
 */
export type refreshDiscordGuildResponse204 = {
	data: null;
	status: 204;
};

export type refreshDiscordGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type refreshDiscordGuildResponse401 = {
	data: null;
	status: 401;
};

export type refreshDiscordGuildResponse403 = {
	data: null;
	status: 403;
};

export type refreshDiscordGuildResponseComposite =
	| refreshDiscordGuildResponse204
	| refreshDiscordGuildResponse400
	| refreshDiscordGuildResponse401
	| refreshDiscordGuildResponse403;

export type refreshDiscordGuildResponse = refreshDiscordGuildResponseComposite & {
	headers: Headers;
};

export const getRefreshDiscordGuildUrl = (guildId: bigint | number | string) => {
	return `${ELITE_API_URL}/admin/guild/${guildId}/refresh`;
};

export const refreshDiscordGuild = async (guildId: bigint | number | string, options?: RequestInit) => {
	return customFetch<refreshDiscordGuildResponse>(getRefreshDiscordGuildUrl(guildId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Unlink an Account
 */
export type unlinkUserAccountResponse204 = {
	data: null;
	status: 204;
};

export type unlinkUserAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type unlinkUserAccountResponseComposite = unlinkUserAccountResponse204 | unlinkUserAccountResponse400;

export type unlinkUserAccountResponse = unlinkUserAccountResponseComposite & {
	headers: Headers;
};

export const getUnlinkUserAccountUrl = () => {
	return `${ELITE_API_URL}/admin/unlink-account`;
};

export const unlinkUserAccount = async (
	adminUnlinkAccountRequest: AdminUnlinkAccountRequest,
	options?: RequestInit
) => {
	return customFetch<unlinkUserAccountResponse>(getUnlinkUserAccountUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(adminUnlinkAccountRequest),
	});
};

/**
 * Creates a new announcement that will be displayed to users
 * @summary Create an announcement
 */
export type createAnnouncementResponse204 = {
	data: null;
	status: 204;
};

export type createAnnouncementResponse401 = {
	data: null;
	status: 401;
};

export type createAnnouncementResponse403 = {
	data: null;
	status: 403;
};

export type createAnnouncementResponseComposite =
	| createAnnouncementResponse204
	| createAnnouncementResponse401
	| createAnnouncementResponse403;

export type createAnnouncementResponse = createAnnouncementResponseComposite & {
	headers: Headers;
};

export const getCreateAnnouncementUrl = () => {
	return `${ELITE_API_URL}/announcements/create`;
};

export const createAnnouncement = async (createAnnouncementDto: CreateAnnouncementDto, options?: RequestInit) => {
	return customFetch<createAnnouncementResponse>(getCreateAnnouncementUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createAnnouncementDto),
	});
};

/**
 * Mark an announcement as dismissed for the current user
 * @summary Dismiss an announcement
 */
export type dismissAnnouncementResponse204 = {
	data: null;
	status: 204;
};

export type dismissAnnouncementResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type dismissAnnouncementResponseComposite = dismissAnnouncementResponse204 | dismissAnnouncementResponse400;

export type dismissAnnouncementResponse = dismissAnnouncementResponseComposite & {
	headers: Headers;
};

export const getDismissAnnouncementUrl = (announcementId: string) => {
	return `${ELITE_API_URL}/announcements/${announcementId}/dismiss`;
};

export const dismissAnnouncement = async (announcementId: string, options?: RequestInit) => {
	return customFetch<dismissAnnouncementResponse>(getDismissAnnouncementUrl(announcementId), {
		...options,
		method: 'POST',
	});
};

/**
 * Gets all announcements that should be shown to users
 * @summary Get announcements
 */
export type getAnnouncementResponse200 = {
	data: AnnouncementDto[];
	status: 200;
};

export type getAnnouncementResponseComposite = getAnnouncementResponse200;

export type getAnnouncementResponse = getAnnouncementResponseComposite & {
	headers: Headers;
};

export const getGetAnnouncementUrl = () => {
	return `${ELITE_API_URL}/announcements`;
};

export const getAnnouncement = async (options?: RequestInit) => {
	return customFetch<getAnnouncementResponse>(getGetAnnouncementUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Get the account of the currently logged in user
 * @summary Get logged in account
 */
export type getSessionResponse200 = {
	data: AuthSessionDto;
	status: 200;
};

export type getSessionResponse401 = {
	data: null;
	status: 401;
};

export type getSessionResponseComposite = getSessionResponse200 | getSessionResponse401;

export type getSessionResponse = getSessionResponseComposite & {
	headers: Headers;
};

export const getGetSessionUrl = () => {
	return `${ELITE_API_URL}/auth/me`;
};

export const getSession = async (options?: RequestInit) => {
	return customFetch<getSessionResponse>(getGetSessionUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Log in with discord credentials
 * @summary Log in
 */
export type loginResponse200 = {
	data: AuthResponseDto;
	status: 200;
};

export type loginResponseComposite = loginResponse200;

export type loginResponse = loginResponseComposite & {
	headers: Headers;
};

export const getLoginUrl = () => {
	return `${ELITE_API_URL}/auth/login`;
};

export const login = async (discordLoginDto: DiscordLoginDto, options?: RequestInit) => {
	return customFetch<loginResponse>(getLoginUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(discordLoginDto),
	});
};

/**
 * Refresh the auth token using the refresh token
 * @summary Refresh Auth Token
 */
export type refreshAuthResponse200 = {
	data: AuthResponseDto;
	status: 200;
};

export type refreshAuthResponseComposite = refreshAuthResponse200;

export type refreshAuthResponse = refreshAuthResponseComposite & {
	headers: Headers;
};

export const getRefreshAuthUrl = () => {
	return `${ELITE_API_URL}/auth/refresh`;
};

export const refreshAuth = async (authRefreshDto: AuthRefreshDto, options?: RequestInit) => {
	return customFetch<refreshAuthResponse>(getRefreshAuthUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(authRefreshDto),
	});
};

/**
 * @summary Add a badge to a user
 */
export type addBadgeToUserBadgeResponse204 = {
	data: null;
	status: 204;
};

export type addBadgeToUserBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type addBadgeToUserBadgeResponse401 = {
	data: null;
	status: 401;
};

export type addBadgeToUserBadgeResponse403 = {
	data: null;
	status: 403;
};

export type addBadgeToUserBadgeResponseComposite =
	| addBadgeToUserBadgeResponse204
	| addBadgeToUserBadgeResponse400
	| addBadgeToUserBadgeResponse401
	| addBadgeToUserBadgeResponse403;

export type addBadgeToUserBadgeResponse = addBadgeToUserBadgeResponseComposite & {
	headers: Headers;
};

export const getAddBadgeToUserBadgeUrl = (player: string, badgeId: number | string) => {
	return `${ELITE_API_URL}/badge/user/${player}/${badgeId}`;
};

export const addBadgeToUserBadge = async (player: string, badgeId: number | string, options?: RequestInit) => {
	return customFetch<addBadgeToUserBadgeResponse>(getAddBadgeToUserBadgeUrl(player, badgeId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Remove a badge from a user
 */
export type deleteBadgeFromUserBadgeResponse204 = {
	data: null;
	status: 204;
};

export type deleteBadgeFromUserBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteBadgeFromUserBadgeResponse401 = {
	data: null;
	status: 401;
};

export type deleteBadgeFromUserBadgeResponse403 = {
	data: null;
	status: 403;
};

export type deleteBadgeFromUserBadgeResponseComposite =
	| deleteBadgeFromUserBadgeResponse204
	| deleteBadgeFromUserBadgeResponse400
	| deleteBadgeFromUserBadgeResponse401
	| deleteBadgeFromUserBadgeResponse403;

export type deleteBadgeFromUserBadgeResponse = deleteBadgeFromUserBadgeResponseComposite & {
	headers: Headers;
};

export const getDeleteBadgeFromUserBadgeUrl = (player: string, badgeId: number | string) => {
	return `${ELITE_API_URL}/badge/user/${player}/${badgeId}`;
};

export const deleteBadgeFromUserBadge = async (player: string, badgeId: number | string, options?: RequestInit) => {
	return customFetch<deleteBadgeFromUserBadgeResponse>(getDeleteBadgeFromUserBadgeUrl(player, badgeId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Create a badge
 */
export type createBadgeResponse204 = {
	data: null;
	status: 204;
};

export type createBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type createBadgeResponse401 = {
	data: null;
	status: 401;
};

export type createBadgeResponse403 = {
	data: null;
	status: 403;
};

export type createBadgeResponseComposite =
	| createBadgeResponse204
	| createBadgeResponse400
	| createBadgeResponse401
	| createBadgeResponse403;

export type createBadgeResponse = createBadgeResponseComposite & {
	headers: Headers;
};

export const getCreateBadgeUrl = () => {
	return `${ELITE_API_URL}/badges`;
};

export const createBadge = async (
	createBadgeRequestCreateBadge: CreateBadgeRequestCreateBadge,
	options?: RequestInit
) => {
	const formData = new FormData();
	formData.append(`name`, createBadgeRequestCreateBadge.name);
	formData.append(`description`, createBadgeRequestCreateBadge.description);
	formData.append(`requirements`, createBadgeRequestCreateBadge.requirements);
	formData.append(`tieToAccount`, createBadgeRequestCreateBadge.tieToAccount.toString());
	if (createBadgeRequestCreateBadge.image !== undefined && createBadgeRequestCreateBadge.image !== null) {
		formData.append(`image`, createBadgeRequestCreateBadge.image);
	}

	return customFetch<createBadgeResponse>(getCreateBadgeUrl(), {
		...options,
		method: 'POST',
		body: formData,
	});
};

/**
 * @summary Get all badges
 */
export type getBadgesResponse200 = {
	data: BadgeDto[];
	status: 200;
};

export type getBadgesResponseComposite = getBadgesResponse200;

export type getBadgesResponse = getBadgesResponseComposite & {
	headers: Headers;
};

export const getGetBadgesUrl = () => {
	return `${ELITE_API_URL}/badges`;
};

export const getBadges = async (options?: RequestInit) => {
	return customFetch<getBadgesResponse>(getGetBadgesUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Delete a badge
 */
export type deleteBadgeResponse204 = {
	data: null;
	status: 204;
};

export type deleteBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteBadgeResponse401 = {
	data: null;
	status: 401;
};

export type deleteBadgeResponse403 = {
	data: null;
	status: 403;
};

export type deleteBadgeResponseComposite =
	| deleteBadgeResponse204
	| deleteBadgeResponse400
	| deleteBadgeResponse401
	| deleteBadgeResponse403;

export type deleteBadgeResponse = deleteBadgeResponseComposite & {
	headers: Headers;
};

export const getDeleteBadgeUrl = (badgeId: number | string) => {
	return `${ELITE_API_URL}/badge/${badgeId}`;
};

export const deleteBadge = async (badgeId: number | string, options?: RequestInit) => {
	return customFetch<deleteBadgeResponse>(getDeleteBadgeUrl(badgeId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update a badge
 */
export type updateBadgeResponse204 = {
	data: null;
	status: 204;
};

export type updateBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateBadgeResponse401 = {
	data: null;
	status: 401;
};

export type updateBadgeResponse403 = {
	data: null;
	status: 403;
};

export type updateBadgeResponseComposite =
	| updateBadgeResponse204
	| updateBadgeResponse400
	| updateBadgeResponse401
	| updateBadgeResponse403;

export type updateBadgeResponse = updateBadgeResponseComposite & {
	headers: Headers;
};

export const getUpdateBadgeUrl = (badgeId: number | string) => {
	return `${ELITE_API_URL}/badge/${badgeId}`;
};

export const updateBadge = async (
	badgeId: number | string,
	updateBadgeRequestUpdateBadge: UpdateBadgeRequestUpdateBadge,
	options?: RequestInit
) => {
	const formData = new FormData();
	if (updateBadgeRequestUpdateBadge.name !== undefined && updateBadgeRequestUpdateBadge.name !== null) {
		formData.append(`name`, updateBadgeRequestUpdateBadge.name);
	}
	if (updateBadgeRequestUpdateBadge.description !== undefined && updateBadgeRequestUpdateBadge.description !== null) {
		formData.append(`description`, updateBadgeRequestUpdateBadge.description);
	}
	if (
		updateBadgeRequestUpdateBadge.requirements !== undefined &&
		updateBadgeRequestUpdateBadge.requirements !== null
	) {
		formData.append(`requirements`, updateBadgeRequestUpdateBadge.requirements);
	}
	if (updateBadgeRequestUpdateBadge.image !== undefined && updateBadgeRequestUpdateBadge.image !== null) {
		formData.append(`image`, updateBadgeRequestUpdateBadge.image);
	}

	return customFetch<updateBadgeResponse>(getUpdateBadgeUrl(badgeId), {
		...options,
		method: 'PATCH',
		body: formData,
	});
};

/**
 * @summary Link Account
 */
export type linkAccountBotResponse204 = {
	data: null;
	status: 204;
};

export type linkAccountBotResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type linkAccountBotResponseComposite = linkAccountBotResponse204 | linkAccountBotResponse400;

export type linkAccountBotResponse = linkAccountBotResponseComposite & {
	headers: Headers;
};

export const getLinkAccountBotUrl = (discordId: bigint | number | string, player: string) => {
	return `${ELITE_API_URL}/bot/account/${discordId}/${player}`;
};

export const linkAccountBot = async (discordId: bigint | number | string, player: string, options?: RequestInit) => {
	return customFetch<linkAccountBotResponse>(getLinkAccountBotUrl(discordId, player), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Unlink Account
 */
export type unlinkAccountBotResponse204 = {
	data: null;
	status: 204;
};

export type unlinkAccountBotResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type unlinkAccountBotResponseComposite = unlinkAccountBotResponse204 | unlinkAccountBotResponse400;

export type unlinkAccountBotResponse = unlinkAccountBotResponseComposite & {
	headers: Headers;
};

export const getUnlinkAccountBotUrl = (discordId: bigint | number | string, player: string) => {
	return `${ELITE_API_URL}/bot/account/${discordId}/${player}`;
};

export const unlinkAccountBot = async (discordId: bigint | number | string, player: string, options?: RequestInit) => {
	return customFetch<unlinkAccountBotResponse>(getUnlinkAccountBotUrl(discordId, player), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Make Primary Account
 */
export type makePrimaryAccountResponse204 = {
	data: null;
	status: 204;
};

export type makePrimaryAccountResponse400 = {
	data: ProblemDetails;
	status: 400;
};

export type makePrimaryAccountResponseComposite = makePrimaryAccountResponse204 | makePrimaryAccountResponse400;

export type makePrimaryAccountResponse = makePrimaryAccountResponseComposite & {
	headers: Headers;
};

export const getMakePrimaryAccountUrl = (discordId: bigint | number | string, player: string) => {
	return `${ELITE_API_URL}/bot/account/${discordId}/${player}/primary`;
};

export const makePrimaryAccount = async (
	discordId: bigint | number | string,
	player: string,
	options?: RequestInit
) => {
	return customFetch<makePrimaryAccountResponse>(getMakePrimaryAccountUrl(discordId, player), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Refresh User Purchases
 */
export type refreshUserPurchasesResponse204 = {
	data: null;
	status: 204;
};

export type refreshUserPurchasesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type refreshUserPurchasesResponseComposite = refreshUserPurchasesResponse204 | refreshUserPurchasesResponse400;

export type refreshUserPurchasesResponse = refreshUserPurchasesResponseComposite & {
	headers: Headers;
};

export const getRefreshUserPurchasesUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/account/${discordId}/purchases`;
};

export const refreshUserPurchases = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<refreshUserPurchasesResponse>(getRefreshUserPurchasesUrl(discordId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Grant Badge
 */
export type grantBadgeResponse204 = {
	data: null;
	status: 204;
};

export type grantBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type grantBadgeResponseComposite = grantBadgeResponse204 | grantBadgeResponse400;

export type grantBadgeResponse = grantBadgeResponseComposite & {
	headers: Headers;
};

export const getGrantBadgeUrl = (player: string, badgeId: number | string) => {
	return `${ELITE_API_URL}/bot/badges/${player}/${badgeId}`;
};

export const grantBadge = async (player: string, badgeId: number | string, options?: RequestInit) => {
	return customFetch<grantBadgeResponse>(getGrantBadgeUrl(player, badgeId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Remove Badge
 */
export type removeBadgeResponse204 = {
	data: null;
	status: 204;
};

export type removeBadgeResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type removeBadgeResponseComposite = removeBadgeResponse204 | removeBadgeResponse400;

export type removeBadgeResponse = removeBadgeResponseComposite & {
	headers: Headers;
};

export const getRemoveBadgeUrl = (player: string, badgeId: number | string) => {
	return `${ELITE_API_URL}/bot/badges/${player}/${badgeId}`;
};

export const removeBadge = async (player: string, badgeId: number | string, options?: RequestInit) => {
	return customFetch<removeBadgeResponse>(getRemoveBadgeUrl(player, badgeId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Disable contest pings for a guild
 */
export type disableContestPingsPingsResponse204 = {
	data: null;
	status: 204;
};

export type disableContestPingsPingsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type disableContestPingsPingsResponseComposite =
	| disableContestPingsPingsResponse204
	| disableContestPingsPingsResponse400;

export type disableContestPingsPingsResponse = disableContestPingsPingsResponseComposite & {
	headers: Headers;
};

export const getDisableContestPingsPingsUrl = (
	discordId: bigint | number | string,
	params?: DisableContestPingsPingsParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/bot/contestpings/${discordId}?${stringifiedParams}`
		: `${ELITE_API_URL}/bot/contestpings/${discordId}`;
};

export const disableContestPingsPings = async (
	discordId: bigint | number | string,
	params?: DisableContestPingsPingsParams,
	options?: RequestInit
) => {
	return customFetch<disableContestPingsPingsResponse>(getDisableContestPingsPingsUrl(discordId, params), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get list of guilds with contest pings enabled
 */
export type getContestPingsResponse200 = {
	data: ContestPingsFeatureDto[];
	status: 200;
};

export type getContestPingsResponseComposite = getContestPingsResponse200;

export type getContestPingsResponse = getContestPingsResponseComposite & {
	headers: Headers;
};

export const getGetContestPingsUrl = () => {
	return `${ELITE_API_URL}/bot/contestpings`;
};

export const getContestPings = async (options?: RequestInit) => {
	return customFetch<getContestPingsResponse>(getGetContestPingsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get guild
 */
export type getBotGuildResponse200 = {
	data: PrivateGuildDto;
	status: 200;
};

export type getBotGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getBotGuildResponseComposite = getBotGuildResponse200 | getBotGuildResponse400;

export type getBotGuildResponse = getBotGuildResponseComposite & {
	headers: Headers;
};

export const getGetBotGuildUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/${discordId}`;
};

export const getBotGuild = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getBotGuildResponse>(getGetBotGuildUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get guild jacob
 */
export type getJacobFeatureResponse200 = {
	data: GuildJacobLeaderboardFeature;
	status: 200;
};

export type getJacobFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getJacobFeatureResponseComposite = getJacobFeatureResponse200 | getJacobFeatureResponse400;

export type getJacobFeatureResponse = getJacobFeatureResponseComposite & {
	headers: Headers;
};

export const getGetJacobFeatureUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/${discordId}/jacob`;
};

export const getJacobFeature = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getJacobFeatureResponse>(getGetJacobFeatureUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Update guild jacob feature
 */
export type updateJacobFeatureResponse200 = {
	data: GuildJacobLeaderboardFeature;
	status: 200;
};

export type updateJacobFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateJacobFeatureResponseComposite = updateJacobFeatureResponse200 | updateJacobFeatureResponse400;

export type updateJacobFeatureResponse = updateJacobFeatureResponseComposite & {
	headers: Headers;
};

export const getUpdateJacobFeatureUrl = (discordId: bigint | number | string, params?: UpdateJacobFeatureParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/bot/${discordId}/jacob?${stringifiedParams}`
		: `${ELITE_API_URL}/bot/${discordId}/jacob`;
};

export const updateJacobFeature = async (
	discordId: bigint | number | string,
	updateJacobFeatureRequestUpdateJacobFeature: UpdateJacobFeatureRequestUpdateJacobFeature,
	params?: UpdateJacobFeatureParams,
	options?: RequestInit
) => {
	return customFetch<updateJacobFeatureResponse>(getUpdateJacobFeatureUrl(discordId, params), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateJacobFeatureRequestUpdateJacobFeature),
	});
};

/**
 * @summary Request Guild Update
 */
export type refreshGuildResponse204 = {
	data: null;
	status: 204;
};

export type refreshGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type refreshGuildResponseComposite = refreshGuildResponse204 | refreshGuildResponse400;

export type refreshGuildResponse = refreshGuildResponseComposite & {
	headers: Headers;
};

export const getRefreshGuildUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/guild/${discordId}`;
};

export const refreshGuild = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<refreshGuildResponse>(getRefreshGuildUrl(discordId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Update Guild
 */
export type updateGuildResponse200 = {
	data: DiscordIdRequest;
	status: 200;
};

export type updateGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildResponseComposite = updateGuildResponse200 | updateGuildResponse400;

export type updateGuildResponse = updateGuildResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/guild/${discordId}`;
};

export const updateGuild = async (
	discordId: bigint | number | string,
	incomingGuildDto: IncomingGuildDto,
	options?: RequestInit
) => {
	return customFetch<updateGuildResponse>(getUpdateGuildUrl(discordId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(incomingGuildDto),
	});
};

/**
 * @summary Update Guild Channel
 */
export type updateGuildChannelResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildChannelResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildChannelResponseComposite = updateGuildChannelResponse204 | updateGuildChannelResponse400;

export type updateGuildChannelResponse = updateGuildChannelResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildChannelUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/guild/${discordId}/channels`;
};

export const updateGuildChannel = async (
	discordId: bigint | number | string,
	incomingGuildChannelDto: IncomingGuildChannelDto,
	options?: RequestInit
) => {
	return customFetch<updateGuildChannelResponse>(getUpdateGuildChannelUrl(discordId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(incomingGuildChannelDto),
	});
};

/**
 * @summary Update Guild Member Roles
 */
export type updateGuildMemberRolesResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildMemberRolesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildMemberRolesResponseComposite =
	| updateGuildMemberRolesResponse204
	| updateGuildMemberRolesResponse400;

export type updateGuildMemberRolesResponse = updateGuildMemberRolesResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildMemberRolesUrl = (discordId: bigint | number | string, userId: string) => {
	return `${ELITE_API_URL}/bot/guild/${discordId}/members/${userId}/roles`;
};

export const updateGuildMemberRoles = async (
	discordId: bigint | number | string,
	userId: string,
	updateGuildMemberRolesBody: string[],
	options?: RequestInit
) => {
	return customFetch<updateGuildMemberRolesResponse>(getUpdateGuildMemberRolesUrl(discordId, userId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateGuildMemberRolesBody),
	});
};

/**
 * @summary Update Guild Role
 */
export type updateGuildRoleResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildRoleResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildRoleResponseComposite = updateGuildRoleResponse204 | updateGuildRoleResponse400;

export type updateGuildRoleResponse = updateGuildRoleResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildRoleUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/bot/guild/${discordId}/roles`;
};

export const updateGuildRole = async (
	discordId: bigint | number | string,
	incomingGuildRoleDto: IncomingGuildRoleDto,
	options?: RequestInit
) => {
	return customFetch<updateGuildRoleResponse>(getUpdateGuildRoleUrl(discordId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(incomingGuildRoleDto),
	});
};

/**
 * @summary Update user Discord account
 */
export type updateDiscordAccountResponse200 = {
	data: AuthorizedAccountDto;
	status: 200;
};

export type updateDiscordAccountResponseComposite = updateDiscordAccountResponse200;

export type updateDiscordAccountResponse = updateDiscordAccountResponseComposite & {
	headers: Headers;
};

export const getUpdateDiscordAccountUrl = () => {
	return `${ELITE_API_URL}/bot/account`;
};

export const updateDiscordAccount = async (incomingAccountDto: IncomingAccountDto, options?: RequestInit) => {
	return customFetch<updateDiscordAccountResponse>(getUpdateDiscordAccountUrl(), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(incomingAccountDto),
	});
};

/**
 * @summary Get a contest from a contest key
 */
export type getContestFromKeyResponse200 = {
	data: JacobContestWithParticipationsDto;
	status: 200;
};

export type getContestFromKeyResponseComposite = getContestFromKeyResponse200;

export type getContestFromKeyResponse = getContestFromKeyResponseComposite & {
	headers: Headers;
};

export const getGetContestFromKeyUrl = (contestKey: string) => {
	return `${ELITE_API_URL}/contest/${contestKey}`;
};

export const getContestFromKey = async (contestKey: string, options?: RequestInit) => {
	return customFetch<getContestFromKeyResponse>(getGetContestFromKeyUrl(contestKey), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get the three contests that start at a specific timestamp
 */
export type getContestsAtTimestampResponse200 = {
	data: JacobContestWithParticipationsDto[];
	status: 200;
};

export type getContestsAtTimestampResponseComposite = getContestsAtTimestampResponse200;

export type getContestsAtTimestampResponse = getContestsAtTimestampResponseComposite & {
	headers: Headers;
};

export const getGetContestsAtTimestampUrl = (
	timestamp: bigint | number | string,
	params: GetContestsAtTimestampParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/contests/${timestamp}?${stringifiedParams}`
		: `${ELITE_API_URL}/contests/${timestamp}`;
};

export const getContestsAtTimestamp = async (
	timestamp: bigint | number | string,
	params: GetContestsAtTimestampParams,
	options?: RequestInit
) => {
	return customFetch<getContestsAtTimestampResponse>(getGetContestsAtTimestampUrl(timestamp, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get the three contests in a specific SkyBlock day
 */
export type getContestsInDayResponse200 = {
	data: JacobContestWithParticipationsDto[];
	status: 200;
};

export type getContestsInDayResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getContestsInDayResponseComposite = getContestsInDayResponse200 | getContestsInDayResponse400;

export type getContestsInDayResponse = getContestsInDayResponseComposite & {
	headers: Headers;
};

export const getGetContestsInDayUrl = (year: number | string, month: number | string, day: number | string) => {
	return `${ELITE_API_URL}/contests/at/${year}/${month}/${day}`;
};

export const getContestsInDay = async (
	year: number | string,
	month: number | string,
	day: number | string,
	options?: RequestInit
) => {
	return customFetch<getContestsInDayResponse>(getGetContestsInDayUrl(year, month, day), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get all contests in a SkyBlock month
 */
export type getContestsInMonthResponse200 = {
	data: GetContestsInMonth200;
	status: 200;
};

export type getContestsInMonthResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getContestsInMonthResponseComposite = getContestsInMonthResponse200 | getContestsInMonthResponse400;

export type getContestsInMonthResponse = getContestsInMonthResponseComposite & {
	headers: Headers;
};

export const getGetContestsInMonthUrl = (year: number | string, month: number | string) => {
	return `${ELITE_API_URL}/contests/at/${year}/${month}`;
};

export const getContestsInMonth = async (year: number | string, month: number | string, options?: RequestInit) => {
	return customFetch<getContestsInMonthResponse>(getGetContestsInMonthUrl(year, month), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get all contests in a SkyBlock year
 */
export type getContestsInYearResponse200 = {
	data: YearlyContestsDto;
	status: 200;
};

export type getContestsInYearResponseComposite = getContestsInYearResponse200;

export type getContestsInYearResponse = getContestsInYearResponseComposite & {
	headers: Headers;
};

export const getGetContestsInYearUrl = (year: number | string, params?: GetContestsInYearParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/contests/at/${year}?${stringifiedParams}`
		: `${ELITE_API_URL}/contests/at/${year}`;
};

export const getContestsInYear = async (
	year: number | string,
	params?: GetContestsInYearParams,
	options?: RequestInit
) => {
	return customFetch<getContestsInYearResponse>(getGetContestsInYearUrl(year, params), {
		...options,
		method: 'GET',
	});
};

/**
 * Uses crowd-sourced data, which may not be accurate.
Data used and provided by <see href="https://github.com/hannibal002/SkyHanni/">SkyHanni</see> to display upcoming contests in-game.
 * @summary Get upcoming contests for the current SkyBlock year
 */
export type getCurrentContestsResponse200 = {
	data: YearlyContestsDto;
	status: 200;
};

export type getCurrentContestsResponseComposite = getCurrentContestsResponse200;

export type getCurrentContestsResponse = getCurrentContestsResponseComposite & {
	headers: Headers;
};

export const getGetCurrentContestsUrl = () => {
	return `${ELITE_API_URL}/contests/at/now`;
};

export const getCurrentContests = async (options?: RequestInit) => {
	return customFetch<getCurrentContestsResponse>(getGetCurrentContestsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Data used and provided by <see href="https://github.com/hannibal002/SkyHanni/">SkyHanni</see> to display upcoming contests in-game.
 * @summary Upload upcoming contests for the current SkyBlock year
 */
export type uploadCurrentContestsResponse204 = {
	data: null;
	status: 204;
};

export type uploadCurrentContestsResponseComposite = uploadCurrentContestsResponse204;

export type uploadCurrentContestsResponse = uploadCurrentContestsResponseComposite & {
	headers: Headers;
};

export const getUploadCurrentContestsUrl = () => {
	return `${ELITE_API_URL}/contests/at/now`;
};

export const uploadCurrentContests = async (
	uploadCurrentContestsBody: UploadCurrentContestsBody,
	options?: RequestInit
) => {
	return customFetch<uploadCurrentContestsResponse>(getUploadCurrentContestsUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(uploadCurrentContestsBody),
	});
};

/**
 * @summary Get all contests for a player
 */
export type getPlayerParticipationsResponse200 = {
	data: ContestParticipationDto[];
	status: 200;
};

export type getPlayerParticipationsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPlayerParticipationsResponseComposite =
	| getPlayerParticipationsResponse200
	| getPlayerParticipationsResponse400;

export type getPlayerParticipationsResponse = getPlayerParticipationsResponseComposite & {
	headers: Headers;
};

export const getGetPlayerParticipationsUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/contests/${playerUuid}`;
};

export const getPlayerParticipations = async (playerUuid: string, options?: RequestInit) => {
	return customFetch<getPlayerParticipationsResponse>(getGetPlayerParticipationsUrl(playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get all contests for a profile member
 */
export type getProfileMemberParticipationsResponse200 = {
	data: ContestParticipationDto[];
	status: 200;
};

export type getProfileMemberParticipationsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileMemberParticipationsResponseComposite =
	| getProfileMemberParticipationsResponse200
	| getProfileMemberParticipationsResponse400;

export type getProfileMemberParticipationsResponse = getProfileMemberParticipationsResponseComposite & {
	headers: Headers;
};

export const getGetProfileMemberParticipationsUrl = (playerUuid: string, profileUuid: string) => {
	return `${ELITE_API_URL}/contests/${playerUuid}/${profileUuid}`;
};

export const getProfileMemberParticipations = async (
	playerUuid: string,
	profileUuid: string,
	options?: RequestInit
) => {
	return customFetch<getProfileMemberParticipationsResponse>(
		getGetProfileMemberParticipationsUrl(playerUuid, profileUuid),
		{
			...options,
			method: 'GET',
		}
	);
};

/**
 * @summary Get contest records for a SkyBlock year
 */
export type getRecordsInYearResponse200 = {
	data: YearlyCropRecordsDto;
	status: 200;
};

export type getRecordsInYearResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getRecordsInYearResponseComposite = getRecordsInYearResponse200 | getRecordsInYearResponse400;

export type getRecordsInYearResponse = getRecordsInYearResponseComposite & {
	headers: Headers;
};

export const getGetRecordsInYearUrl = (year: number | string) => {
	return `${ELITE_API_URL}/contests/records/${year}`;
};

export const getRecordsInYear = async (year: number | string, options?: RequestInit) => {
	return customFetch<getRecordsInYearResponse>(getGetRecordsInYearUrl(year), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get contests for the player's selected profile member
 */
export type getSelectedMemberParticipationsResponse200 = {
	data: ContestParticipationDto[];
	status: 200;
};

export type getSelectedMemberParticipationsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getSelectedMemberParticipationsResponseComposite =
	| getSelectedMemberParticipationsResponse200
	| getSelectedMemberParticipationsResponse400;

export type getSelectedMemberParticipationsResponse = getSelectedMemberParticipationsResponseComposite & {
	headers: Headers;
};

export const getGetSelectedMemberParticipationsUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/contests/${playerUuid}/selected`;
};

export const getSelectedMemberParticipations = async (playerUuid: string, options?: RequestInit) => {
	return customFetch<getSelectedMemberParticipationsResponse>(getGetSelectedMemberParticipationsUrl(playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Add an Event Member to a Team
 */
export type addTeamMemberAdminResponse204 = {
	data: null;
	status: 204;
};

export type addTeamMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type addTeamMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type addTeamMemberAdminResponseComposite =
	| addTeamMemberAdminResponse204
	| addTeamMemberAdminResponse400
	| addTeamMemberAdminResponse401;

export type addTeamMemberAdminResponse = addTeamMemberAdminResponseComposite & {
	headers: Headers;
};

export const getAddTeamMemberAdminUrl = (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string,
	player: string
) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams/${teamId}/members/${player}`;
};

export const addTeamMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string,
	player: string,
	options?: RequestInit
) => {
	return customFetch<addTeamMemberAdminResponse>(getAddTeamMemberAdminUrl(discordId, eventId, teamId, player), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Kick an Event Team Member
 */
export type kickTeamMemberAdminResponse204 = {
	data: null;
	status: 204;
};

export type kickTeamMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type kickTeamMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type kickTeamMemberAdminResponseComposite =
	| kickTeamMemberAdminResponse204
	| kickTeamMemberAdminResponse400
	| kickTeamMemberAdminResponse401;

export type kickTeamMemberAdminResponse = kickTeamMemberAdminResponseComposite & {
	headers: Headers;
};

export const getKickTeamMemberAdminUrl = (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string,
	player: string
) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams/${teamId}/members/${player}`;
};

export const kickTeamMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string,
	player: string,
	options?: RequestInit
) => {
	return customFetch<kickTeamMemberAdminResponse>(getKickTeamMemberAdminUrl(discordId, eventId, teamId, player), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Ban an Event Member
 */
export type banMemberAdminResponse200 = {
	data: AdminEventMemberDto;
	status: 200;
};

export type banMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type banMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type banMemberAdminResponseComposite =
	| banMemberAdminResponse200
	| banMemberAdminResponse400
	| banMemberAdminResponse401;

export type banMemberAdminResponse = banMemberAdminResponseComposite & {
	headers: Headers;
};

export const getBanMemberAdminUrl = (discordId: number | string, eventId: number | string, playerUuid: string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/bans/${playerUuid}`;
};

export const banMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	banMemberAdminBody: string,
	options?: RequestInit
) => {
	return customFetch<banMemberAdminResponse>(getBanMemberAdminUrl(discordId, eventId, playerUuid), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(banMemberAdminBody),
	});
};

/**
 * @summary Unban an Event Member
 */
export type unbanMemberAdminResponse204 = {
	data: null;
	status: 204;
};

export type unbanMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type unbanMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type unbanMemberAdminResponseComposite =
	| unbanMemberAdminResponse204
	| unbanMemberAdminResponse400
	| unbanMemberAdminResponse401;

export type unbanMemberAdminResponse = unbanMemberAdminResponseComposite & {
	headers: Headers;
};

export const getUnbanMemberAdminUrl = (discordId: number | string, eventId: number | string, playerUuid: string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/bans/${playerUuid}`;
};

export const unbanMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	options?: RequestInit
) => {
	return customFetch<unbanMemberAdminResponse>(getUnbanMemberAdminUrl(discordId, eventId, playerUuid), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Create Event
 */
export type createEventAdminResponse200 = {
	data: EventDetailsDto;
	status: 200;
};

export type createEventAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type createEventAdminResponse401 = {
	data: null;
	status: 401;
};

export type createEventAdminResponseComposite =
	| createEventAdminResponse200
	| createEventAdminResponse400
	| createEventAdminResponse401;

export type createEventAdminResponse = createEventAdminResponseComposite & {
	headers: Headers;
};

export const getCreateEventAdminUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/weight`;
};

export const createEventAdmin = async (
	discordId: bigint | number | string,
	createEventDto: CreateEventDto,
	options?: RequestInit
) => {
	return customFetch<createEventAdminResponse>(getCreateEventAdminUrl(discordId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createEventDto),
	});
};

/**
 * This generally should only be used for events with a set amount of teams (when users are not allowed to create their own teams)
 * @summary Create an Event Team
 */
export type createTeamAdminResponse204 = {
	data: null;
	status: 204;
};

export type createTeamAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type createTeamAdminResponse401 = {
	data: null;
	status: 401;
};

export type createTeamAdminResponseComposite =
	| createTeamAdminResponse204
	| createTeamAdminResponse400
	| createTeamAdminResponse401;

export type createTeamAdminResponse = createTeamAdminResponseComposite & {
	headers: Headers;
};

export const getCreateTeamAdminUrl = (
	discordId: bigint | number | string,
	eventId: number | string,
	params?: CreateTeamAdminParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams`;
};

export const createTeamAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	createEventTeamDto: CreateEventTeamDto,
	params?: CreateTeamAdminParams,
	options?: RequestInit
) => {
	return customFetch<createTeamAdminResponse>(getCreateTeamAdminUrl(discordId, eventId, params), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createEventTeamDto),
	});
};

/**
 * Delete an event and all associated data. Only available for unapproved events.
 * @summary Delete Event
 */
export type deleteEventAdminResponse204 = {
	data: null;
	status: 204;
};

export type deleteEventAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteEventAdminResponse401 = {
	data: null;
	status: 401;
};

export type deleteEventAdminResponseComposite =
	| deleteEventAdminResponse204
	| deleteEventAdminResponse400
	| deleteEventAdminResponse401;

export type deleteEventAdminResponse = deleteEventAdminResponseComposite & {
	headers: Headers;
};

export const getDeleteEventAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}`;
};

export const deleteEventAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<deleteEventAdminResponse>(getDeleteEventAdminUrl(discordId, eventId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update Event
 */
export type updateEventAdminResponse200 = {
	data: EventDetailsDto;
	status: 200;
};

export type updateEventAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateEventAdminResponse401 = {
	data: null;
	status: 401;
};

export type updateEventAdminResponseComposite =
	| updateEventAdminResponse200
	| updateEventAdminResponse400
	| updateEventAdminResponse401;

export type updateEventAdminResponse = updateEventAdminResponseComposite & {
	headers: Headers;
};

export const getUpdateEventAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}`;
};

export const updateEventAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	editEventDto: EditEventDto,
	options?: RequestInit
) => {
	return customFetch<updateEventAdminResponse>(getUpdateEventAdminUrl(discordId, eventId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(editEventDto),
	});
};

/**
 * @summary Delete Custom Event Banner
 */
export type deleteEventBannerAdminResponse204 = {
	data: null;
	status: 204;
};

export type deleteEventBannerAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteEventBannerAdminResponse401 = {
	data: null;
	status: 401;
};

export type deleteEventBannerAdminResponseComposite =
	| deleteEventBannerAdminResponse204
	| deleteEventBannerAdminResponse400
	| deleteEventBannerAdminResponse401;

export type deleteEventBannerAdminResponse = deleteEventBannerAdminResponseComposite & {
	headers: Headers;
};

export const getDeleteEventBannerAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/banner`;
};

export const deleteEventBannerAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<deleteEventBannerAdminResponse>(getDeleteEventBannerAdminUrl(discordId, eventId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Set Custom Event Banner
 */
export type setEventBannerAdminResponse204 = {
	data: null;
	status: 204;
};

export type setEventBannerAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setEventBannerAdminResponse401 = {
	data: null;
	status: 401;
};

export type setEventBannerAdminResponseComposite =
	| setEventBannerAdminResponse204
	| setEventBannerAdminResponse400
	| setEventBannerAdminResponse401;

export type setEventBannerAdminResponse = setEventBannerAdminResponseComposite & {
	headers: Headers;
};

export const getSetEventBannerAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/banner`;
};

export const setEventBannerAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	editEventBannerDto: EditEventBannerDto,
	options?: RequestInit
) => {
	const formData = new FormData();
	if (editEventBannerDto.image !== undefined && editEventBannerDto.image !== null) {
		formData.append(`image`, editEventBannerDto.image);
	}

	return customFetch<setEventBannerAdminResponse>(getSetEventBannerAdminUrl(discordId, eventId), {
		...options,
		method: 'POST',
		body: formData,
	});
};

/**
 * @summary Delete an Event Member
 */
export type deleteMemberAdminResponse204 = {
	data: null;
	status: 204;
};

export type deleteMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type deleteMemberAdminResponseComposite =
	| deleteMemberAdminResponse204
	| deleteMemberAdminResponse400
	| deleteMemberAdminResponse401;

export type deleteMemberAdminResponse = deleteMemberAdminResponseComposite & {
	headers: Headers;
};

export const getDeleteMemberAdminUrl = (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	params?: DeleteMemberAdminParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/members/${playerUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/members/${playerUuid}`;
};

export const deleteMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	params?: DeleteMemberAdminParams,
	options?: RequestInit
) => {
	return customFetch<deleteMemberAdminResponse>(getDeleteMemberAdminUrl(discordId, eventId, playerUuid, params), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Ban an Event Member
 */
export type forceAddMemberAdminResponse204 = {
	data: null;
	status: 204;
};

export type forceAddMemberAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type forceAddMemberAdminResponse401 = {
	data: null;
	status: 401;
};

export type forceAddMemberAdminResponseComposite =
	| forceAddMemberAdminResponse204
	| forceAddMemberAdminResponse400
	| forceAddMemberAdminResponse401;

export type forceAddMemberAdminResponse = forceAddMemberAdminResponseComposite & {
	headers: Headers;
};

export const getForceAddMemberAdminUrl = (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	params: ForceAddMemberAdminParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/members/${playerUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/members/${playerUuid}`;
};

export const forceAddMemberAdmin = async (
	discordId: number | string,
	eventId: number | string,
	playerUuid: string,
	params: ForceAddMemberAdminParams,
	options?: RequestInit
) => {
	return customFetch<forceAddMemberAdminResponse>(getForceAddMemberAdminUrl(discordId, eventId, playerUuid, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Delete an Event Team
 */
export type deleteTeamAdminResponse204 = {
	data: null;
	status: 204;
};

export type deleteTeamAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteTeamAdminResponse401 = {
	data: null;
	status: 401;
};

export type deleteTeamAdminResponseComposite =
	| deleteTeamAdminResponse204
	| deleteTeamAdminResponse400
	| deleteTeamAdminResponse401;

export type deleteTeamAdminResponse = deleteTeamAdminResponseComposite & {
	headers: Headers;
};

export const getDeleteTeamAdminUrl = (
	discordId: bigint | number | string,
	eventId: number | string,
	teamId: number | string
) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams/${teamId}`;
};

export const deleteTeamAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	teamId: number | string,
	options?: RequestInit
) => {
	return customFetch<deleteTeamAdminResponse>(getDeleteTeamAdminUrl(discordId, eventId, teamId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update a team
 */
export type updateTeamAdminResponse204 = {
	data: null;
	status: 204;
};

export type updateTeamAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateTeamAdminResponse401 = {
	data: null;
	status: 401;
};

export type updateTeamAdminResponseComposite =
	| updateTeamAdminResponse204
	| updateTeamAdminResponse400
	| updateTeamAdminResponse401;

export type updateTeamAdminResponse = updateTeamAdminResponseComposite & {
	headers: Headers;
};

export const getUpdateTeamAdminUrl = (
	discordId: bigint | number | string,
	eventId: number | string,
	teamId: number | string
) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams/${teamId}`;
};

export const updateTeamAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	teamId: number | string,
	updateEventTeamDto: UpdateEventTeamDto,
	options?: RequestInit
) => {
	return customFetch<updateTeamAdminResponse>(getUpdateTeamAdminUrl(discordId, eventId, teamId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateEventTeamDto),
	});
};

/**
 * @summary Get banned event members
 */
export type getBannedMembersAdminResponse200 = {
	data: AdminEventMemberDto[];
	status: 200;
};

export type getBannedMembersAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getBannedMembersAdminResponse401 = {
	data: null;
	status: 401;
};

export type getBannedMembersAdminResponseComposite =
	| getBannedMembersAdminResponse200
	| getBannedMembersAdminResponse400
	| getBannedMembersAdminResponse401;

export type getBannedMembersAdminResponse = getBannedMembersAdminResponseComposite & {
	headers: Headers;
};

export const getGetBannedMembersAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/event/${eventId}/bans`;
};

export const getBannedMembersAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<getBannedMembersAdminResponse>(getGetBannedMembersAdminUrl(discordId, eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get event members
 */
export type getGuildEventMembersAdminResponse200 = {
	data: AdminEventMemberDto[];
	status: 200;
};

export type getGuildEventMembersAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getGuildEventMembersAdminResponse401 = {
	data: null;
	status: 401;
};

export type getGuildEventMembersAdminResponseComposite =
	| getGuildEventMembersAdminResponse200
	| getGuildEventMembersAdminResponse400
	| getGuildEventMembersAdminResponse401;

export type getGuildEventMembersAdminResponse = getGuildEventMembersAdminResponseComposite & {
	headers: Headers;
};

export const getGetGuildEventMembersAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/event/${eventId}/members`;
};

export const getGuildEventMembersAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<getGuildEventMembersAdminResponse>(getGetGuildEventMembersAdminUrl(discordId, eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get an event for a guild
 */
export type getGuildEventAdminResponse200 = {
	data: EventDetailsDto;
	status: 200;
};

export type getGuildEventAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getGuildEventAdminResponse401 = {
	data: null;
	status: 401;
};

export type getGuildEventAdminResponseComposite =
	| getGuildEventAdminResponse200
	| getGuildEventAdminResponse400
	| getGuildEventAdminResponse401;

export type getGuildEventAdminResponse = getGuildEventAdminResponseComposite & {
	headers: Headers;
};

export const getGetGuildEventAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/event/${eventId}/admin`;
};

export const getGuildEventAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<getGuildEventAdminResponse>(getGetGuildEventAdminUrl(discordId, eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get all events for a guild
 */
export type getGuildEventsAdminResponse200 = {
	data: EventDetailsDto[];
	status: 200;
};

export type getGuildEventsAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getGuildEventsAdminResponse401 = {
	data: null;
	status: 401;
};

export type getGuildEventsAdminResponseComposite =
	| getGuildEventsAdminResponse200
	| getGuildEventsAdminResponse400
	| getGuildEventsAdminResponse401;

export type getGuildEventsAdminResponse = getGuildEventsAdminResponseComposite & {
	headers: Headers;
};

export const getGetGuildEventsAdminUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/admin`;
};

export const getGuildEventsAdmin = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getGuildEventsAdminResponse>(getGetGuildEventsAdminUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get event teams
 */
export type getTeamsAdminResponse200 = {
	data: EventTeamWithMembersDto[];
	status: 200;
};

export type getTeamsAdminResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getTeamsAdminResponse401 = {
	data: null;
	status: 401;
};

export type getTeamsAdminResponseComposite =
	| getTeamsAdminResponse200
	| getTeamsAdminResponse400
	| getTeamsAdminResponse401;

export type getTeamsAdminResponse = getTeamsAdminResponseComposite & {
	headers: Headers;
};

export const getGetTeamsAdminUrl = (discordId: bigint | number | string, eventId: number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/event/${eventId}/teams`;
};

export const getTeamsAdmin = async (
	discordId: bigint | number | string,
	eventId: number | string,
	options?: RequestInit
) => {
	return customFetch<getTeamsAdminResponse>(getGetTeamsAdminUrl(discordId, eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Set player as team owner
 */
export type setTeamOwnerAdminResponse204 = {
	data: null;
	status: 204;
};

export type setTeamOwnerAdminResponse401 = {
	data: null;
	status: 401;
};

export type setTeamOwnerAdminResponseComposite = setTeamOwnerAdminResponse204 | setTeamOwnerAdminResponse401;

export type setTeamOwnerAdminResponse = setTeamOwnerAdminResponseComposite & {
	headers: Headers;
};

export const getSetTeamOwnerAdminUrl = (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string
) => {
	return `${ELITE_API_URL}/guild/${discordId}/events/${eventId}/teams/${teamId}/owner`;
};

export const setTeamOwnerAdmin = async (
	discordId: number | string,
	eventId: number | string,
	teamId: number | string,
	setTeamOwnerRequest: SetTeamOwnerRequest,
	options?: RequestInit
) => {
	return customFetch<setTeamOwnerAdminResponse>(getSetTeamOwnerAdminUrl(discordId, eventId, teamId), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(setTeamOwnerRequest),
	});
};

/**
 * @summary Get an event
 */
export type getEventResponse200 = {
	data: EventDetailsDto;
	status: 200;
};

export type getEventResponseComposite = getEventResponse200;

export type getEventResponse = getEventResponseComposite & {
	headers: Headers;
};

export const getGetEventUrl = (eventId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}`;
};

export const getEvent = async (eventId: number | string, options?: RequestInit) => {
	return customFetch<getEventResponse>(getGetEventUrl(eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * Default constants for event settings.
 * @summary Get event default constants
 */
export type getEventDefaultsResponse200 = {
	data: EventDefaultsDto;
	status: 200;
};

export type getEventDefaultsResponseComposite = getEventDefaultsResponse200;

export type getEventDefaultsResponse = getEventDefaultsResponseComposite & {
	headers: Headers;
};

export const getGetEventDefaultsUrl = () => {
	return `${ELITE_API_URL}/event/defaults`;
};

export const getEventDefaults = async (options?: RequestInit) => {
	return customFetch<getEventDefaultsResponse>(getGetEventDefaultsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get an event member
 */
export type getEventMemberResponse200 = {
	data: EventMemberDto;
	status: 200;
};

export type getEventMemberResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getEventMemberResponseComposite = getEventMemberResponse200 | getEventMemberResponse400;

export type getEventMemberResponse = getEventMemberResponseComposite & {
	headers: Headers;
};

export const getGetEventMemberUrl = (eventId: number | string, playerUuid: string) => {
	return `${ELITE_API_URL}/event/${eventId}/member/${playerUuid}`;
};

export const getEventMember = async (eventId: number | string, playerUuid: string, options?: RequestInit) => {
	return customFetch<getEventMemberResponse>(getGetEventMemberUrl(eventId, playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get event members
 */
export type getEventMembersResponse200 = {
	data: EventMemberDetailsDto[];
	status: 200;
};

export type getEventMembersResponseComposite = getEventMembersResponse200;

export type getEventMembersResponse = getEventMembersResponseComposite & {
	headers: Headers;
};

export const getGetEventMembersUrl = (eventId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/members`;
};

export const getEventMembers = async (eventId: number | string, options?: RequestInit) => {
	return customFetch<getEventMembersResponse>(getGetEventMembersUrl(eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get an event team
 */
export type getEventTeamResponse200 = {
	data: EventTeamWithMembersDto;
	status: 200;
};

export type getEventTeamResponseComposite = getEventTeamResponse200;

export type getEventTeamResponse = getEventTeamResponseComposite & {
	headers: Headers;
};

export const getGetEventTeamUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}`;
};

export const getEventTeam = async (eventId: number | string, teamId: number | string, options?: RequestInit) => {
	return customFetch<getEventTeamResponse>(getGetEventTeamUrl(eventId, teamId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Delete team
 */
export type deleteTeamResponse204 = {
	data: null;
	status: 204;
};

export type deleteTeamResponse401 = {
	data: null;
	status: 401;
};

export type deleteTeamResponseComposite = deleteTeamResponse204 | deleteTeamResponse401;

export type deleteTeamResponse = deleteTeamResponseComposite & {
	headers: Headers;
};

export const getDeleteTeamUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}`;
};

export const deleteTeam = async (eventId: number | string, teamId: number | string, options?: RequestInit) => {
	return customFetch<deleteTeamResponse>(getDeleteTeamUrl(eventId, teamId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update a team
 */
export type updateTeamResponse204 = {
	data: null;
	status: 204;
};

export type updateTeamResponse401 = {
	data: null;
	status: 401;
};

export type updateTeamResponseComposite = updateTeamResponse204 | updateTeamResponse401;

export type updateTeamResponse = updateTeamResponseComposite & {
	headers: Headers;
};

export const getUpdateTeamUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}`;
};

export const updateTeam = async (
	eventId: number | string,
	teamId: number | string,
	updateEventTeamDto: UpdateEventTeamDto,
	options?: RequestInit
) => {
	return customFetch<updateTeamResponse>(getUpdateTeamUrl(eventId, teamId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateEventTeamDto),
	});
};

/**
 * @summary Get event teams
 */
export type getEventTeamsResponse200 = {
	data: EventTeamWithMembersDto[];
	status: 200;
};

export type getEventTeamsResponseComposite = getEventTeamsResponse200;

export type getEventTeamsResponse = getEventTeamsResponseComposite & {
	headers: Headers;
};

export const getGetEventTeamsUrl = (eventId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/teams`;
};

export const getEventTeams = async (eventId: number | string, options?: RequestInit) => {
	return customFetch<getEventTeamsResponse>(getGetEventTeamsUrl(eventId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Create a team
 */
export type createTeamResponse204 = {
	data: null;
	status: 204;
};

export type createTeamResponse401 = {
	data: null;
	status: 401;
};

export type createTeamResponseComposite = createTeamResponse204 | createTeamResponse401;

export type createTeamResponse = createTeamResponseComposite & {
	headers: Headers;
};

export const getCreateTeamUrl = (eventId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/teams`;
};

export const createTeam = async (
	eventId: number | string,
	createEventTeamDto: CreateEventTeamDto,
	options?: RequestInit
) => {
	return customFetch<createTeamResponse>(getCreateTeamUrl(eventId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createEventTeamDto),
	});
};

/**
 * Lists of whitelisted words for team name generation.
 * @summary Get event team word list constants
 */
export type getTeamWordListResponse200 = {
	data: EventTeamsWordListDto;
	status: 200;
};

export type getTeamWordListResponseComposite = getTeamWordListResponse200;

export type getTeamWordListResponse = getTeamWordListResponseComposite & {
	headers: Headers;
};

export const getGetTeamWordListUrl = () => {
	return `${ELITE_API_URL}/event/teams/words`;
};

export const getTeamWordList = async (options?: RequestInit) => {
	return customFetch<getTeamWordListResponse>(getGetTeamWordListUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get upcoming events
 */
export type getUpcomingEventsResponse200 = {
	data: EventDetailsDto[];
	status: 200;
};

export type getUpcomingEventsResponseComposite = getUpcomingEventsResponse200;

export type getUpcomingEventsResponse = getUpcomingEventsResponseComposite & {
	headers: Headers;
};

export const getGetUpcomingEventsUrl = (params?: GetUpcomingEventsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0 ? `${ELITE_API_URL}/events?${stringifiedParams}` : `${ELITE_API_URL}/events`;
};

export const getUpcomingEvents = async (params?: GetUpcomingEventsParams, options?: RequestInit) => {
	return customFetch<getUpcomingEventsResponse>(getGetUpcomingEventsUrl(params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Join an event
 */
export type joinEventResponse204 = {
	data: null;
	status: 204;
};

export type joinEventResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type joinEventResponse401 = {
	data: null;
	status: 401;
};

export type joinEventResponseComposite = joinEventResponse204 | joinEventResponse400 | joinEventResponse401;

export type joinEventResponse = joinEventResponseComposite & {
	headers: Headers;
};

export const getJoinEventUrl = (eventId: number | string, params?: JoinEventParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/event/${eventId}/join?${stringifiedParams}`
		: `${ELITE_API_URL}/event/${eventId}/join`;
};

export const joinEvent = async (eventId: number | string, params?: JoinEventParams, options?: RequestInit) => {
	return customFetch<joinEventResponse>(getJoinEventUrl(eventId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Join a team
 */
export type joinTeamResponse204 = {
	data: null;
	status: 204;
};

export type joinTeamResponse401 = {
	data: null;
	status: 401;
};

export type joinTeamResponseComposite = joinTeamResponse204 | joinTeamResponse401;

export type joinTeamResponse = joinTeamResponseComposite & {
	headers: Headers;
};

export const getJoinTeamUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}/join`;
};

export const joinTeam = async (
	eventId: number | string,
	teamId: number | string,
	joinTeamBody: string,
	options?: RequestInit
) => {
	return customFetch<joinTeamResponse>(getJoinTeamUrl(eventId, teamId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(joinTeamBody),
	});
};

/**
 * Kicked members can rejoin the team if they have the join code.
 * @summary Kick a team member
 */
export type kickTeamMemberResponse204 = {
	data: null;
	status: 204;
};

export type kickTeamMemberResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type kickTeamMemberResponse401 = {
	data: null;
	status: 401;
};

export type kickTeamMemberResponseComposite =
	| kickTeamMemberResponse204
	| kickTeamMemberResponse400
	| kickTeamMemberResponse401;

export type kickTeamMemberResponse = kickTeamMemberResponseComposite & {
	headers: Headers;
};

export const getKickTeamMemberUrl = (eventId: number | string, teamId: number | string, player: string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}/member/${player}`;
};

export const kickTeamMember = async (
	eventId: number | string,
	teamId: number | string,
	player: string,
	options?: RequestInit
) => {
	return customFetch<kickTeamMemberResponse>(getKickTeamMemberUrl(eventId, teamId, player), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Join an event
 */
export type leaveEventResponse204 = {
	data: null;
	status: 204;
};

export type leaveEventResponse401 = {
	data: null;
	status: 401;
};

export type leaveEventResponseComposite = leaveEventResponse204 | leaveEventResponse401;

export type leaveEventResponse = leaveEventResponseComposite & {
	headers: Headers;
};

export const getLeaveEventUrl = (eventId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/leave`;
};

export const leaveEvent = async (eventId: number | string, options?: RequestInit) => {
	return customFetch<leaveEventResponse>(getLeaveEventUrl(eventId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Leave a team
 */
export type leaveTeamResponse204 = {
	data: null;
	status: 204;
};

export type leaveTeamResponse401 = {
	data: null;
	status: 401;
};

export type leaveTeamResponseComposite = leaveTeamResponse204 | leaveTeamResponse401;

export type leaveTeamResponse = leaveTeamResponseComposite & {
	headers: Headers;
};

export const getLeaveTeamUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}/leave`;
};

export const leaveTeam = async (eventId: number | string, teamId: number | string, options?: RequestInit) => {
	return customFetch<leaveTeamResponse>(getLeaveTeamUrl(eventId, teamId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Set player as team owner
 */
export type setTeamOwnerResponse204 = {
	data: null;
	status: 204;
};

export type setTeamOwnerResponse401 = {
	data: null;
	status: 401;
};

export type setTeamOwnerResponseComposite = setTeamOwnerResponse204 | setTeamOwnerResponse401;

export type setTeamOwnerResponse = setTeamOwnerResponseComposite & {
	headers: Headers;
};

export const getSetTeamOwnerUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}/owner`;
};

export const setTeamOwner = async (
	eventId: number | string,
	teamId: number | string,
	changeTeamOwnerRequest: ChangeTeamOwnerRequest,
	options?: RequestInit
) => {
	return customFetch<setTeamOwnerResponse>(getSetTeamOwnerUrl(eventId, teamId), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(changeTeamOwnerRequest),
	});
};

/**
 * @summary Generate new team join code
 */
export type updateTeamJoinCodeResponse204 = {
	data: null;
	status: 204;
};

export type updateTeamJoinCodeResponse401 = {
	data: null;
	status: 401;
};

export type updateTeamJoinCodeResponseComposite = updateTeamJoinCodeResponse204 | updateTeamJoinCodeResponse401;

export type updateTeamJoinCodeResponse = updateTeamJoinCodeResponseComposite & {
	headers: Headers;
};

export const getUpdateTeamJoinCodeUrl = (eventId: number | string, teamId: number | string) => {
	return `${ELITE_API_URL}/event/${eventId}/team/${teamId}/code`;
};

export const updateTeamJoinCode = async (eventId: number | string, teamId: number | string, options?: RequestInit) => {
	return customFetch<updateTeamJoinCodeResponse>(getUpdateTeamJoinCodeUrl(eventId, teamId), {
		...options,
		method: 'POST',
	});
};

/**
 * Get Garden data for a specific profile by UUID
 * @summary Get Garden data for a profile
 */
export type getGardenResponse200 = {
	data: GardenDto;
	status: 200;
};

export type getGardenResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getGardenResponse404 = {
	data: null;
	status: 404;
};

export type getGardenResponseComposite = getGardenResponse200 | getGardenResponse400 | getGardenResponse404;

export type getGardenResponse = getGardenResponseComposite & {
	headers: Headers;
};

export const getGetGardenUrl = (profileUuid: string) => {
	return `${ELITE_API_URL}/garden/${profileUuid}`;
};

export const getGarden = async (profileUuid: string, options?: RequestInit) => {
	return customFetch<getGardenResponse>(getGetGardenUrl(profileUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * Get selected Garden data for a specific player by UUID
 * @summary Get selected Garden data for a player
 */
export type getSelectedGardenResponse200 = {
	data: GardenDto;
	status: 200;
};

export type getSelectedGardenResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getSelectedGardenResponse404 = {
	data: null;
	status: 404;
};

export type getSelectedGardenResponseComposite =
	| getSelectedGardenResponse200
	| getSelectedGardenResponse400
	| getSelectedGardenResponse404;

export type getSelectedGardenResponse = getSelectedGardenResponseComposite & {
	headers: Headers;
};

export const getGetSelectedGardenUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/garden/${playerUuid}/selected`;
};

export const getSelectedGarden = async (playerUuid: string, options?: RequestInit) => {
	return customFetch<getSelectedGardenResponse>(getGetSelectedGardenUrl(playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Admin Crop Collections
 */
export type getAdminCropGraphsResponse200 = {
	data: CropCollectionsDataPointDto[];
	status: 200;
};

export type getAdminCropGraphsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAdminCropGraphsResponse401 = {
	data: null;
	status: 401;
};

export type getAdminCropGraphsResponse403 = {
	data: null;
	status: 403;
};

export type getAdminCropGraphsResponseComposite =
	| getAdminCropGraphsResponse200
	| getAdminCropGraphsResponse400
	| getAdminCropGraphsResponse401
	| getAdminCropGraphsResponse403;

export type getAdminCropGraphsResponse = getAdminCropGraphsResponseComposite & {
	headers: Headers;
};

export const getGetAdminCropGraphsUrl = (
	playerUuid: string,
	profileUuid: string,
	params?: GetAdminCropGraphsParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/admin/${playerUuid}/${profileUuid}/crops?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/admin/${playerUuid}/${profileUuid}/crops`;
};

export const getAdminCropGraphs = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetAdminCropGraphsParams,
	options?: RequestInit
) => {
	return customFetch<getAdminCropGraphsResponse>(getGetAdminCropGraphsUrl(playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Admin Skill XP
 */
export type getAdminSkillGraphsResponse200 = {
	data: SkillsDataPointDto[];
	status: 200;
};

export type getAdminSkillGraphsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAdminSkillGraphsResponse401 = {
	data: null;
	status: 401;
};

export type getAdminSkillGraphsResponse403 = {
	data: null;
	status: 403;
};

export type getAdminSkillGraphsResponseComposite =
	| getAdminSkillGraphsResponse200
	| getAdminSkillGraphsResponse400
	| getAdminSkillGraphsResponse401
	| getAdminSkillGraphsResponse403;

export type getAdminSkillGraphsResponse = getAdminSkillGraphsResponseComposite & {
	headers: Headers;
};

export const getGetAdminSkillGraphsUrl = (
	playerUuid: string,
	profileUuid: string,
	params?: GetAdminSkillGraphsParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/admin/${playerUuid}/${profileUuid}/skills?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/admin/${playerUuid}/${profileUuid}/skills`;
};

export const getAdminSkillGraphs = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetAdminSkillGraphsParams,
	options?: RequestInit
) => {
	return customFetch<getAdminSkillGraphsResponse>(getGetAdminSkillGraphsUrl(playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Crop Collections Over Time
 */
export type getCropGraphsResponse200 = {
	data: CropCollectionsDataPointDto[];
	status: 200;
};

export type getCropGraphsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getCropGraphsResponseComposite = getCropGraphsResponse200 | getCropGraphsResponse400;

export type getCropGraphsResponse = getCropGraphsResponseComposite & {
	headers: Headers;
};

export const getGetCropGraphsUrl = (playerUuid: string, profileUuid: string, params?: GetCropGraphsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/${playerUuid}/${profileUuid}/crops?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/${playerUuid}/${profileUuid}/crops`;
};

export const getCropGraphs = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetCropGraphsParams,
	options?: RequestInit
) => {
	return customFetch<getCropGraphsResponse>(getGetCropGraphsUrl(playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Skill XP Over Time
 */
export type getSkillGraphsResponse200 = {
	data: SkillsDataPointDto[];
	status: 200;
};

export type getSkillGraphsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getSkillGraphsResponseComposite = getSkillGraphsResponse200 | getSkillGraphsResponse400;

export type getSkillGraphsResponse = getSkillGraphsResponseComposite & {
	headers: Headers;
};

export const getGetSkillGraphsUrl = (playerUuid: string, profileUuid: string, params?: GetSkillGraphsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/${playerUuid}/${profileUuid}/skills?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/${playerUuid}/${profileUuid}/skills`;
};

export const getSkillGraphs = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetSkillGraphsParams,
	options?: RequestInit
) => {
	return customFetch<getSkillGraphsResponse>(getGetSkillGraphsUrl(playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get current average medal brackets
 */
export type getCurrentMedalBracketsResponse200 = {
	data: ContestBracketsDetailsDto;
	status: 200;
};

export type getCurrentMedalBracketsResponseComposite = getCurrentMedalBracketsResponse200;

export type getCurrentMedalBracketsResponse = getCurrentMedalBracketsResponseComposite & {
	headers: Headers;
};

export const getGetCurrentMedalBracketsUrl = (params?: GetCurrentMedalBracketsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/medals/now?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/medals/now`;
};

export const getCurrentMedalBrackets = async (params?: GetCurrentMedalBracketsParams, options?: RequestInit) => {
	return customFetch<getCurrentMedalBracketsResponse>(getGetCurrentMedalBracketsUrl(params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get average medal brackets for a specific SkyBlock month
 */
export type getMedalBracketsResponse200 = {
	data: ContestBracketsDetailsDto;
	status: 200;
};

export type getMedalBracketsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getMedalBracketsResponseComposite = getMedalBracketsResponse200 | getMedalBracketsResponse400;

export type getMedalBracketsResponse = getMedalBracketsResponseComposite & {
	headers: Headers;
};

export const getGetMedalBracketsUrl = (
	year: number | string,
	month: number | string,
	params?: GetMedalBracketsParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/medals/${year}/${month}?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/medals/${year}/${month}`;
};

export const getMedalBrackets = async (
	year: number | string,
	month: number | string,
	params?: GetMedalBracketsParams,
	options?: RequestInit
) => {
	return customFetch<getMedalBracketsResponse>(getGetMedalBracketsUrl(year, month, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get average medal brackets for multiple SkyBlock years
 */
export type getMedalBracketsGraphResponse200 = {
	data: ContestBracketsDetailsDto[];
	status: 200;
};

export type getMedalBracketsGraphResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getMedalBracketsGraphResponseComposite =
	| getMedalBracketsGraphResponse200
	| getMedalBracketsGraphResponse400;

export type getMedalBracketsGraphResponse = getMedalBracketsGraphResponseComposite & {
	headers: Headers;
};

export const getGetMedalBracketsGraphUrl = (year: number | string, params?: GetMedalBracketsGraphParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/graph/medals/${year}?${stringifiedParams}`
		: `${ELITE_API_URL}/graph/medals/${year}`;
};

export const getMedalBracketsGraph = async (
	year: number | string,
	params?: GetMedalBracketsGraphParams,
	options?: RequestInit
) => {
	return customFetch<getMedalBracketsGraphResponse>(getGetMedalBracketsGraphUrl(year, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Modify guild event permissions
 */
export type setEventFeatureResponse204 = {
	data: null;
	status: 204;
};

export type setEventFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setEventFeatureResponse401 = {
	data: null;
	status: 401;
};

export type setEventFeatureResponse403 = {
	data: null;
	status: 403;
};

export type setEventFeatureResponseComposite =
	| setEventFeatureResponse204
	| setEventFeatureResponse400
	| setEventFeatureResponse401
	| setEventFeatureResponse403;

export type setEventFeatureResponse = setEventFeatureResponseComposite & {
	headers: Headers;
};

export const getSetEventFeatureUrl = (discordId: bigint | number | string, params?: SetEventFeatureParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/events?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/events`;
};

export const setEventFeature = async (
	discordId: bigint | number | string,
	params?: SetEventFeatureParams,
	options?: RequestInit
) => {
	return customFetch<setEventFeatureResponse>(getSetEventFeatureUrl(discordId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Get public guild events
 */
export type getPublicGuildEventsResponse200 = {
	data: EventDetailsDto[];
	status: 200;
};

export type getPublicGuildEventsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPublicGuildEventsResponseComposite = getPublicGuildEventsResponse200 | getPublicGuildEventsResponse400;

export type getPublicGuildEventsResponse = getPublicGuildEventsResponseComposite & {
	headers: Headers;
};

export const getGetPublicGuildEventsUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}/events`;
};

export const getPublicGuildEvents = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getPublicGuildEventsResponse>(getGetPublicGuildEventsUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Modify guild jacob permissions
 */
export type setJacobFeatureResponse204 = {
	data: null;
	status: 204;
};

export type setJacobFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setJacobFeatureResponse401 = {
	data: null;
	status: 401;
};

export type setJacobFeatureResponse403 = {
	data: null;
	status: 403;
};

export type setJacobFeatureResponseComposite =
	| setJacobFeatureResponse204
	| setJacobFeatureResponse400
	| setJacobFeatureResponse401
	| setJacobFeatureResponse403;

export type setJacobFeatureResponse = setJacobFeatureResponseComposite & {
	headers: Headers;
};

export const getSetJacobFeatureUrl = (discordId: bigint | number | string, params?: SetJacobFeatureParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/jacob?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/jacob`;
};

export const setJacobFeature = async (
	discordId: bigint | number | string,
	params?: SetJacobFeatureParams,
	options?: RequestInit
) => {
	return customFetch<setJacobFeatureResponse>(getSetJacobFeatureUrl(discordId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Lock or unlock a guild
 */
export type setGuildLockedResponse204 = {
	data: null;
	status: 204;
};

export type setGuildLockedResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setGuildLockedResponse401 = {
	data: null;
	status: 401;
};

export type setGuildLockedResponse403 = {
	data: null;
	status: 403;
};

export type setGuildLockedResponseComposite =
	| setGuildLockedResponse204
	| setGuildLockedResponse400
	| setGuildLockedResponse401
	| setGuildLockedResponse403;

export type setGuildLockedResponse = setGuildLockedResponseComposite & {
	headers: Headers;
};

export const getSetGuildLockedUrl = (discordId: bigint | number | string, params?: SetGuildLockedParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/lock?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/lock`;
};

export const setGuildLocked = async (
	discordId: bigint | number | string,
	params?: SetGuildLockedParams,
	options?: RequestInit
) => {
	return customFetch<setGuildLockedResponse>(getSetGuildLockedUrl(discordId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Set a guild to public or private
 */
export type setGuildPublicResponse204 = {
	data: null;
	status: 204;
};

export type setGuildPublicResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setGuildPublicResponse401 = {
	data: null;
	status: 401;
};

export type setGuildPublicResponse403 = {
	data: null;
	status: 403;
};

export type setGuildPublicResponseComposite =
	| setGuildPublicResponse204
	| setGuildPublicResponse400
	| setGuildPublicResponse401
	| setGuildPublicResponse403;

export type setGuildPublicResponse = setGuildPublicResponseComposite & {
	headers: Headers;
};

export const getSetGuildPublicUrl = (discordId: bigint | number | string, params?: SetGuildPublicParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/guild/${discordId}/public?${stringifiedParams}`
		: `${ELITE_API_URL}/guild/${discordId}/public`;
};

export const setGuildPublic = async (
	discordId: bigint | number | string,
	params?: SetGuildPublicParams,
	options?: RequestInit
) => {
	return customFetch<setGuildPublicResponse>(getSetGuildPublicUrl(discordId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Get public guild
 */
export type getPublicGuildResponse200 = {
	data: PublicGuildDto;
	status: 200;
};

export type getPublicGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPublicGuildResponseComposite = getPublicGuildResponse200 | getPublicGuildResponse400;

export type getPublicGuildResponse = getPublicGuildResponseComposite & {
	headers: Headers;
};

export const getGetPublicGuildUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/guild/${discordId}`;
};

export const getPublicGuild = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getPublicGuildResponse>(getGetPublicGuildUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get public guilds
 */
export type getPublicGuildsResponse200 = {
	data: GuildDetailsDto[];
	status: 200;
};

export type getPublicGuildsResponseComposite = getPublicGuildsResponse200;

export type getPublicGuildsResponse = getPublicGuildsResponseComposite & {
	headers: Headers;
};

export const getGetPublicGuildsUrl = () => {
	return `${ELITE_API_URL}/guilds`;
};

export const getPublicGuilds = async (options?: RequestInit) => {
	return customFetch<getPublicGuildsResponse>(getGetPublicGuildsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Delete contest pings for a guild
 */
export type deleteContestPingsResponse204 = {
	data: null;
	status: 204;
};

export type deleteContestPingsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteContestPingsResponse401 = {
	data: null;
	status: 401;
};

export type deleteContestPingsResponseComposite =
	| deleteContestPingsResponse204
	| deleteContestPingsResponse400
	| deleteContestPingsResponse401;

export type deleteContestPingsResponse = deleteContestPingsResponseComposite & {
	headers: Headers;
};

export const getDeleteContestPingsUrl = (discordId: bigint | number | string, params?: DeleteContestPingsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/user/guild/${discordId}/contestpings?${stringifiedParams}`
		: `${ELITE_API_URL}/user/guild/${discordId}/contestpings`;
};

export const deleteContestPings = async (
	discordId: bigint | number | string,
	params?: DeleteContestPingsParams,
	options?: RequestInit
) => {
	return customFetch<deleteContestPingsResponse>(getDeleteContestPingsUrl(discordId, params), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update contest pings for a guild
 */
export type updateContestPingsResponse204 = {
	data: null;
	status: 204;
};

export type updateContestPingsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateContestPingsResponse401 = {
	data: null;
	status: 401;
};

export type updateContestPingsResponseComposite =
	| updateContestPingsResponse204
	| updateContestPingsResponse400
	| updateContestPingsResponse401;

export type updateContestPingsResponse = updateContestPingsResponseComposite & {
	headers: Headers;
};

export const getUpdateContestPingsUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/contestpings`;
};

export const updateContestPings = async (
	discordId: bigint | number | string,
	updateContestPingsRequestUpdateContestPings: UpdateContestPingsRequestUpdateContestPings,
	options?: RequestInit
) => {
	return customFetch<updateContestPingsResponse>(getUpdateContestPingsUrl(discordId), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateContestPingsRequestUpdateContestPings),
	});
};

/**
 * @summary Get guild memberships for the current user
 */
export type getUserGuildsResponse200 = {
	data: GuildMemberDto[];
	status: 200;
};

export type getUserGuildsResponse401 = {
	data: null;
	status: 401;
};

export type getUserGuildsResponseComposite = getUserGuildsResponse200 | getUserGuildsResponse401;

export type getUserGuildsResponse = getUserGuildsResponseComposite & {
	headers: Headers;
};

export const getGetUserGuildsUrl = () => {
	return `${ELITE_API_URL}/user/guilds`;
};

export const getUserGuilds = async (options?: RequestInit) => {
	return customFetch<getUserGuildsResponse>(getGetUserGuildsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get a guild membership for the current user
 */
export type getUserGuildResponse200 = {
	data: AuthorizedGuildDto;
	status: 200;
};

export type getUserGuildResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getUserGuildResponse401 = {
	data: null;
	status: 401;
};

export type getUserGuildResponseComposite = getUserGuildResponse200 | getUserGuildResponse400 | getUserGuildResponse401;

export type getUserGuildResponse = getUserGuildResponseComposite & {
	headers: Headers;
};

export const getGetUserGuildUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}`;
};

export const getUserGuild = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getUserGuildResponse>(getGetUserGuildUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Create a Jacob leaderboard
 */
export type createGuildJacobLeaderboardResponse204 = {
	data: null;
	status: 204;
};

export type createGuildJacobLeaderboardResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type createGuildJacobLeaderboardResponse401 = {
	data: null;
	status: 401;
};

export type createGuildJacobLeaderboardResponseComposite =
	| createGuildJacobLeaderboardResponse204
	| createGuildJacobLeaderboardResponse400
	| createGuildJacobLeaderboardResponse401;

export type createGuildJacobLeaderboardResponse = createGuildJacobLeaderboardResponseComposite & {
	headers: Headers;
};

export const getCreateGuildJacobLeaderboardUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/jacob/leaderboard`;
};

export const createGuildJacobLeaderboard = async (
	discordId: bigint | number | string,
	createJacobLeaderboardRequestCreateJacobLeaderboard: CreateJacobLeaderboardRequestCreateJacobLeaderboard,
	options?: RequestInit
) => {
	return customFetch<createGuildJacobLeaderboardResponse>(getCreateGuildJacobLeaderboardUrl(discordId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createJacobLeaderboardRequestCreateJacobLeaderboard),
	});
};

/**
 * @summary Delete a Jacob leaderboard
 */
export type deleteGuildJacobLeaderboardResponse204 = {
	data: null;
	status: 204;
};

export type deleteGuildJacobLeaderboardResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteGuildJacobLeaderboardResponse401 = {
	data: null;
	status: 401;
};

export type deleteGuildJacobLeaderboardResponseComposite =
	| deleteGuildJacobLeaderboardResponse204
	| deleteGuildJacobLeaderboardResponse400
	| deleteGuildJacobLeaderboardResponse401;

export type deleteGuildJacobLeaderboardResponse = deleteGuildJacobLeaderboardResponseComposite & {
	headers: Headers;
};

export const getDeleteGuildJacobLeaderboardUrl = (discordId: bigint | number | string, leaderboardId: string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/jacob/${leaderboardId}`;
};

export const deleteGuildJacobLeaderboard = async (
	discordId: bigint | number | string,
	leaderboardId: string,
	options?: RequestInit
) => {
	return customFetch<deleteGuildJacobLeaderboardResponse>(
		getDeleteGuildJacobLeaderboardUrl(discordId, leaderboardId),
		{
			...options,
			method: 'DELETE',
		}
	);
};

/**
 * @summary Update a Jacob leaderboard
 */
export type updateGuildJacobLeaderboardResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildJacobLeaderboardResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildJacobLeaderboardResponse401 = {
	data: null;
	status: 401;
};

export type updateGuildJacobLeaderboardResponseComposite =
	| updateGuildJacobLeaderboardResponse204
	| updateGuildJacobLeaderboardResponse400
	| updateGuildJacobLeaderboardResponse401;

export type updateGuildJacobLeaderboardResponse = updateGuildJacobLeaderboardResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildJacobLeaderboardUrl = (discordId: bigint | number | string, leaderboardId: string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/jacob/${leaderboardId}`;
};

export const updateGuildJacobLeaderboard = async (
	discordId: bigint | number | string,
	leaderboardId: string,
	updateJacobLeaderboardRequestUpdateJacobLeaderboard: UpdateJacobLeaderboardRequestUpdateJacobLeaderboard,
	options?: RequestInit
) => {
	return customFetch<updateGuildJacobLeaderboardResponse>(
		getUpdateGuildJacobLeaderboardUrl(discordId, leaderboardId),
		{
			...options,
			method: 'PATCH',
			headers: { 'Content-Type': 'application/json', ...options?.headers },
			body: JSON.stringify(updateJacobLeaderboardRequestUpdateJacobLeaderboard),
		}
	);
};

/**
 * @summary Get Jacob leaderboards for a guild
 */
export type getGuildJacobResponse200 = {
	data: GuildJacobLeaderboardFeature;
	status: 200;
};

export type getGuildJacobResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getGuildJacobResponse401 = {
	data: null;
	status: 401;
};

export type getGuildJacobResponseComposite =
	| getGuildJacobResponse200
	| getGuildJacobResponse400
	| getGuildJacobResponse401;

export type getGuildJacobResponse = getGuildJacobResponseComposite & {
	headers: Headers;
};

export const getGetGuildJacobUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/jacob`;
};

export const getGuildJacob = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getGuildJacobResponse>(getGetGuildJacobUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Update Jacob leaderboards for a guild
 */
export type updateGuildJacobFeatureResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildJacobFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildJacobFeatureResponse401 = {
	data: null;
	status: 401;
};

export type updateGuildJacobFeatureResponseComposite =
	| updateGuildJacobFeatureResponse204
	| updateGuildJacobFeatureResponse400
	| updateGuildJacobFeatureResponse401;

export type updateGuildJacobFeatureResponse = updateGuildJacobFeatureResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildJacobFeatureUrl = (
	discordId: bigint | number | string,
	params?: UpdateGuildJacobFeatureParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/user/guild/${discordId}/jacob?${stringifiedParams}`
		: `${ELITE_API_URL}/user/guild/${discordId}/jacob`;
};

export const updateGuildJacobFeature = async (
	discordId: bigint | number | string,
	updateJacobFeatureRequestUpdateJacobFeature: UpdateJacobFeatureRequestUpdateJacobFeature,
	params?: UpdateGuildJacobFeatureParams,
	options?: RequestInit
) => {
	return customFetch<updateGuildJacobFeatureResponse>(getUpdateGuildJacobFeatureUrl(discordId, params), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(updateJacobFeatureRequestUpdateJacobFeature),
	});
};

/**
 * @summary Send a Jacob leaderboard to Discord
 */
export type sendGuildJacobFeatureResponse204 = {
	data: null;
	status: 204;
};

export type sendGuildJacobFeatureResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type sendGuildJacobFeatureResponse401 = {
	data: null;
	status: 401;
};

export type sendGuildJacobFeatureResponseComposite =
	| sendGuildJacobFeatureResponse204
	| sendGuildJacobFeatureResponse400
	| sendGuildJacobFeatureResponse401;

export type sendGuildJacobFeatureResponse = sendGuildJacobFeatureResponseComposite & {
	headers: Headers;
};

export const getSendGuildJacobFeatureUrl = (discordId: bigint | number | string, leaderboardId: string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/jacob/${leaderboardId}/send`;
};

export const sendGuildJacobFeature = async (
	discordId: bigint | number | string,
	leaderboardId: string,
	options?: RequestInit
) => {
	return customFetch<sendGuildJacobFeatureResponse>(getSendGuildJacobFeatureUrl(discordId, leaderboardId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Refresh guild memberships for the current user
 */
export type refreshGuildMembershipsResponse204 = {
	data: null;
	status: 204;
};

export type refreshGuildMembershipsResponse401 = {
	data: null;
	status: 401;
};

export type refreshGuildMembershipsResponseComposite =
	| refreshGuildMembershipsResponse204
	| refreshGuildMembershipsResponse401;

export type refreshGuildMembershipsResponse = refreshGuildMembershipsResponseComposite & {
	headers: Headers;
};

export const getRefreshGuildMembershipsUrl = () => {
	return `${ELITE_API_URL}/user/refresh-guilds`;
};

export const refreshGuildMemberships = async (options?: RequestInit) => {
	return customFetch<refreshGuildMembershipsResponse>(getRefreshGuildMembershipsUrl(), {
		...options,
		method: 'POST',
	});
};

/**
 * This fetches the latest data from Discord for the specified guild
 * @summary Request Guild Refresh
 */
export type requestGuildRefreshResponse204 = {
	data: null;
	status: 204;
};

export type requestGuildRefreshResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type requestGuildRefreshResponse401 = {
	data: null;
	status: 401;
};

export type requestGuildRefreshResponseComposite =
	| requestGuildRefreshResponse204
	| requestGuildRefreshResponse400
	| requestGuildRefreshResponse401;

export type requestGuildRefreshResponse = requestGuildRefreshResponseComposite & {
	headers: Headers;
};

export const getRequestGuildRefreshUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/refresh`;
};

export const requestGuildRefresh = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<requestGuildRefreshResponse>(getRequestGuildRefreshUrl(discordId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Set an admin role for a guild
 */
export type setAdminRoleResponse204 = {
	data: null;
	status: 204;
};

export type setAdminRoleResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setAdminRoleResponse401 = {
	data: null;
	status: 401;
};

export type setAdminRoleResponseComposite = setAdminRoleResponse204 | setAdminRoleResponse400 | setAdminRoleResponse401;

export type setAdminRoleResponse = setAdminRoleResponseComposite & {
	headers: Headers;
};

export const getSetAdminRoleUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/adminrole`;
};

export const setAdminRole = async (
	discordId: bigint | number | string,
	setAdminRoleBody: string,
	options?: RequestInit
) => {
	return customFetch<setAdminRoleResponse>(getSetAdminRoleUrl(discordId), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(setAdminRoleBody),
	});
};

/**
 * @summary Set invite code for a guild
 */
export type setInviteResponse204 = {
	data: null;
	status: 204;
};

export type setInviteResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type setInviteResponse401 = {
	data: null;
	status: 401;
};

export type setInviteResponseComposite = setInviteResponse204 | setInviteResponse400 | setInviteResponse401;

export type setInviteResponse = setInviteResponseComposite & {
	headers: Headers;
};

export const getSetInviteUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/invite`;
};

export const setInvite = async (discordId: bigint | number | string, setInviteBody: string, options?: RequestInit) => {
	return customFetch<setInviteResponse>(getSetInviteUrl(discordId), {
		...options,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(setInviteBody),
	});
};

/**
 * @summary Refresh Guild Purchases
 */
export type updateGuildPurchasesResponse204 = {
	data: null;
	status: 204;
};

export type updateGuildPurchasesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateGuildPurchasesResponse401 = {
	data: null;
	status: 401;
};

export type updateGuildPurchasesResponseComposite =
	| updateGuildPurchasesResponse204
	| updateGuildPurchasesResponse400
	| updateGuildPurchasesResponse401;

export type updateGuildPurchasesResponse = updateGuildPurchasesResponseComposite & {
	headers: Headers;
};

export const getUpdateGuildPurchasesUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/user/guild/${discordId}/purchases`;
};

export const updateGuildPurchases = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<updateGuildPurchasesResponse>(getUpdateGuildPurchasesUrl(discordId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Get Leaderboard
 */
export type getLeaderboardResponse200 = {
	data: LeaderboardDto;
	status: 200;
};

export type getLeaderboardResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getLeaderboardResponseComposite = getLeaderboardResponse200 | getLeaderboardResponse400;

export type getLeaderboardResponse = getLeaderboardResponseComposite & {
	headers: Headers;
};

export const getGetLeaderboardUrl = (leaderboard: string, params?: GetLeaderboardParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboard/${leaderboard}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboard/${leaderboard}`;
};

export const getLeaderboard = async (leaderboard: string, params?: GetLeaderboardParams, options?: RequestInit) => {
	return customFetch<getLeaderboardResponse>(getGetLeaderboardUrl(leaderboard, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Leaderboards
 */
export type getLeaderboardsResponse200 = {
	data: LeaderboardsResponse;
	status: 200;
};

export type getLeaderboardsResponseComposite = getLeaderboardsResponse200;

export type getLeaderboardsResponse = getLeaderboardsResponseComposite & {
	headers: Headers;
};

export const getGetLeaderboardsUrl = () => {
	return `${ELITE_API_URL}/leaderboards`;
};

export const getLeaderboards = async (options?: RequestInit) => {
	return customFetch<getLeaderboardsResponse>(getGetLeaderboardsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get a Player's Leaderboard Ranks
 */
export type getPlayerLeaderboardRanksResponse200 = {
	data: LeaderboardRanksResponse;
	status: 200;
};

export type getPlayerLeaderboardRanksResponseComposite = getPlayerLeaderboardRanksResponse200;

export type getPlayerLeaderboardRanksResponse = getPlayerLeaderboardRanksResponseComposite & {
	headers: Headers;
};

export const getGetPlayerLeaderboardRanksUrl = (
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerLeaderboardRanksParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboards/${playerUuid}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboards/${playerUuid}/${profileUuid}`;
};

export const getPlayerLeaderboardRanks = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerLeaderboardRanksParams,
	options?: RequestInit
) => {
	return customFetch<getPlayerLeaderboardRanksResponse>(
		getGetPlayerLeaderboardRanksUrl(playerUuid, profileUuid, params),
		{
			...options,
			method: 'GET',
		}
	);
};

/**
 * @summary Get a Player's Leaderboard Rank
 */
export type getPlayerRank1Response200 = {
	data: LeaderboardPositionDto;
	status: 200;
};

export type getPlayerRank1Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPlayerRank1ResponseComposite = getPlayerRank1Response200 | getPlayerRank1Response400;

export type getPlayerRank1Response = getPlayerRank1ResponseComposite & {
	headers: Headers;
};

export const getGetPlayerRank1Url = (
	leaderboard: string,
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerRank1Params
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboard/rank/${leaderboard}/${playerUuid}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboard/rank/${leaderboard}/${playerUuid}/${profileUuid}`;
};

export const getPlayerRank1 = async (
	leaderboard: string,
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerRank1Params,
	options?: RequestInit
) => {
	return customFetch<getPlayerRank1Response>(getGetPlayerRank1Url(leaderboard, playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get a Player's Leaderboard Rank
 */
export type getPlayerRank2Response200 = {
	data: LeaderboardPositionDto;
	status: 200;
};

export type getPlayerRank2Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPlayerRank2ResponseComposite = getPlayerRank2Response200 | getPlayerRank2Response400;

export type getPlayerRank2Response = getPlayerRank2ResponseComposite & {
	headers: Headers;
};

export const getGetPlayerRank2Url = (
	leaderboard: string,
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerRank2Params
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboard/${leaderboard}/${playerUuid}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboard/${leaderboard}/${playerUuid}/${profileUuid}`;
};

export const getPlayerRank2 = async (
	leaderboard: string,
	playerUuid: string,
	profileUuid: string,
	params?: GetPlayerRank2Params,
	options?: RequestInit
) => {
	return customFetch<getPlayerRank2Response>(getGetPlayerRank2Url(leaderboard, playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @deprecated
 * @summary Get a Player's Leaderboard Ranks
 */
export type getPlayerRanksResponse200 = {
	data: LeaderboardPositionsDto;
	status: 200;
};

export type getPlayerRanksResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPlayerRanksResponseComposite = getPlayerRanksResponse200 | getPlayerRanksResponse400;

export type getPlayerRanksResponse = getPlayerRanksResponseComposite & {
	headers: Headers;
};

export const getGetPlayerRanksUrl = (playerUuid: string, profileUuid: string) => {
	return `${ELITE_API_URL}/leaderboard/ranks/${playerUuid}/${profileUuid}`;
};

export const getPlayerRanks = async (playerUuid: string, profileUuid: string, options?: RequestInit) => {
	return customFetch<getPlayerRanksResponse>(getGetPlayerRanksUrl(playerUuid, profileUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get a Profiles's Leaderboard Rank
 */
export type getProfileRank1Response200 = {
	data: LeaderboardPositionDto;
	status: 200;
};

export type getProfileRank1Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileRank1ResponseComposite = getProfileRank1Response200 | getProfileRank1Response400;

export type getProfileRank1Response = getProfileRank1ResponseComposite & {
	headers: Headers;
};

export const getGetProfileRank1Url = (leaderboard: string, profileUuid: string, params?: GetProfileRank1Params) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboard/rank/${leaderboard}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboard/rank/${leaderboard}/${profileUuid}`;
};

export const getProfileRank1 = async (
	leaderboard: string,
	profileUuid: string,
	params?: GetProfileRank1Params,
	options?: RequestInit
) => {
	return customFetch<getProfileRank1Response>(getGetProfileRank1Url(leaderboard, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get a Profiles's Leaderboard Rank
 */
export type getProfileRank2Response200 = {
	data: LeaderboardPositionDto;
	status: 200;
};

export type getProfileRank2Response400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileRank2ResponseComposite = getProfileRank2Response200 | getProfileRank2Response400;

export type getProfileRank2Response = getProfileRank2ResponseComposite & {
	headers: Headers;
};

export const getGetProfileRank2Url = (leaderboard: string, profileUuid: string, params?: GetProfileRank2Params) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/leaderboard/${leaderboard}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/leaderboard/${leaderboard}/${profileUuid}`;
};

export const getProfileRank2 = async (
	leaderboard: string,
	profileUuid: string,
	params?: GetProfileRank2Params,
	options?: RequestInit
) => {
	return customFetch<getProfileRank2Response>(getGetProfileRank2Url(leaderboard, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get all entitlements for a user or guild
 */
export type getEntitlementsResponse200 = {
	data: EntitlementDto[];
	status: 200;
};

export type getEntitlementsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getEntitlementsResponse401 = {
	data: null;
	status: 401;
};

export type getEntitlementsResponse403 = {
	data: null;
	status: 403;
};

export type getEntitlementsResponseComposite =
	| getEntitlementsResponse200
	| getEntitlementsResponse400
	| getEntitlementsResponse401
	| getEntitlementsResponse403;

export type getEntitlementsResponse = getEntitlementsResponseComposite & {
	headers: Headers;
};

export const getGetEntitlementsUrl = (discordId: bigint | number | string, params?: GetEntitlementsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/account/${discordId}/entitlements?${stringifiedParams}`
		: `${ELITE_API_URL}/account/${discordId}/entitlements`;
};

export const getEntitlements = async (
	discordId: bigint | number | string,
	params?: GetEntitlementsParams,
	options?: RequestInit
) => {
	return customFetch<getEntitlementsResponse>(getGetEntitlementsUrl(discordId, params), {
		...options,
		method: 'GET',
	});
};

/**
 * This passes along a request to Discord to grant a test entitlement to a user or guild, which only works on subscription products.
 * @summary Grant a test entitlement to a user or guild
 */
export type grantTestEntitlementResponse204 = {
	data: null;
	status: 204;
};

export type grantTestEntitlementResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type grantTestEntitlementResponse401 = {
	data: null;
	status: 401;
};

export type grantTestEntitlementResponse403 = {
	data: null;
	status: 403;
};

export type grantTestEntitlementResponseComposite =
	| grantTestEntitlementResponse204
	| grantTestEntitlementResponse400
	| grantTestEntitlementResponse401
	| grantTestEntitlementResponse403;

export type grantTestEntitlementResponse = grantTestEntitlementResponseComposite & {
	headers: Headers;
};

export const getGrantTestEntitlementUrl = (
	discordId: bigint | number | string,
	productId: bigint | number | string,
	params?: GrantTestEntitlementParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/account/${discordId}/entitlement/${productId}?${stringifiedParams}`
		: `${ELITE_API_URL}/account/${discordId}/entitlement/${productId}`;
};

export const grantTestEntitlement = async (
	discordId: bigint | number | string,
	productId: bigint | number | string,
	params?: GrantTestEntitlementParams,
	options?: RequestInit
) => {
	return customFetch<grantTestEntitlementResponse>(getGrantTestEntitlementUrl(discordId, productId, params), {
		...options,
		method: 'POST',
	});
};

/**
 * This passes along a request to Discord to remove a test entitlement from a user or guild.
 * @summary Remove a test entitlement from a user or guild
 */
export type removeTestEntitlementResponse204 = {
	data: null;
	status: 204;
};

export type removeTestEntitlementResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type removeTestEntitlementResponse401 = {
	data: null;
	status: 401;
};

export type removeTestEntitlementResponse403 = {
	data: null;
	status: 403;
};

export type removeTestEntitlementResponseComposite =
	| removeTestEntitlementResponse204
	| removeTestEntitlementResponse400
	| removeTestEntitlementResponse401
	| removeTestEntitlementResponse403;

export type removeTestEntitlementResponse = removeTestEntitlementResponseComposite & {
	headers: Headers;
};

export const getRemoveTestEntitlementUrl = (
	discordId: bigint | number | string,
	productId: bigint | number | string,
	params?: RemoveTestEntitlementParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/account/${discordId}/entitlement/${productId}?${stringifiedParams}`
		: `${ELITE_API_URL}/account/${discordId}/entitlement/${productId}`;
};

export const removeTestEntitlement = async (
	discordId: bigint | number | string,
	productId: bigint | number | string,
	params?: RemoveTestEntitlementParams,
	options?: RequestInit
) => {
	return customFetch<removeTestEntitlementResponse>(getRemoveTestEntitlementUrl(discordId, productId, params), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get Linked Accounts
 */
export type getLinkedAccountsResponse200 = {
	data: LinkedAccountsDto;
	status: 200;
};

export type getLinkedAccountsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getLinkedAccountsResponse404 = {
	data: null;
	status: 404;
};

export type getLinkedAccountsResponseComposite =
	| getLinkedAccountsResponse200
	| getLinkedAccountsResponse400
	| getLinkedAccountsResponse404;

export type getLinkedAccountsResponse = getLinkedAccountsResponseComposite & {
	headers: Headers;
};

export const getGetLinkedAccountsUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/player/${discordId}`;
};

export const getLinkedAccounts = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getLinkedAccountsResponse>(getGetLinkedAccountsUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Player Data
 */
export type getPlayerDataResponse200 = {
	data: PlayerDataDto;
	status: 200;
};

export type getPlayerDataResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getPlayerDataResponse404 = {
	data: null;
	status: 404;
};

export type getPlayerDataResponseComposite =
	| getPlayerDataResponse200
	| getPlayerDataResponse400
	| getPlayerDataResponse404;

export type getPlayerDataResponse = getPlayerDataResponseComposite & {
	headers: Headers;
};

export const getGetPlayerDataUrl = (player: string) => {
	return `${ELITE_API_URL}/player/${player}`;
};

export const getPlayerData = async (player: string, options?: RequestInit) => {
	return customFetch<getPlayerDataResponse>(getGetPlayerDataUrl(player), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get All Profile Details
 */
export type getAllProfileDetailsResponse200 = {
	data: ProfileDetailsDto[];
	status: 200;
};

export type getAllProfileDetailsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getAllProfileDetailsResponseComposite = getAllProfileDetailsResponse200 | getAllProfileDetailsResponse400;

export type getAllProfileDetailsResponse = getAllProfileDetailsResponseComposite & {
	headers: Headers;
};

export const getGetAllProfileDetailsUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/profiles/${playerUuid}`;
};

export const getAllProfileDetails = async (playerUuid: string, options?: RequestInit) => {
	return customFetch<getAllProfileDetailsResponse>(getGetAllProfileDetailsUrl(playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Profile Member
 */
export type getProfileResponse200 = {
	data: ProfileMemberDto;
	status: 200;
};

export type getProfileResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileResponse404 = {
	data: null;
	status: 404;
};

export type getProfileResponseComposite = getProfileResponse200 | getProfileResponse400 | getProfileResponse404;

export type getProfileResponse = getProfileResponseComposite & {
	headers: Headers;
};

export const getGetProfileUrl = (playerUuid: string, profileUuid: string) => {
	return `${ELITE_API_URL}/profile/${playerUuid}/${profileUuid}`;
};

export const getProfile = async (playerUuid: string, profileUuid: string, options?: RequestInit) => {
	return customFetch<getProfileResponse>(getGetProfileUrl(playerUuid, profileUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Profile Details
 */
export type getProfileDetailsResponse200 = {
	data: ProfileDetailsDto;
	status: 200;
};

export type getProfileDetailsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileDetailsResponse404 = {
	data: null;
	status: 404;
};

export type getProfileDetailsResponseComposite =
	| getProfileDetailsResponse200
	| getProfileDetailsResponse400
	| getProfileDetailsResponse404;

export type getProfileDetailsResponse = getProfileDetailsResponseComposite & {
	headers: Headers;
};

export const getGetProfileDetailsUrl = (profileUuid: string) => {
	return `${ELITE_API_URL}/profile/${profileUuid}`;
};

export const getProfileDetails = async (profileUuid: string, options?: RequestInit) => {
	return customFetch<getProfileDetailsResponse>(getGetProfileDetailsUrl(profileUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get names of a player's profiles
 */
export type getProfileNamesResponse200 = {
	data: ProfileNamesDto[];
	status: 200;
};

export type getProfileNamesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProfileNamesResponseComposite = getProfileNamesResponse200 | getProfileNamesResponse400;

export type getProfileNamesResponse = getProfileNamesResponseComposite & {
	headers: Headers;
};

export const getGetProfileNamesUrl = (player: string) => {
	return `${ELITE_API_URL}/profiles/${player}/names`;
};

export const getProfileNames = async (player: string, options?: RequestInit) => {
	return customFetch<getProfileNamesResponse>(getGetProfileNamesUrl(player), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Profile Member
 */
export type getSelectedProfileResponse200 = {
	data: ProfileMemberDto;
	status: 200;
};

export type getSelectedProfileResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getSelectedProfileResponse404 = {
	data: null;
	status: 404;
};

export type getSelectedProfileResponseComposite =
	| getSelectedProfileResponse200
	| getSelectedProfileResponse400
	| getSelectedProfileResponse404;

export type getSelectedProfileResponse = getSelectedProfileResponseComposite & {
	headers: Headers;
};

export const getGetSelectedProfileUrl = (playerUuid: string) => {
	return `${ELITE_API_URL}/profile/${playerUuid}/selected`;
};

export const getSelectedProfile = async (playerUuid: string, options?: RequestInit) => {
	return customFetch<getSelectedProfileResponse>(getGetSelectedProfileUrl(playerUuid), {
		...options,
		method: 'GET',
	});
};

/**
 * Get lowest auction house prices.
 * @summary Get Auction House
 */
export type getAuctionHouseProductsResponse200 = {
	data: AuctionHouseDto;
	status: 200;
};

export type getAuctionHouseProductsResponseComposite = getAuctionHouseProductsResponse200;

export type getAuctionHouseProductsResponse = getAuctionHouseProductsResponseComposite & {
	headers: Headers;
};

export const getGetAuctionHouseProductsUrl = () => {
	return `${ELITE_API_URL}/resources/auctions`;
};

export const getAuctionHouseProducts = async (options?: RequestInit) => {
	return customFetch<getAuctionHouseProductsResponse>(getGetAuctionHouseProductsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Get a specific bazaar product and it's npc price (if it exists)
 * @summary Get Bazaar Product
 */
export type getBazaarProductResponse200 = {
	data: GetBazaarProductResponse;
	status: 200;
};

export type getBazaarProductResponseComposite = getBazaarProductResponse200;

export type getBazaarProductResponse = getBazaarProductResponseComposite & {
	headers: Headers;
};

export const getGetBazaarProductUrl = (itemId: string) => {
	return `${ELITE_API_URL}/resources/bazaar/${itemId}`;
};

export const getBazaarProduct = async (itemId: string, options?: RequestInit) => {
	return customFetch<getBazaarProductResponse>(getGetBazaarProductUrl(itemId), {
		...options,
		method: 'GET',
	});
};

/**
 * Get all bazaar products.
 * @summary Get Bazaar Products
 */
export type getBazaarProductsResponse200 = {
	data: GetBazaarProductsResponse;
	status: 200;
};

export type getBazaarProductsResponseComposite = getBazaarProductsResponse200;

export type getBazaarProductsResponse = getBazaarProductsResponseComposite & {
	headers: Headers;
};

export const getGetBazaarProductsUrl = () => {
	return `${ELITE_API_URL}/resources/bazaar`;
};

export const getBazaarProducts = async (options?: RequestInit) => {
	return customFetch<getBazaarProductsResponse>(getGetBazaarProductsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Get an ItemDto from raw bytes from Hypixel
 * @summary Parse Skyblock Item from Bytes
 */
export type getItemsFromBytesResponse200 = {
	data: GetItemsFromBytesResponse;
	status: 200;
};

export type getItemsFromBytesResponseComposite = getItemsFromBytesResponse200;

export type getItemsFromBytesResponse = getItemsFromBytesResponseComposite & {
	headers: Headers;
};

export const getGetItemsFromBytesUrl = () => {
	return `${ELITE_API_URL}/resources/item-parse`;
};

export const getItemsFromBytes = async (getItemsFromBytesRequest: GetItemsFromBytesRequest, options?: RequestInit) => {
	return customFetch<getItemsFromBytesResponse>(getGetItemsFromBytesUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(getItemsFromBytesRequest),
	});
};

/**
 * Get all items in the Hypixel resources endpoint
 * @summary Get Skyblock Items
 */
export type getSkyblockItemsResponse200 = {
	data: GetSkyblockItemsResponse;
	status: 200;
};

export type getSkyblockItemsResponseComposite = getSkyblockItemsResponse200;

export type getSkyblockItemsResponse = getSkyblockItemsResponseComposite & {
	headers: Headers;
};

export const getGetSkyblockItemsUrl = () => {
	return `${ELITE_API_URL}/resources/items`;
};

export const getSkyblockItems = async (options?: RequestInit) => {
	return customFetch<getSkyblockItemsResponse>(getGetSkyblockItemsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Get specific skyblock items from the Hypixel resources endpoint, along with bazaar data for each.
 * @summary Get Specific Skyblock Items
 */
export type getSpecifiedSkyblockItemsResponse200 = {
	data: GetSpecifiedSkyblockItemsResponse;
	status: 200;
};

export type getSpecifiedSkyblockItemsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getSpecifiedSkyblockItemsResponseComposite =
	| getSpecifiedSkyblockItemsResponse200
	| getSpecifiedSkyblockItemsResponse400;

export type getSpecifiedSkyblockItemsResponse = getSpecifiedSkyblockItemsResponseComposite & {
	headers: Headers;
};

export const getGetSpecifiedSkyblockItemsUrl = () => {
	return `${ELITE_API_URL}/resources/items`;
};

export const getSpecifiedSkyblockItems = async (
	getSpecifiedSkyblockItemsRequest: GetSpecifiedSkyblockItemsRequest,
	options?: RequestInit
) => {
	return customFetch<getSpecifiedSkyblockItemsResponse>(getGetSpecifiedSkyblockItemsUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(getSpecifiedSkyblockItemsRequest),
	});
};

/**
 * Get the Hypixel provided data of a specific item, as well as a bazaar summary.
 * @summary Get Skyblock Item
 */
export type skyblockProductResponse200 = {
	data: SkyblockItemResponse;
	status: 200;
};

export type skyblockProductResponseComposite = skyblockProductResponse200;

export type skyblockProductResponse = skyblockProductResponseComposite & {
	headers: Headers;
};

export const getSkyblockProductUrl = (itemId: string) => {
	return `${ELITE_API_URL}/resources/items/${itemId}`;
};

export const skyblockProduct = async (itemId: string, options?: RequestInit) => {
	return customFetch<skyblockProductResponse>(getSkyblockProductUrl(itemId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Add Product to Shop Category
 */
export type addProductToCategoryResponse204 = {
	data: null;
	status: 204;
};

export type addProductToCategoryResponse401 = {
	data: null;
	status: 401;
};

export type addProductToCategoryResponse403 = {
	data: null;
	status: 403;
};

export type addProductToCategoryResponseComposite =
	| addProductToCategoryResponse204
	| addProductToCategoryResponse401
	| addProductToCategoryResponse403;

export type addProductToCategoryResponse = addProductToCategoryResponseComposite & {
	headers: Headers;
};

export const getAddProductToCategoryUrl = (categoryId: number | string, productId: bigint | number | string) => {
	return `${ELITE_API_URL}/shop/category/${categoryId}/product/${productId}`;
};

export const addProductToCategory = async (
	categoryId: number | string,
	productId: bigint | number | string,
	options?: RequestInit
) => {
	return customFetch<addProductToCategoryResponse>(getAddProductToCategoryUrl(categoryId, productId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Remove Product from Shop Category
 */
export type removeProductToCategoryResponse204 = {
	data: null;
	status: 204;
};

export type removeProductToCategoryResponse401 = {
	data: null;
	status: 401;
};

export type removeProductToCategoryResponse403 = {
	data: null;
	status: 403;
};

export type removeProductToCategoryResponseComposite =
	| removeProductToCategoryResponse204
	| removeProductToCategoryResponse401
	| removeProductToCategoryResponse403;

export type removeProductToCategoryResponse = removeProductToCategoryResponseComposite & {
	headers: Headers;
};

export const getRemoveProductToCategoryUrl = (categoryId: number | string, productId: bigint | number | string) => {
	return `${ELITE_API_URL}/shop/category/${categoryId}/product/${productId}`;
};

export const removeProductToCategory = async (
	categoryId: number | string,
	productId: bigint | number | string,
	options?: RequestInit
) => {
	return customFetch<removeProductToCategoryResponse>(getRemoveProductToCategoryUrl(categoryId, productId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Create Shop Category
 */
export type createCategoryResponse204 = {
	data: null;
	status: 204;
};

export type createCategoryResponse401 = {
	data: null;
	status: 401;
};

export type createCategoryResponse403 = {
	data: null;
	status: 403;
};

export type createCategoryResponseComposite =
	| createCategoryResponse204
	| createCategoryResponse401
	| createCategoryResponse403;

export type createCategoryResponse = createCategoryResponseComposite & {
	headers: Headers;
};

export const getCreateCategoryUrl = () => {
	return `${ELITE_API_URL}/shop/category`;
};

export const createCategory = async (createCategoryDto: CreateCategoryDto, options?: RequestInit) => {
	return customFetch<createCategoryResponse>(getCreateCategoryUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createCategoryDto),
	});
};

/**
 * @summary Delete Shop Category
 */
export type deleteCategoryResponse204 = {
	data: null;
	status: 204;
};

export type deleteCategoryResponse401 = {
	data: null;
	status: 401;
};

export type deleteCategoryResponse403 = {
	data: null;
	status: 403;
};

export type deleteCategoryResponseComposite =
	| deleteCategoryResponse204
	| deleteCategoryResponse401
	| deleteCategoryResponse403;

export type deleteCategoryResponse = deleteCategoryResponseComposite & {
	headers: Headers;
};

export const getDeleteCategoryUrl = (categoryId: number | string) => {
	return `${ELITE_API_URL}/shop/category/${categoryId}`;
};

export const deleteCategory = async (categoryId: number | string, options?: RequestInit) => {
	return customFetch<deleteCategoryResponse>(getDeleteCategoryUrl(categoryId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Update Shop Category
 */
export type updateCategoryResponse204 = {
	data: null;
	status: 204;
};

export type updateCategoryResponse401 = {
	data: null;
	status: 401;
};

export type updateCategoryResponse403 = {
	data: null;
	status: 403;
};

export type updateCategoryResponseComposite =
	| updateCategoryResponse204
	| updateCategoryResponse401
	| updateCategoryResponse403;

export type updateCategoryResponse = updateCategoryResponseComposite & {
	headers: Headers;
};

export const getUpdateCategoryUrl = (categoryId: number | string) => {
	return `${ELITE_API_URL}/shop/category/${categoryId}`;
};

export const updateCategory = async (
	categoryId: number | string,
	editCategoryDto: EditCategoryDto,
	options?: RequestInit
) => {
	return customFetch<updateCategoryResponse>(getUpdateCategoryUrl(categoryId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(editCategoryDto),
	});
};

/**
 * @summary Get Shop Categories
 */
export type getCategoriesResponse200 = {
	data: ShopCategoryDto[];
	status: 200;
};

export type getCategoriesResponseComposite = getCategoriesResponse200;

export type getCategoriesResponse = getCategoriesResponseComposite & {
	headers: Headers;
};

export const getGetCategoriesUrl = (params?: GetCategoriesParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/shop/categories?${stringifiedParams}`
		: `${ELITE_API_URL}/shop/categories`;
};

export const getCategories = async (params?: GetCategoriesParams, options?: RequestInit) => {
	return customFetch<getCategoriesResponse>(getGetCategoriesUrl(params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get Shop Category
 */
export type getCategoryResponse200 = {
	data: ShopCategoryDto;
	status: 200;
};

export type getCategoryResponseComposite = getCategoryResponse200;

export type getCategoryResponse = getCategoryResponseComposite & {
	headers: Headers;
};

export const getGetCategoryUrl = (category: string) => {
	return `${ELITE_API_URL}/shop/category/${category}`;
};

export const getCategory = async (category: string, options?: RequestInit) => {
	return customFetch<getCategoryResponse>(getGetCategoryUrl(category), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Reorder Shop Categories
 */
export type reorderCategoriesResponse204 = {
	data: null;
	status: 204;
};

export type reorderCategoriesResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type reorderCategoriesResponse401 = {
	data: null;
	status: 401;
};

export type reorderCategoriesResponse403 = {
	data: null;
	status: 403;
};

export type reorderCategoriesResponseComposite =
	| reorderCategoriesResponse204
	| reorderCategoriesResponse400
	| reorderCategoriesResponse401
	| reorderCategoriesResponse403;

export type reorderCategoriesResponse = reorderCategoriesResponseComposite & {
	headers: Headers;
};

export const getReorderCategoriesUrl = () => {
	return `${ELITE_API_URL}/shop/categories/reorder`;
};

export const reorderCategories = async (reorderIntRequest: ReorderIntRequest, options?: RequestInit) => {
	return customFetch<reorderCategoriesResponse>(getReorderCategoriesUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(reorderIntRequest),
	});
};

/**
 * @summary Reorder Products in Shop Category
 */
export type reorderCategoryProductsResponse204 = {
	data: null;
	status: 204;
};

export type reorderCategoryProductsResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type reorderCategoryProductsResponse401 = {
	data: null;
	status: 401;
};

export type reorderCategoryProductsResponse403 = {
	data: null;
	status: 403;
};

export type reorderCategoryProductsResponseComposite =
	| reorderCategoryProductsResponse204
	| reorderCategoryProductsResponse400
	| reorderCategoryProductsResponse401
	| reorderCategoryProductsResponse403;

export type reorderCategoryProductsResponse = reorderCategoryProductsResponseComposite & {
	headers: Headers;
};

export const getReorderCategoryProductsUrl = (categoryId: number | string) => {
	return `${ELITE_API_URL}/shop/category/${categoryId}/reorder`;
};

export const reorderCategoryProducts = async (
	categoryId: number | string,
	reorderCategoryProductsRequest: ReorderCategoryProductsRequest,
	options?: RequestInit
) => {
	return customFetch<reorderCategoryProductsResponse>(getReorderCategoryProductsUrl(categoryId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(reorderCategoryProductsRequest),
	});
};

/**
 * @summary Add Cosmetic to Product
 */
export type addCosmeticToProductResponse204 = {
	data: null;
	status: 204;
};

export type addCosmeticToProductResponse401 = {
	data: null;
	status: 401;
};

export type addCosmeticToProductResponse403 = {
	data: null;
	status: 403;
};

export type addCosmeticToProductResponseComposite =
	| addCosmeticToProductResponse204
	| addCosmeticToProductResponse401
	| addCosmeticToProductResponse403;

export type addCosmeticToProductResponse = addCosmeticToProductResponseComposite & {
	headers: Headers;
};

export const getAddCosmeticToProductUrl = (productId: bigint | number | string, cosmeticId: number | string) => {
	return `${ELITE_API_URL}/product/${productId}/cosmetics/${cosmeticId}`;
};

export const addCosmeticToProduct = async (
	productId: bigint | number | string,
	cosmeticId: number | string,
	options?: RequestInit
) => {
	return customFetch<addCosmeticToProductResponse>(getAddCosmeticToProductUrl(productId, cosmeticId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Remove Cosmetic from Product
 */
export type removeCosmeticToProductResponse204 = {
	data: null;
	status: 204;
};

export type removeCosmeticToProductResponse401 = {
	data: null;
	status: 401;
};

export type removeCosmeticToProductResponse403 = {
	data: null;
	status: 403;
};

export type removeCosmeticToProductResponseComposite =
	| removeCosmeticToProductResponse204
	| removeCosmeticToProductResponse401
	| removeCosmeticToProductResponse403;

export type removeCosmeticToProductResponse = removeCosmeticToProductResponseComposite & {
	headers: Headers;
};

export const getRemoveCosmeticToProductUrl = (productId: bigint | number | string, cosmeticId: number | string) => {
	return `${ELITE_API_URL}/product/${productId}/cosmetics/${cosmeticId}`;
};

export const removeCosmeticToProduct = async (
	productId: bigint | number | string,
	cosmeticId: number | string,
	options?: RequestInit
) => {
	return customFetch<removeCosmeticToProductResponse>(getRemoveCosmeticToProductUrl(productId, cosmeticId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Add Image To Product
 */
export type addProductImageResponse204 = {
	data: null;
	status: 204;
};

export type addProductImageResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type addProductImageResponse401 = {
	data: null;
	status: 401;
};

export type addProductImageResponse403 = {
	data: null;
	status: 403;
};

export type addProductImageResponseComposite =
	| addProductImageResponse204
	| addProductImageResponse400
	| addProductImageResponse401
	| addProductImageResponse403;

export type addProductImageResponse = addProductImageResponseComposite & {
	headers: Headers;
};

export const getAddProductImageUrl = (discordId: bigint | number | string, params?: AddProductImageParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/product/${discordId}/images?${stringifiedParams}`
		: `${ELITE_API_URL}/product/${discordId}/images`;
};

export const addProductImage = async (
	discordId: bigint | number | string,
	uploadImageDto: UploadImageDto,
	params?: AddProductImageParams,
	options?: RequestInit
) => {
	const formData = new FormData();
	if (uploadImageDto.title !== undefined && uploadImageDto.title !== null) {
		formData.append(`title`, uploadImageDto.title);
	}
	if (uploadImageDto.description !== undefined && uploadImageDto.description !== null) {
		formData.append(`description`, uploadImageDto.description);
	}
	formData.append(`image`, uploadImageDto.image);

	return customFetch<addProductImageResponse>(getAddProductImageUrl(discordId, params), {
		...options,
		method: 'POST',
		body: formData,
	});
};

/**
 * @summary Remove Image from Product
 */
export type deleteProductImageResponse204 = {
	data: null;
	status: 204;
};

export type deleteProductImageResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type deleteProductImageResponse401 = {
	data: null;
	status: 401;
};

export type deleteProductImageResponse403 = {
	data: null;
	status: 403;
};

export type deleteProductImageResponseComposite =
	| deleteProductImageResponse204
	| deleteProductImageResponse400
	| deleteProductImageResponse401
	| deleteProductImageResponse403;

export type deleteProductImageResponse = deleteProductImageResponseComposite & {
	headers: Headers;
};

export const getDeleteProductImageUrl = (discordId: bigint | number | string, imagePath: string) => {
	return `${ELITE_API_URL}/product/${discordId}/images/${imagePath}`;
};

export const deleteProductImage = async (
	discordId: bigint | number | string,
	imagePath: string,
	options?: RequestInit
) => {
	return customFetch<deleteProductImageResponse>(getDeleteProductImageUrl(discordId, imagePath), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get Admin Shop Products
 */
export type getAllProductsResponse200 = {
	data: ProductDto[];
	status: 200;
};

export type getAllProductsResponse401 = {
	data: null;
	status: 401;
};

export type getAllProductsResponse403 = {
	data: null;
	status: 403;
};

export type getAllProductsResponseComposite =
	| getAllProductsResponse200
	| getAllProductsResponse401
	| getAllProductsResponse403;

export type getAllProductsResponse = getAllProductsResponseComposite & {
	headers: Headers;
};

export const getGetAllProductsUrl = () => {
	return `${ELITE_API_URL}/products/admin`;
};

export const getAllProducts = async (options?: RequestInit) => {
	return customFetch<getAllProductsResponse>(getGetAllProductsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Refresh Shop Products
 */
export type refreshProductsResponse200 = {
	data: ProductDto[];
	status: 200;
};

export type refreshProductsResponse401 = {
	data: null;
	status: 401;
};

export type refreshProductsResponse403 = {
	data: null;
	status: 403;
};

export type refreshProductsResponseComposite =
	| refreshProductsResponse200
	| refreshProductsResponse401
	| refreshProductsResponse403;

export type refreshProductsResponse = refreshProductsResponseComposite & {
	headers: Headers;
};

export const getRefreshProductsUrl = () => {
	return `${ELITE_API_URL}/products/refresh`;
};

export const refreshProducts = async (options?: RequestInit) => {
	return customFetch<refreshProductsResponse>(getRefreshProductsUrl(), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Update Shop Product
 */
export type updateProductResponse204 = {
	data: null;
	status: 204;
};

export type updateProductResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateProductResponse401 = {
	data: null;
	status: 401;
};

export type updateProductResponse403 = {
	data: null;
	status: 403;
};

export type updateProductResponseComposite =
	| updateProductResponse204
	| updateProductResponse400
	| updateProductResponse401
	| updateProductResponse403;

export type updateProductResponse = updateProductResponseComposite & {
	headers: Headers;
};

export const getUpdateProductUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/product/${discordId}`;
};

export const updateProduct = async (
	discordId: bigint | number | string,
	editProductDto: EditProductDto,
	options?: RequestInit
) => {
	return customFetch<updateProductResponse>(getUpdateProductUrl(discordId), {
		...options,
		method: 'PATCH',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(editProductDto),
	});
};

/**
 * @summary Get Shop Product
 */
export type getProductResponse200 = {
	data: ProductDto;
	status: 200;
};

export type getProductResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type getProductResponseComposite = getProductResponse200 | getProductResponse400;

export type getProductResponse = getProductResponseComposite & {
	headers: Headers;
};

export const getGetProductUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/product/${discordId}`;
};

export const getProduct = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<getProductResponse>(getGetProductUrl(discordId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Claim Free Shop Product
 */
export type claimProductResponse204 = {
	data: null;
	status: 204;
};

export type claimProductResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type claimProductResponse401 = {
	data: null;
	status: 401;
};

export type claimProductResponseComposite = claimProductResponse204 | claimProductResponse400 | claimProductResponse401;

export type claimProductResponse = claimProductResponseComposite & {
	headers: Headers;
};

export const getClaimProductUrl = (discordId: bigint | number | string) => {
	return `${ELITE_API_URL}/product/${discordId}/claim`;
};

export const claimProduct = async (discordId: bigint | number | string, options?: RequestInit) => {
	return customFetch<claimProductResponse>(getClaimProductUrl(discordId), {
		...options,
		method: 'POST',
	});
};

/**
 * @summary Get Shop Products
 */
export type getProductsResponse200 = {
	data: ProductDto[];
	status: 200;
};

export type getProductsResponseComposite = getProductsResponse200;

export type getProductsResponse = getProductsResponseComposite & {
	headers: Headers;
};

export const getGetProductsUrl = () => {
	return `${ELITE_API_URL}/products`;
};

export const getProducts = async (options?: RequestInit) => {
	return customFetch<getProductsResponse>(getGetProductsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Add Image To Style
 */
export type addStyleImageResponse204 = {
	data: null;
	status: 204;
};

export type addStyleImageResponse401 = {
	data: null;
	status: 401;
};

export type addStyleImageResponse403 = {
	data: null;
	status: 403;
};

export type addStyleImageResponseComposite =
	| addStyleImageResponse204
	| addStyleImageResponse401
	| addStyleImageResponse403;

export type addStyleImageResponse = addStyleImageResponseComposite & {
	headers: Headers;
};

export const getAddStyleImageUrl = (styleId: number | string, params?: AddStyleImageParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/product/style/${styleId}/images?${stringifiedParams}`
		: `${ELITE_API_URL}/product/style/${styleId}/images`;
};

export const addStyleImage = async (
	styleId: number | string,
	uploadImageDto: UploadImageDto,
	params?: AddStyleImageParams,
	options?: RequestInit
) => {
	const formData = new FormData();
	if (uploadImageDto.title !== undefined && uploadImageDto.title !== null) {
		formData.append(`title`, uploadImageDto.title);
	}
	if (uploadImageDto.description !== undefined && uploadImageDto.description !== null) {
		formData.append(`description`, uploadImageDto.description);
	}
	formData.append(`image`, uploadImageDto.image);

	return customFetch<addStyleImageResponse>(getAddStyleImageUrl(styleId, params), {
		...options,
		method: 'POST',
		body: formData,
	});
};

/**
 * @summary Create Shop Style
 */
export type createStyleResponse204 = {
	data: null;
	status: 204;
};

export type createStyleResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type createStyleResponse401 = {
	data: null;
	status: 401;
};

export type createStyleResponse403 = {
	data: null;
	status: 403;
};

export type createStyleResponseComposite =
	| createStyleResponse204
	| createStyleResponse400
	| createStyleResponse401
	| createStyleResponse403;

export type createStyleResponse = createStyleResponseComposite & {
	headers: Headers;
};

export const getCreateStyleUrl = () => {
	return `${ELITE_API_URL}/product/style`;
};

export const createStyle = async (createStyleRequest: CreateStyleRequest, options?: RequestInit) => {
	return customFetch<createStyleResponse>(getCreateStyleUrl(), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(createStyleRequest),
	});
};

/**
 * @summary Delete Shop Style
 */
export type deleteStyleResponse204 = {
	data: null;
	status: 204;
};

export type deleteStyleResponse401 = {
	data: null;
	status: 401;
};

export type deleteStyleResponse403 = {
	data: null;
	status: 403;
};

export type deleteStyleResponseComposite = deleteStyleResponse204 | deleteStyleResponse401 | deleteStyleResponse403;

export type deleteStyleResponse = deleteStyleResponseComposite & {
	headers: Headers;
};

export const getDeleteStyleUrl = (styleId: number | string) => {
	return `${ELITE_API_URL}/product/style/${styleId}`;
};

export const deleteStyle = async (styleId: number | string, options?: RequestInit) => {
	return customFetch<deleteStyleResponse>(getDeleteStyleUrl(styleId), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get Shop Style
 */
export type getStyleResponse200 = {
	data: WeightStyleWithDataDto;
	status: 200;
};

export type getStyleResponseComposite = getStyleResponse200;

export type getStyleResponse = getStyleResponseComposite & {
	headers: Headers;
};

export const getGetStyleUrl = (styleId: number | string) => {
	return `${ELITE_API_URL}/product/style/${styleId}`;
};

export const getStyle = async (styleId: number | string, options?: RequestInit) => {
	return customFetch<getStyleResponse>(getGetStyleUrl(styleId), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Update Shop Style
 */
export type updateStyleResponse204 = {
	data: null;
	status: 204;
};

export type updateStyleResponse400 = {
	data: ErrorResponse;
	status: 400;
};

export type updateStyleResponse401 = {
	data: null;
	status: 401;
};

export type updateStyleResponse403 = {
	data: null;
	status: 403;
};

export type updateStyleResponseComposite =
	| updateStyleResponse204
	| updateStyleResponse400
	| updateStyleResponse401
	| updateStyleResponse403;

export type updateStyleResponse = updateStyleResponseComposite & {
	headers: Headers;
};

export const getUpdateStyleUrl = (styleId: number | string) => {
	return `${ELITE_API_URL}/product/style/${styleId}`;
};

export const updateStyle = async (
	styleId: number | string,
	weightStyleWithDataDto: WeightStyleWithDataDto,
	options?: RequestInit
) => {
	return customFetch<updateStyleResponse>(getUpdateStyleUrl(styleId), {
		...options,
		method: 'POST',
		headers: { 'Content-Type': 'application/json', ...options?.headers },
		body: JSON.stringify(weightStyleWithDataDto),
	});
};

/**
 * @summary Remove Image from Style
 */
export type deleteStyleImageResponse204 = {
	data: null;
	status: 204;
};

export type deleteStyleImageResponse401 = {
	data: null;
	status: 401;
};

export type deleteStyleImageResponse403 = {
	data: null;
	status: 403;
};

export type deleteStyleImageResponseComposite =
	| deleteStyleImageResponse204
	| deleteStyleImageResponse401
	| deleteStyleImageResponse403;

export type deleteStyleImageResponse = deleteStyleImageResponseComposite & {
	headers: Headers;
};

export const getDeleteStyleImageUrl = (styleId: number | string, imagePath: string) => {
	return `${ELITE_API_URL}/product/style/${styleId}/images/${imagePath}`;
};

export const deleteStyleImage = async (styleId: number | string, imagePath: string, options?: RequestInit) => {
	return customFetch<deleteStyleImageResponse>(getDeleteStyleImageUrl(styleId, imagePath), {
		...options,
		method: 'DELETE',
	});
};

/**
 * @summary Get Shop Styles
 */
export type getStylesResponse200 = {
	data: WeightStyleWithDataDto[];
	status: 200;
};

export type getStylesResponseComposite = getStylesResponse200;

export type getStylesResponse = getStylesResponseComposite & {
	headers: Headers;
};

export const getGetStylesUrl = () => {
	return `${ELITE_API_URL}/product/styles`;
};

export const getStyles = async (options?: RequestInit) => {
	return customFetch<getStylesResponse>(getGetStylesUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * Get all farming weight constants
 * @summary Get all weight constants
 */
export type getAllWeightsResponse200 = {
	data: WeightsDto;
	status: 200;
};

export type getAllWeightsResponseComposite = getAllWeightsResponse200;

export type getAllWeightsResponse = getAllWeightsResponseComposite & {
	headers: Headers;
};

export const getGetAllWeightsUrl = () => {
	return `${ELITE_API_URL}/weights/all`;
};

export const getAllWeights = async (options?: RequestInit) => {
	return customFetch<getAllWeightsResponse>(getGetAllWeightsUrl(), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get farming weight for a profile member
 */
export type getWeightForProfileResponse200 = {
	data: FarmingWeightDto;
	status: 200;
};

export type getWeightForProfileResponse404 = {
	data: null;
	status: 404;
};

export type getWeightForProfileResponseComposite = getWeightForProfileResponse200 | getWeightForProfileResponse404;

export type getWeightForProfileResponse = getWeightForProfileResponseComposite & {
	headers: Headers;
};

export const getGetWeightForProfileUrl = (
	playerUuid: string,
	profileUuid: string,
	params?: GetWeightForProfileParams
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/weight/${playerUuid}/${profileUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/weight/${playerUuid}/${profileUuid}`;
};

export const getWeightForProfile = async (
	playerUuid: string,
	profileUuid: string,
	params?: GetWeightForProfileParams,
	options?: RequestInit
) => {
	return customFetch<getWeightForProfileResponse>(getGetWeightForProfileUrl(playerUuid, profileUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * @summary Get farming weight for a player's selected profile
 */
export type getWeightForSelectedResponse200 = {
	data: FarmingWeightDto;
	status: 200;
};

export type getWeightForSelectedResponse404 = {
	data: null;
	status: 404;
};

export type getWeightForSelectedResponseComposite = getWeightForSelectedResponse200 | getWeightForSelectedResponse404;

export type getWeightForSelectedResponse = getWeightForSelectedResponseComposite & {
	headers: Headers;
};

export const getGetWeightForSelectedUrl = (playerUuid: string, params?: GetWeightForSelectedParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/weight/${playerUuid}/selected?${stringifiedParams}`
		: `${ELITE_API_URL}/weight/${playerUuid}/selected`;
};

export const getWeightForSelected = async (
	playerUuid: string,
	params?: GetWeightForSelectedParams,
	options?: RequestInit
) => {
	return customFetch<getWeightForSelectedResponse>(getGetWeightForSelectedUrl(playerUuid, params), {
		...options,
		method: 'GET',
	});
};

/**
 * Get farming weight for all profiles of a player
 * @summary Get farming weight for all profiles of a player
 */
export type getWeightForProfilesResponse200 = {
	data: FarmingWeightAllProfilesDto;
	status: 200;
};

export type getWeightForProfilesResponse404 = {
	data: null;
	status: 404;
};

export type getWeightForProfilesResponseComposite = getWeightForProfilesResponse200 | getWeightForProfilesResponse404;

export type getWeightForProfilesResponse = getWeightForProfilesResponseComposite & {
	headers: Headers;
};

export const getGetWeightForProfilesUrl = (playerUuid: string, params?: GetWeightForProfilesParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${ELITE_API_URL}/weight/${playerUuid}?${stringifiedParams}`
		: `${ELITE_API_URL}/weight/${playerUuid}`;
};

export const getWeightForProfiles = async (
	playerUuid: string,
	params?: GetWeightForProfilesParams,
	options?: RequestInit
) => {
	return customFetch<getWeightForProfilesResponse>(getGetWeightForProfilesUrl(playerUuid, params), {
		...options,
		method: 'GET',
	});
};
